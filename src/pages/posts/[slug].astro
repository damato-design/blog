---
import heatColor from '../../heat.js';
import getPosts from '../../posts.js';

import Head from '@components/Head.astro';
import Header from '@components/Header.astro';
import Spine from '@components/Spine.astro';
import Bookshelf from '@components/Bookshelf.astro';
import Footer from '@components/Footer.astro';
import Navigation from '@components/Navigation.astro';
import Postdate from '@components/Postdate.astro';

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((entry, i) => ({
    params: { slug: entry.slug }, props: { 
      prev: posts?.[i - 1],
      next: posts?.[i + 1],
      entry
    },
  }));
}

const { entry, prev, next } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await entry.render();

let updatedHeadingDepth = 1;
const toc = headings.reduce((recentHeadingAtDepths, heading) => {
  const { depth, ...rest } = heading;
  const recentHeading = recentHeadingAtDepths.get(updatedHeadingDepth);
  recentHeading.children = [].concat(recentHeading?.children, rest).filter(Boolean);
  recentHeadingAtDepths.set(depth, rest);
  updatedHeadingDepth = depth - 1;
  return recentHeadingAtDepths;
}, new Map().set(1, { children: [] }));
---

<style is:global define:vars={{ 
  heat: heatColor(entry.data.heat),
  contentWidth: '80ch'
}}>
  article {
    font-size: clamp(1rem, 0.896rem + 0.522vw, 1.3rem);
  }

  article :where(h2, h3, h4, h5, h6, th) {
    font-family: PT Sans Narrow;
    text-transform: capitalize;
    line-height: 1.1;
  }

  article :where(h2, h3, h4, h5, h6) a {
    text-transform: initial;
  }

  article pre {
    width: 100%;
    line-height: 1.5;
    font-size: .9em;
  }

  article code {
    font-family: Consolas,Monaco,Andale Mono,Ubuntu Mono,monospace;
    filter: brightness(0.8);
  }

  article img {
    width: 100%;
    max-width: 860px;
    display: block;
    margin-inline: auto;
    border: 1px solid rgba(0,0,0,.1);
  }

  article blockquote:not(.blockquote) {
    color: var(--heat);
    filter: brightness(0.8);
  }

  article :not(pre) > code {
    color: var(--heat);
  }

  article pre code {
    display: block;
    color: currentColor;
    white-space: pre-wrap;
    background-size: 3em 3em;
    background-origin: content-box;
    background-attachment: local;
    padding: 1em;
    overflow: auto;
    resize: vertical;
  }

  article pre [style="color:var(--astro-code-token-comment)"] {
    opacity: .4;
  }

  article table {
    table-layout: fixed;
    border-collapse: collapse;
    margin-block: 2em;
  }

  article tr {
    border-bottom: 1px solid;
  }

  article :where(th, td) {
    padding: .5em;
  }

  article :where(th:not(:last-child), td:not(:last-child)) {
    border-right: 1px solid;
  }

  @media print {

    article pre,
    article blockquote,
    article aside {
      page-break-inside: avoid;
    }

    article pre code {
      white-space: pre-wrap;
      resize: initial;
    }
  }
</style>

<html lang="en">
  <Head slug={ entry.slug } width='max(20vw + 10rem, 860px)' { ...entry.data }/>
  <body>
    <Header/>
    <Spine time={ remarkPluginFrontmatter.minutesRead } { ...entry.data } />
    <div class="max-width">
      <!-- <Navigation headings={ toc.get(1).children } /> -->
      <Postdate date={ entry.data.date } />
      <article>
        <Content />
      </article>
    </div>
    <Bookshelf prev={ prev } next={ next } />
    <Footer title={ entry.data.title } slug={ entry.slug }/>
  </body>
</html>
