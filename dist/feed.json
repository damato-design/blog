{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog.damato.design",
    "home_page_url": "https://blog.damato.design",
    "feed_url": "https://blog.damato.design/rss.json",
    "description": "Design Systems Hot Takes",
    "author": {
        "name": "Donnie D'Amato",
        "url": "https://blog.damato.design"
    },
    "items": [
        {
            "id": "62-5",
            "content_html": "<p>Pixels are an <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units\">absolute unit</a>, they are expected to represent a fixed size and aren't affected by outside factors (<a href=\"https://www.smashingmagazine.com/2021/07/css-absolute-units/\">sort of</a>). While this sounds like a good thing for design because you can be be sure of the dimensions, the reality is that using pixel values in the web hinders user experience. Layouts become unresponsive, translated content becomes unreadable, and accessibility preferences just aren't considered. In most cases, we want to avoid absolute units and instead use something more flexible that adapts to the needs of the layout.</p>\n<p>Relative units are <em>related</em> to something else. An example of a relative unit is percentage and relates to different properties based on where it is used. The <code>rem</code> is a relative unit which roughly represents the size of the letter &quot;M&quot; in the document. If the document <code>font-size</code> changes, all areas where this unit is used will also change. The root <code>font-size</code> can change based on user preference; usually increasing to help folks with vision impairment. There is a <a href=\"https://medium.com/@vamptvo/pixels-vs-ems-users-do-change-font-size-5cfb20831773\">not insignificant amount of the population</a> who leverage the ability to change the <code>font-size</code> in user settings so we want to ensure this feature of the web is maintained in our experiences. <a href=\"https://brokul.dev/detecting-the-default-browser-font-size-in-javascript\">It's possible to check this out for yourself.</a></p>\n<h2>Hocus pocus</h2>\n<p>There was <a href=\"https://clagnut.com/blog/348/\">a trick by Richard Rutter</a> discovered many years ago which was meant to help folks better understand relative font-size units when coming from pixels. The trick is to set the <code>font-size</code> of the document to <code>62.5%</code>.</p>\n<pre><code class=\"language-css\">html {\n    font-size: 62.5%;\n}\n</code></pre>\n<p>{% aside %}\nIt's important to know that when this trick was discovered, we didn't have <code>rem</code> units at all. The trick was attempting to solve for <code>em</code> units. These units are scoped to the parent <code>font-size</code> which can change at any time. So trying to get all of the sizes to behave is a nightmare. Luckily <code>rem</code> can only be changed in one place.\n{% endaside %}</p>\n<p>The <code>62.5%</code> <em>looks like</em> what we like to call a <a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic number</a>; it seems oddly specific. The number is the ratio 10:16 as a percent. The default <code>rem</code> is 16 pixels, so 1/16th of a <code>rem</code> equals one pixel. Multiplying by 10 helps keep the font size <em>somewhat</em> readable (<code>6.25%</code> is too small, <code>625%</code> too large). Then the final use of this declaration allows for the following:</p>\n<pre><code class=\"language-css\">button {\n    padding: .8rem 1.6rem; /* 8px 16px */\n}\n</code></pre>\n<p>Here, it is possible to write <code>rem</code> in terms of pixels. This provides <a href=\"https://uxdesign.cc/why-designers-should-move-from-px-to-rem-and-how-to-do-that-in-figma-c0ea23e07a15\">the benefits of <code>rem</code></a> while maintaining a pixel mental model. <a href=\"https://www.aleksandrhovhannisyan.com/blog/62-5-percent-font-size-trick/\">This post by Aleksandr Hovhannisyan</a> goes into the approach in more detail also mentioning accessibility considerations. Some design systems (eg., <a href=\"https://workbench.gusto.com/getting-started/engineers/#css-resets\">Workbench by Gusto</a>) use the approach to make it &quot;easier&quot; to work with <code>rem</code> units. So what is so difficult that warrants this approach?</p>\n<p>The fact is that the <code>rem</code> doesn't exist in design tools, so a <strong>translation from pixels to <code>rem</code> must occur</strong> for an inclusive web experience. Before this approach, designers and engineers would need to figure out what the final <code>rem</code> number should be based on a formula. Then they would potentially need to repeat that formula every time a new size was needed. In other words, <a href=\"https://www.editorx.com/shaping-design/article/font-size\">math is hard and to repeat that math is a waste of time</a>. It is &quot;easier&quot; for the translation to occur once globally.</p>\n<p>So why would <a href=\"https://adactio.com/\">Jeremy Keith</a> say the following about the author and the approach nearly 20 years later?</p>\n<p>{% quote &quot;https://twitter.com/adactio/status/1523743519034200067&quot; &quot;Jeremy Keith&quot; %}\nNot that he—or anyone else—would recommend it these days!\n{% endquote %}</p>\n<h2>Absolutely arbitrary font-size</h2>\n<p><a href=\"https://twitter.com/toheebdotcom\">Toheeb Ogunbiyi</a> does a deep dive into the <code>62.5%</code> approach and has some opinions about thinking in pixels:</p>\n<p>{% quote &quot;https://www.toheeb.com/on/62.5-font-size-trick/&quot; &quot;Toheeb Ogunbiyi&quot; %}\nThinking in pixels makes it easy to do the following:</p>\n<ul>\n<li>Translate UI Design to code.</li>\n<li>Read the code in the editor.</li>\n<li>Troubleshoot the code in the browser.</li>\n</ul>\n<p>This ensures a better development experience. In addition, the mental model is maintained across the team.\n{% endquote %}</p>\n<p>What if I said that mental model being maintained is baseless artifact of legacy computer graphic design? 😱</p>\n<p>When you select a pixel font-size, what does it mean? More specifically, what is the difference between <a href=\"https://en.wikipedia.org/wiki/Courier_(typeface)\">Courier</a> and <a href=\"https://en.wikipedia.org/wiki/Verdana\">Verdana</a> at <code>16px</code>? In practice it's meant to represent <a href=\"https://typography.guru/term/em-square-r46\">the <code>em</code> square</a>. In the harsh reality, <a href=\"https://graphicdesign.stackexchange.com/questions/4035/what-does-the-size-of-the-font-translate-to-exactly\">it doesn't really mean anything</a>. That means we could use 16 pigs, or 1 barn, maybe 8 tulips to talk about <code>font-size</code> if design tools were prepared to use these units. It actually doesn't matter as long as the visual result is expected. That's what we are really doing when curating <code>font-size</code>. We are tweaking some input and assessing the visual output. When we get something that Looks Good™, we record what the tool says in the input to repeat the visual style in digital media elsewhere.</p>\n<p>So why do we need to use the pixel value so much? It's because that's what design tools have decided to use to define the <code>font-size</code> among other computer graphic properties. If the design tool was to include the <code>rem</code> as an option, we would have a 1:1 relationship between the design expectation and the engineering execution and no need to require this translation at all! You could speak in terms of <code>rem</code> right in the tool; no math required. The <a href=\"https://twitter.com/SaraSoueidan/status/1619640486305869824\">design tools are the problem</a> and this &quot;solution&quot; is a community hack for a missing feature.</p>\n<h2>Subverting expectations</h2>\n<p>When the <code>font-size</code> value is redefined at the <code>html</code> element, the representation of the <code>rem</code> is changed for the <em>entire document</em>. This means that third-party elements could look incorrect; designed with the <code>rem</code> to expect the browser <code>16px</code> default. This even includes usage of <code>rem</code> in the <a href=\"https://blog.openreplay.com/shadow-dom--the-ultimate-guide/\">Shadow DOM</a>. <a href=\"https://www.twitter.com/joshwcomeau\">Josh W. Comeau</a> calls this out:</p>\n<p>{% quote &quot;https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/#the-sixtwofive-trick-13&quot; &quot;Josh W. Comeau&quot; %}\nThere's a baseline assumption on the web that <code>1rem</code> will produce readable text. I don't wanna mess with that assumption.\n{% endquote %}</p>\n<p>He also mentions that adoption is difficult because it would need to be done all at once. There's no possibility of incremental enhancement. This also means that deprecating the approach is also troublesome. So you need to be very sure in this decision, more than most others.</p>\n<h2>Back to base</h2>\n<p>So instead of thinking in terms of pixels for font size, think in terms of a base (or root) size. What is the font size that is most used in the document? This is most likely your body copy. That should be what the <code>rem</code> represents and exist as the base. Next, any <code>font-size</code> that you want to set past this should be some proportion from the base. How much larger do you want the headline to be from the base? 1.5x larger? 2x larger? 2.5x larger? Guess what, that's <code>rem</code>! If you've set your headline to be 2.5x times larger than the base, that's <code>2.5rem</code>.</p>\n<pre><code class=\"language-css\">h1 {\n    font-size: 2.5rem; /* 2.5x times larger than your base (root) font-size */\n}\n</code></pre>\n<p>If the user zooms the content, that relationship is maintained. This is what <a href=\"https://twitter.com/andresgalante\">Andrés Galante</a> says in his article <a href=\"https://css-tricks.com/accessible-font-sizing-explained/\">&quot;Accessible Font Sizing, Explained&quot;</a> at CSS-Tricks:</p>\n<p>{% quote &quot;https://css-tricks.com/accessible-font-sizing-explained/#aa-think-about-proportions-not-size&quot; &quot;Andrés Galante&quot; %}\nThink about proportions, not size\n{% endquote %}</p>\n<p>While it's recommended to <em>not</em> update the <code>font-size</code> at <code>html</code> and maintain the default expectations, setting the size here <a href=\"https://taupecat.com/blog/2013/07/17/the-62-5-solution/\">isn't all bad</a> as long as it's made accessible. Just recognize that it does affect <em>all</em> use of <code>rem</code> throughout the page where this rule is applied. So reverting this approach later is an exercise of auditing all pages where <code>rem</code> is used and updating the values where appropriate. For large applications and systems, this could be a monumental task. However, if you've kept in mind that the <code>rem</code> is relating to the <code>font-size</code> in the usage, it might not be a difficult change. It might even be a feature of the approach. Though, if you use <code>rem</code> as just another unit because someone said it's better without understanding why, you might end up fighting <code>rem</code>.</p>\n<p>Don't dislike <code>rem</code> because you don't understand it, dislike pixels because you do.</p>\n",
            "url": "https://blog.damato.design/posts/62-5",
            "title": "62.5%",
            "summary": "Humans don't like math so we use math to make the math easier, but at what cost?",
            "image": "https://blog.damato.design/og-images/62-5",
            "date_modified": "2023-01-30T00:00:00.000Z"
        },
        {
            "id": "against-atomic-design",
            "content_html": "<p>Atomic design as an idea I agree with; parts of your system are built from smaller parts. What I don't agree with is the image that has been floating around the internet which introduces people to the concept:</p>\n<p><img src=\"/images/brad-frost-atomic.png\" alt=\"Atomic design guide showing small parts becoming larger\"></p>\n<p>If you think about this, how could an organism (a living thing) become a template (a non-living thing)? If you think I'm taking the image too literally; that's the point. People around the design community have taken the naming convention provided by design as the standard and using it to communicate where something lives within the system.</p>\n<p>So here's a simple question, where would I find the dropdown component in this system? If you know about atomic design this is probably a molecule. If you <em>don't know</em> about atomic design (perhaps like many engineers looking for a component), then it could be a molecule or an organism by process of elimination.</p>\n<p>However, even if you know about atomic design the examples can also conflict. The canonical example of an organism in <a href=\"https://bradfrost.com/blog/post/atomic-web-design/\">the original post</a> is a masthead. However, the masthead could be a reusable template because the megamenu within the masthead could be a organism. The lines become blurry about what exists at each level even for folks who follow atomic design. There's a lots of room for debate about what a particular part of the interface should be categorized as. That debate will only cause confusion and distract from the purpose of the idea.</p>\n<p>So here's the easy fix:</p>\n<p><img src=\"/images/revised-atomic.png\" alt=\"Atomic design guide showing small parts becoming larger\"></p>\n<p><strong>#naming-is-hard</strong>. The naming is what hurts the approach.</p>\n<h2>Definitions</h2>\n<p>I'm going to also include some definitions that I've developed while working with design system people and resources that might help bridge communications across disciplines.</p>\n<ul>\n<li><strong>Product teams</strong>: The group of individual contributors who are responsible for bringing product concepts to life; commonly comprised of designers and developers.</li>\n<li><strong>Patterns</strong>: Recommended, content-agnostic compositions that have not yet been formally named or packaged which are meant to host content, interactivity or feedback for product team use.</li>\n<li><strong>Components</strong>: Patterns that have been promoted to reusable packaged resources which simplify the options that the original pattern suggested using internal logic.</li>\n<li><strong>Fragments</strong>: Components only meant to be used to compose more complex components. These are not commonly used by members outside of the team responsible for them. An example might be a modal backdrop.</li>\n<li><strong>Local Components</strong>: Components meant to support a specific product or feature.</li>\n<li><strong>Universal Components</strong>: Components meant to support all products and features.</li>\n<li><strong>Layouts</strong>: Reusable compositions for visual arrangement; analogous to the use within artboards.</li>\n<li><strong>Templates</strong>: Reusable compositions for data arrangement; analogous to the use within database schemas.</li>\n<li><strong>Modules</strong>: Components populated and configured by people outside of product teams.</li>\n</ul>\n<p>The reason we give names to anything is to share ideas. If the name doesn't properly identify the idea in a repeatable way; it's a signal that the name doesn't support the idea well. My recommendation is to not take the atomic design system naming convention literally but instead to execute on the concept that an interface is a collection of increasing complex compositions. The naming used within the system should be developed so that it meets expectations for most introduced to the system and limits ambiguity.</p>\n",
            "url": "https://blog.damato.design/posts/against-atomic-design",
            "title": "Against atomic design",
            "summary": "There's something about it that is more harmful than helpful.",
            "image": "https://blog.damato.design/og-images/against-atomic-design",
            "date_modified": "2022-05-25T00:00:00.000Z"
        },
        {
            "id": "big-four-oh",
            "content_html": "<p>It's my birthday today, 40 times around the sun. I reflect back to the first time I started journaling; it was on my IBM computer in a text file I called &quot;hyperjournal&quot;. I really tried to be regular about it but just fell out of habit. Fast forward to now and it's been 4 months since my last post but not for lack of effort.</p>\n<h2>Complementary Space</h2>\n<p>A topic that I've <a href=\"../spacing-solved\">written about on my blog</a> and <a href=\"https://www.youtube.com/watch?v=W2P-Bhbcj9k\">spoke about at a conference earlier this year</a> is a new way to think of spacing tokens called <a href=\"https://complementary.space/\">Complementary Space</a>. It's the follow-up to <a href=\"https://gridless.design/\">Gridless Design</a> which got a great deal of interest last year. Complementary Space has gotten a bit less attention but I think that's understandable because it is experimental and not strictly design token based. It needs a different kind of mindset to fully embrace. Releasing it so close to the holidays was also probably bad timing. However, I appreciate all of the feedback I've received on it.</p>\n<h2>Connecting with community</h2>\n<p>So. many. design systems events. In the past few months I attended Schema and Clarity along with a dozen video conference events. The latest was <a href=\"https://www.supernova.io/future-of-design-tokens\">a fully stacked panel speaking about the future of design tokens</a> yesterday, and there's <a href=\"https://www.eventbrite.com/e/unconference-a-maturity-model-for-design-systems-registration-446204027257\">another event today</a> (that I unfortunately must miss). I love how active this community is, where there is always a discussion to be had. I'm especially glad for the wrap up of yesterday's panel where the leadership agreed that there's a future where we <em>aren't</em> pushing pixels or making buttons because it's already done. This gives us time to focus on what really matters; <strong>the experience</strong>.</p>\n<p>There is absolutely a world where design systems is not about the assets but about the infrastructure. I got an opportunity to catch up with <a href=\"https://twitter.com/shaunbent\">Shaun Bent</a> of Spotify who had <a href=\"https://www.youtube.com/watch?v=Xww-x7DgiDw\">a talk</a> a few years ago describing their onion model where a core system supports outer systems. This is where the future of design systems is for me; people who focus on the infrastructure of how resources are delivered across teams. We spoke a bit about the TV team for Spotify since it is especially niche and how the fit into the support strucuture. A question I had was &quot;would it be more beneficial to have a representative of the TV team on the design system team?&quot; Both of us don't know what the answer to that is. There are pros and cons either way. For right now as I understand it, the TV team there is specialized and meets regularly with the design system team for alignment. Though I think these are questions we should be asking, not what is another way of displaying a token library.</p>\n<p>I absolutely love chatting with members of the design system community about these kinds of questions and topics.</p>\n<h2>Redesign</h2>\n<p>When I first launched this blog I didn't put a lot of effort into the design because I expected folks to <a href=\"https://blog.damato.design/feed.xml\">subscribe to the RSS feed</a>. However, every time I'd look at this blog, I'd be so bored with the design of it. It wasn't reflecting my personality and I wasn't sure what direction to go. After playing around a bit and speaking with <a href=\"https://jennifer.damato.design/\">Jen</a> on this; she recommended that I lean harder into the hot takes and use <a href=\"https://firstwefeast.com/tag/hot-ones\">Hot Ones</a> as inspiration. I'm glad there's another designer living with me to help get out of designers-block. 😅</p>\n<p>So now I rate each post with a <code>heat</code> which will inform the accent color used on the post; from mild to volcanic. This isn't visible at all in the feeds, but for those visiting the site it'll be a nice bit of personality. Most of the colors being generated are accessible but I'm looking forward to the new color space functions in CSS to get further accessibility support. Jen also had the idea to have folks reading posts to influence the heat but I'm not about to hook this up to a custom database and authentication just for a single value.</p>\n<p>I've also updated the OG image generation to use <a href=\"https://github.com/vercel/satori\">Satori</a> by way of <a href=\"https://www.npmjs.com/package/eleventy-plugin-og-image\"><code>eleventy-plugin-og-image</code></a>, making it much easier to create images for each post. I hope there's better support for CSS in the future with this tool but it does a good enough job for easy integration.</p>\n<p>I also want to put a bit of animation into the new neon synthwave effect for the titles but that'll take a bit of time and exploration.</p>\n<h2>Plans for next year</h2>\n<p>I have another large project that I started last year based on a short conversation with <a href=\"https://danmall.com/\">Dan Mall</a>. It'll probably take a long time to officially announce since there's a lot of work to be done for it. In the meantime I still expect to create posts here on a better cadence. I have over a dozen post ideas ready to be written.</p>\n<p>Additionally, I'm planning to put more focus on Mastodon and less in other social media platforms. I'm still not comfortable with the new platform because at the moment the circles are small. I hope more folks join for more connections to be made and that finding like interests is easier. However, it's better than having notifications of suggested posts that are completely irrelevant to my interests like most other social platforms. So if you're following me at the birdsite, I recommend you consider <a href=\"https://www.wired.com/story/how-to-get-started-use-mastodon/\">coming over to Mastodon</a> and <a href=\"https://social.design.systems/@donnie\">following me there</a>.</p>\n<p>Looking forward to what the next 40 years may bring!</p>\n",
            "url": "https://blog.damato.design/posts/big-four-oh",
            "title": "Big four oh",
            "summary": "Taking a moment to reflect and excited to launch the new site design.",
            "image": "https://blog.damato.design/og-images/big-four-oh",
            "date_modified": "2022-12-13T00:00:00.000Z"
        },
        {
            "id": "choose-wisely",
            "content_html": "<p>If you believe in free-will, options are most likely a foundational aspect of your philosophy. Designers are responsible for presenting choices to users so that they may select the best option and advance toward a goal. Historically, we have introduced several patterns which support the ability for users to make a choice. In this exploration we will consider some common interface components and understand why we might decide to use one over another.</p>\n<h2>Ground rules</h2>\n<p>The abstract concept we'll be focusing on is a group of similar items and the ways they can be presented and interacted. This means singular buttons and inline links aren't included in this exploration.</p>\n<p>The act of creating an option will also be avoided. Generally speaking, once the option is created, it'll be included within the existing presentational group of options using one of the approaches described. An example of this might be creating a post category for use in tagging entries in a blog.</p>\n<p>While important, this exploration will not be focusing on the curation of the content within an option. Certainly, poor choices in wording or inaccessible options will inhibit the user from making the best choice. The following exploration assumes options are well-crafted.</p>\n<h2>Definitions</h2>\n<p>The following patterns will be referenced throughout this exploration:</p>\n<ul>\n<li><a href=\"https://developer.microsoft.com/en-us/fluentui#/controls/web/commandbar\">Button groups</a>: Examples are found in word processing tools for selecting text alignment.</li>\n<li><a href=\"https://www.lightningdesignsystem.com/components/radio-group/\">Radio button groups</a>: Examples are found in online surveys to rate quality of service.</li>\n<li><a href=\"https://react-spectrum.adobe.com/react-spectrum/CheckboxGroup.html\">Checkbox groups</a>: Examples are found in selecting options to filter products.</li>\n<li><a href=\"https://carbondesignsystem.com/components/select/usage\">Native HTML select options</a>: Examples are found when selecting locations from a list.</li>\n<li><a href=\"https://baseweb.design/components/header-navigation/\">Navigational menus</a>: Examples are found in the header of marketing sites.</li>\n<li><a href=\"https://v2.grommet.io/menu\">Context menus</a>: Examples are found as right-click to copy.</li>\n<li><a href=\"https://www.newskit.co.uk/components/tabs/\">Tab groups</a>: Examples are found within web pages as secondary navigation.</li>\n</ul>\n<p>{% aside %}</p>\n<h3>Button group confusion</h3>\n<p>What I've defined as button group above is not a common button group <a href=\"https://component.gallery/components/button-group/\">found amongst most design systems</a>. The key difference here is the keyboard navigation. A button group is often delivered as just a layout pattern of existing buttons with very little change of visual style and no change in interaction pattern. Each button is accessible via the <code>Tab</code> key like any other button that isn't in a group. Because of this, I identify these as groups of individual buttons. There's nothing stopping most systems to allow any sort of interactive component to exist in these groups; like links for example. For this I recommend providing a layout component instead of something specific for buttons.</p>\n<p>However, I am specifically calling out the pattern found in toolbars as it is expected to be a single tab stop, where navigation between buttons is done by arrow keys. Visually these are groups of buttons but with a different and warranted enhancement for accessibility. This pattern can also be found in <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/\">listboxes</a>, <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/combobox/\">comboboxes</a>, and <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/\">menus</a> which also expect arrow key navigation between options within a single tab stop. A <a href=\"https://component.gallery/components/segmented-control/\">segmented control</a> is also of the same family but more related to radio buttons.</p>\n<p>To reiterate, this behavior is not meant for usage with most groups of buttons found within an interface, as each is commonly expected to be an individual tab stop.\n{% endaside %}</p>\n<p>It's also important to define a few terms used for accessibility:</p>\n<ul>\n<li><strong>Tab stop</strong>: An area of the interface which is focused by the <code>Tab</code> key where additional actions can occur. Links and text input fields are clear tab stop examples, but entire lists of options can also be defined as a single tab stop. The area that should be identified as a tab stop is achieved through accessibility best practices for an experience.</li>\n<li><strong>Roving tabindex</strong>: A technique to show focus on an element without the use of the <code>Tab</code> key. This is done by toggling the <code>tabIndex</code> of interactive elements. One element in the list will receive a <code>tabIndex=&quot;0&quot;</code>, while the rest receive <code>tabIndex=&quot;-1&quot;</code>. This allows the user to re-enter the area using the <code>Tab</code> key and return focus back to the previously focused element. <a href=\"https://www.youtube.com/watch?v=uCIC2LNt0bk&amp;t=6s\">Here's a video explaining the technique by Rob Dodson</a>.</li>\n</ul>\n<p>{% aside %}</p>\n<h3>Accessibility is not easy</h3>\n<p>There's a great deal of nuance when attempting to make options accessible. While the w3 attempts to provide <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\">guidance on best practices</a>, achieving intended results can be challenging. For example, <a href=\"https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#x6-6-2-managing-focus-in-composites-using-aria-activedescendant\">the guidelines claim</a> the following:</p>\n<blockquote>\n<p>If a component container has an ARIA role that supports the <code>aria-activedescendant</code> property, it is not necessary to manipulate the tabindex attribute and move DOM focus among focusable elements within the container.</p>\n</blockquote>\n<p>However, <a href=\"https://zellwk.com/blog/element-focus-vs-aria-activedescendant/\">testing completed by Zell Liew</a> concluded that <code>aria-activedescendant</code> is not well supported for assistive technologies. It's important to put your best efforts toward marking the options for visibiity to all users and their methods of interaction.</p>\n<p>{% endaside %}</p>\n<h2>Instant gratification</h2>\n<p>One of the attributes of making a selection is the immediate result of the interaction. Patterns that show new content based on the selection are commonly immediate. For example, navigational menus which redirect to new content should be instant. Buttons that update state like deleting a row of data are also expected to happen quickly.</p>\n<p>This is in contrast to options which expect a user to make selections and then commit those selections in a final action. This is commonly form elements such as radio buttons, checkboxes and HTML selects. The user will choose these options but no updates to the larger system will be made until the user sends a final command. This is often the case for wizard experiences also, where the act of going to the next step submits the options selected before traversing further.</p>\n<p>This means we can divide the patterns into some groups:</p>\n<p>&lt;div data-density-shift&gt;</p>\n<ul>\n<li>\n<p><strong>Instantaneous</strong></p>\n<ul>\n<li>Button groups</li>\n<li>Navigational menus</li>\n<li>Context menus</li>\n<li>Tab groups</li>\n</ul>\n</li>\n<li>\n<p><strong>Confirmational</strong></p>\n<ul>\n<li>Radio button groups</li>\n<li>Checkbox groups</li>\n<li>Native HTML select options</li>\n</ul>\n</li>\n</ul>\n<p>&lt;/div&gt;</p>\n<h2>Links vs Buttons</h2>\n<p>Full disclosure, I am a big proponent for clarity of intent. I believe links should have an underline and navigate to new pages, allowing for all the default behaviors an <code>&lt;a/&gt;</code> tag provides. Buttons should have visible padding and execute actions on the current page, allowing for all the default behaviors a <code>&lt;button/&gt;</code> tag provides. With that out of the way, there's additional level of consideration for the difference.</p>\n<p>Links (<code>&lt;a/&gt;</code> elements) are meant to be individual tab stops <em>always</em>. This means that if the link is meant to be navigational and sends the user to a new page, the user should be able to go to this element using just the <code>Tab</code> key.</p>\n<p>For buttons (<code>&lt;button/&gt;</code> elements), this isn't the case when prepared as a proper group of related controls. The group is expected to be a single tab stop. Once within the tab stop, a roving tabindex pattern is used to traverse the controls.</p>\n<p>This is a good place to introduce the tab user interface pattern which commonly is treated to look like manilla folder tabs. If the tab interface you prepare expects each tab to be a navigational link that can be revisited using the browser's URL bar, this means that each tab is an individual tab stop; as link behavior is expected. On the other hand, if each tab is meant to execute a command, thereby keeping the user on the same page, then the entire tab group is one tab stop with roving tabindex navigation. In this way the tab pattern can either act as a navigational menu (using links), or a button group (using buttons). The main decision goes back to the links versus buttons debate to decide which experience to use.</p>\n<p>{% aside %}</p>\n<h3>Etymology of tab</h3>\n<p>Tangentially, the word tab has two definitions for this exploration:</p>\n<ul>\n<li><strong>Tab (n.)</strong>: a second or further document or page that can be opened on a spreadsheet or web browser. Compare also Middle English <em>tab</em> &quot;strap or string&quot; (mid-15c.), Norwegian dialectal <em>tave</em> &quot;piece of cloth, rag.&quot;</li>\n<li><strong>Tab (v.)</strong>: to press the tab key on a computer or typewriter. As a short form of <em>tabulator key</em> of a typewriter (later computer) it is recorded from 1916.</li>\n</ul>\n<p>Confusingly, you often do not move between tabs using the tab key. Such is the wonderful world of English and computer interfaces.</p>\n<p>{% endaside %}</p>\n<p>Let's continue to group our patterns:</p>\n<p>&lt;div data-density-shift&gt;</p>\n<ul>\n<li>\n<p><strong>Instantaneous</strong></p>\n<ul>\n<li><strong>Navigational</strong>\n<ul>\n<li>Navigational menus</li>\n<li>Tab groups*</li>\n</ul>\n</li>\n<li><strong>Functional</strong>\n<ul>\n<li>Button groups</li>\n<li>Context menus</li>\n<li>Tab groups*</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Confirmational</strong></p>\n<ul>\n<li>Radio button groups</li>\n<li>Checkbox groups</li>\n<li>Native HTML select options</li>\n</ul>\n</li>\n</ul>\n<p>&lt;/div&gt;</p>\n<h2>Confirmation follows form</h2>\n<p>Returning to the confirmational group, these are patterns most commonly found in forms. This aligns to the way which we would fill out paper forms by entering in all the information first before submitting.</p>\n<p>One of the most clear indications of usage between these patterns of the group is between checkboxes and radio buttons. Checkboxes are meant for selecting more than one option, while radio buttons are used for selecting a single exclusive option.</p>\n<p>{% aside %}</p>\n<h3>Keyboard interactivity differences</h3>\n<p>Another important difference between checkbox and radio groups is the tab stops. Each checkbox is a single tab stop, while an entire group of radio buttons is a single tab stop with arrow key navigation. This is built into HTML as long as the <code>name</code> property is correctly applied.</p>\n<p>{% endaside %}</p>\n<p>Interestingly, the native HTML select allows for both configurations (using the <code>multiple</code> attribute for multiple selections). So the question is, why use the native HTML select when there are other patterns which more clear usage?</p>\n<p>One of the properties of the HTML select is the limited amount of data shown. The element is restrictive to a word or phrase which represents the value for selection. The other patterns allow for much more information. In relation, the select only displays the selected value. This means that it is less likely that the user will review the selection since it requires extra interaction. Laying out all the options as checkboxes or radio buttons help the user consider all the possibilities. Additionally, the HTML select options are not bound to the page layout; its options will exist separately from visual flow. This supports the basis of using checkboxes and radios for options which need more detail from options that are concise.</p>\n<p>{% aside %}</p>\n<h3>Multiple problems</h3>\n<p>The <code>multiple</code> attribute which could be added to the HTML select is not a common pattern in user interface design. On desktop devices, additional keys must be introduced in order to choose multiple options and the keys to use vary between desktop operating systems (<code>Ctrl</code> (windows) or <code>Cmd</code> (Mac)). Touch devices commonly provide these as checkboxes instead which helps users identify the ability to choose more than one. Due to these properties I would recommend avoiding the HTML select for choosing multiple options and instead present a list of checkboxes or a similar but consistent pattern.</p>\n<p>{% endaside %}</p>\n<p>Let's break down the options one more time:</p>\n<p>&lt;div data-density-shift&gt;</p>\n<ul>\n<li>\n<p><strong>Instantaneous</strong></p>\n<ul>\n<li><strong>Navigational</strong>\n<ul>\n<li>Navigational menus</li>\n<li>Tab groups*</li>\n</ul>\n</li>\n<li><strong>Functional</strong>\n<ul>\n<li>Button groups</li>\n<li>Context menus</li>\n<li>Tab groups*</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Confirmational</strong></p>\n<ul>\n<li><strong>Verbose</strong>\n<ul>\n<li><strong>Exclusive</strong>\n<ul>\n<li>Radio button groups</li>\n</ul>\n</li>\n<li><strong>Multiple</strong>\n<ul>\n<li>Checkbox groups</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Concise</strong>\n<ul>\n<li>Native HTML select options</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;/div&gt;</p>\n<h2>Flow</h2>\n<p>Here's a visual representation of our decision tree:</p>\n<pre><code class=\"language-mermaid\">  graph TD\n    A[Give user a choice]\n    A --&gt; B{Happens immediately?}\n    B --&gt;|Yes| C[Instantaneous]\n    B --&gt;|No| D[Confirmational]\n    C --&gt; E{Directed to new page?}\n    E --&gt;|Yes| F[Navigational]\n    E --&gt;|No| G[Functional]\n    D --&gt; H{Include considerations?}\n    H --&gt;|Yes| I[Verbose]\n    H --&gt;|No| J[Concise]\n</code></pre>\n<p>The flow chart above can help lead a path toward a decision by asking <strong>why</strong>...</p>\n<ul>\n<li>Why does the user need the action to happen immediately?</li>\n<li>Why does the user need to remain on the page?</li>\n<li>Why does the user need more information about this choice?</li>\n</ul>\n<p>Adding purpose to these decisions will ultimately support design decisions with clarity. You can be confident that the pattern chosen is the best one based on the answers to these questions.</p>\n<h2>Unavailable options</h2>\n<p>A pattern that may be examined is disabling an option. This could occur because the user hasn't satisfied criteria or the system is not yet prepared to offer the option. Opinions vary about the decision of showing options that the user is unable to select. I believe the following questions can determine if showing a option as disabled is helpful to the user.</p>\n<ul>\n<li>Will the option be available to the user if criteria are met?</li>\n<li>Are the criteria for the option clearly shown in context of the option?</li>\n</ul>\n<p>If the answer to the questions are &quot;yes&quot; then it may be appropriate to disable the option. However, note that disabled options aren't detectable to screen readers and commonly lack sufficient color contrast. Providing the criteria for enabling the option will support these deficits. <a href=\"https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/\">Vitaly Friedman goes into greater detail at Smashing Magazine</a>.</p>\n<p>To put it simply, if it isn't important why include it in the experience? This segues into the next topic.</p>\n<h2>Abundant options</h2>\n<p>Presenting the user with too many options introduces a cognitive load and decision paralysis. As described by <a href=\"https://lawsofux.com/en/hicks-law/\">Hick's Law</a>, the more choices you present, the longer it will take to reach a decision. This might include halting the current flow to return to at a later time. In contrast, limiting the number of options will improve the user experience. While some patterns expect to provide dozens of choices (eg. country of origin), there might be better design choices to capture the same information (eg. text field filtering of the list).</p>\n<p>Use empathy to drive your design choices and your users will be thankful.</p>\n",
            "url": "https://blog.damato.design/posts/choose-wisely",
            "title": "Choose wisely",
            "summary": "The act of making a selection is a critical part of user experience as it creates a path which we hope lands at a goal.",
            "image": "https://blog.damato.design/og-images/choose-wisely",
            "date_modified": "2022-08-15T00:00:00.000Z"
        },
        {
            "id": "classname-soup",
            "content_html": "<p>The internet blew up again regarding CSS frameworks and there have been no shortage of responses. While this could just be more fuel to the fire, I hope this will be evergreen and reflect on any similar approaches that are developed over time. This also has the benefit of avoiding the name of any single framework in particular and instead comment on the direction as a whole.</p>\n<h2>Lightbulb moment</h2>\n<p>Recently, I realized exactly why I was aversed to utility class resources after watching <a href=\"https://www.youtube.com/watch?v=lHZwlzOUOZ4\">Fireship.io's video</a> responding to the recent debates. The lightbulb lit for me specifically at this quote.</p>\n<p>{% quote &quot;https://www.youtube.com/watch?v=lHZwlzOUOZ4&quot; &quot;Fireship.io&quot;  %}\nThe benefit is that you don't have all these arbitrary classnames anymore and know exactly which styles apply to it.\n{% endquote %}</p>\n<p><strong>#naming-is-hard</strong> strikes again. There's two parts in the quote that I'll touch upon.</p>\n<h3>Knowing styles exactly</h3>\n<p><strong>Declarative classnames are not scalable.</strong> In a world where we lean hard into semantic tokens to help describe the experience in terms of purpose over value, we release control of the final presentation of the design to be informed by tokens way up the stack. We no longer prescribe that this card border thickness in this very specific spot must be <code>3px</code>. It should instead be applied by way of a mapping of a semantic token to a value in a theme curation exercise.</p>\n<p>Therefore, it is not flexible to prescribe themable style via a classname. Using <code>.border-teal-darkest</code> has the same problem as having a token which is <code>--border-teal-darkest</code> applied directly to a component. <a href=\"../tokens-as-intents\">It's not semantic</a>. While you could dive deep into this by adding <em>more</em> classnames to address themes, it will become unwieldly. Additionally, I've also thoroughly described <a href=\"../ondark-virus\">the perils of calling something &quot;dark&quot;</a> which also has this vulnerability.</p>\n<p>It's hard to think in this abstract way, as folks who have been building UIs to specification have been forced into &quot;pixel-perfection&quot; for years. While we don't use the term much anymore, the effects remain. Designers will be disappointed if they expect to have exactly this color or precisely this thickness when working within their one context when multiple exist.</p>\n<h3>Reasoned classnames</h3>\n<p><strong>If it has a purpose, it should have a name.</strong> The screenshot example in the video during the quote shows a large red 'x' over some CSS with the following classnames: <code>.main-navbar</code>, <code>.main-navbar-list</code>, <code>.main-navbar-list-item</code>. From this list I can tell exactly what component will be affected by these styles. It should only exist in one part of the project.</p>\n<p>But what if it doesn't? That's the whole problem with naming. I could have another <code>.main-navbar</code> or worse <code>.btn</code> provided some some third-party library which then starts a style battle. I'm a lover, not a fighter!</p>\n<p>One answer is to have a standardized method of coming up with names; similar to the semantic token scheme perhaps including a namespace to distinguish between ownership. I believe a first approach could be to have the semantic token name and the classname to be near identical, differing only in the property that the token should be assigned being encoded into the token.</p>\n<pre><code class=\"language-css\">.ds-main-navbar {\n  background-color: var(--ds-main-navbar-background);\n}\n</code></pre>\n<p>In practice, I don't recommend being this specific but the concept is important. If you are too specific in token names, you'll wind up with thousands of tokens to describe every property of themable appearance. A better approach is to be slightly generic in the semantic token to cover several possible uses, but remain specific in the classname.</p>\n<pre><code class=\"language-css\">/* These are specific styles for the main navigational bar component */\n.ds-main-navbar {\n  /* token covers the background for all navigational surfaces */\n  background-color: var(--ds-surface-navigation-background);\n}\n</code></pre>\n<p>The token can be applied to other similar surfaces but the classname identifies this specific component and the styles it needs. This can be similar to the <a href=\"https://en.bem.info/\">BEM (Block Element Modifier) structure</a> for classnames which identifies the parts of a component.</p>\n<p>This functions well for themable properties, but what about layout? Perhaps you don't want to continue to type out all 59 characters of <code>grid-template-colums: repeat(auto-fit, minmax(240px, 1fr));</code> over and over again. I think that's a reasonable critism to have. In that case, it sound like you might have a new component on your hands.</p>\n<h2>Component driven development</h2>\n<p>In my opinion, the best approach is <em>to not have classes at all</em>. Instead I believe we should scope the styles to uniquely to the component. This can be accomplished in some CSS frameworks or using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a>.</p>\n<p>Using the Shadow DOM technique, you can leverage <code>id</code> instead of <code>class</code> which further demonstrates that there should only be one of these elements within the component's scope. In the Shadow DOM, the elements and styles aren't exposed to the outside DOM so duplication across different components is valid.</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n  #main-nav {\n    background-color: var(--ds-surface-navigation-background);\n  }\n&lt;/style&gt;\n&lt;nav id=&quot;main-nav&quot;&gt;\n  &lt;ul&gt;\n    &lt;!-- Generated on mount of the Custom Element --&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>\n<p>You could also avoid these attributes altogether in the Shadow DOM if the component is simple and semantic.</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n  nav {\n    background-color: var(--ds-surface-navigation-background);\n  }\n&lt;/style&gt;\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;!-- Generated on mount of the Custom Element --&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>\n<p>In CSS-in-JS libraries, this implementation might be more concise.</p>\n<pre><code class=\"language-js\">export const MainNav = styled.nav`\n  background-color: var(--ds-surface-navigation-background);\n`;\n</code></pre>\n<p>Not all of these components need to be exposed to users. Some of them are internal where the names won't be so critical. For example, the <code>.main-navbar-list</code> which is internal to the <code>.main-navbar</code> is not important to external users. In both of the directions shown above, you can target elements even more generically if you possess anxiety over naming.</p>\n<pre><code class=\"language-css\">nav &gt; * {\n  /* this is the list but I don't want to name it */\n}\n</code></pre>\n<p>However, I wouldn't recommend this since it goes against the first point that if it exists, it should have a name. Just be comforted that internal naming is much easier to iterate on.</p>\n<p>{% aside %}\nSome things might not make sense as a component and exist better as a utility. The historic <a href=\"https://css-tricks.com/inclusively-hidden/\"><code>.sr-only</code></a> meant for hiding content visually while remaining accessible to assistive technology might be better suited using an attribute because it is not dependent on other factors for a consistent outcome and is presented imperatively. Not to mention, there's really nothing visual about it.</p>\n<p>Though there's also nothing stopping you from creating a <code>&lt;sr-only/&gt;</code> web component which achieves the same result with more code.\n{% endaside %}</p>\n<p>In lieu of scoping styles, create a standardized naming strategy that keeps classnames semantic and you'll be better prepared to support a scalable experience.</p>\n",
            "url": "https://blog.damato.design/posts/classname-soup",
            "title": "Classname soup",
            "summary": "The problem with a superfluous utility class approach and why I choose a different path.",
            "image": "https://blog.damato.design/og-images/classname-soup",
            "date_modified": "2023-01-17T00:00:00.000Z"
        },
        {
            "id": "close-thy-enemy",
            "content_html": "<p>You've seen it before, an 'x' at the corner of a surface which will allow the user to exit that surface. In design, it seems simple to just place the button at the top corner. To engineer this, we have a few options:</p>\n<h2>Absolute Position</h2>\n<p>The first option most folks might consider is something like the following:</p>\n<pre><code class=\"language-css\">.surface {\n  position: relative;\n}\n\n.surface button.close {\n  position: absolute;\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties */\n  inset-block-start: 0; /* logical property for &quot;top&quot; */\n  inset-inline-end: 0; /* logical property for &quot;right&quot; */\n}\n</code></pre>\n<p>Many design system component libraries use this approach:</p>\n<ul>\n<li><a href=\"https://ant.design/components/modal\">Ant Design System</a></li>\n<li><a href=\"https://baseweb.design/components/modal/\">Base Web (Uber)</a></li>\n<li><a href=\"https://carbondesignsystem.com/components/modal/code/\">Carbon Design System (IBM)</a></li>\n<li><a href=\"https://chakra-ui.com/docs/components/modal/usage\">Chakra UI</a></li>\n<li><a href=\"https://primer.style/react/Dialog\">Github Primer</a></li>\n<li><a href=\"https://reach.tech/dialog/\">Reach UI</a></li>\n<li><a href=\"https://stackoverflow.design/product/components/modals/\">Stacks (StackOverflow)</a></li>\n</ul>\n<p>The problem with this approach is the way that <code>position: absolute</code> works. When applying <code>position: absolute;</code> to an element, it takes that element out of the normal flow of the document. This means that other elements cannot interact with this element.</p>\n<p>In some configurations for the above components, the content (usually the title) <em>could</em> appear visually layered below the close button.</p>\n<p><img src=\"/images/modal-button-collide.png\" alt=\"Curated text that visually collides with the close button in Github Primer\"></p>\n<p>{% aside &quot;warning&quot; %}\nEven if you think you control the content, assume that you don't. User preferences can influence the content display, either by size, translation, or otherwise. Be prepared for the content to vary.\n{% endaside %}</p>\n<p>Some implementations solve this for by providing enough padding to the content area so the button never collides. However, this often results in an imbalance of padding and may not be desirable from design.</p>\n<p><img src=\"/images/modal-padding-imbalance.png\" alt=\"Text never touches the far edge because there's more padding for the close button in IBM Carbon\"></p>\n<h2>Flex header</h2>\n<p>Another method is to add the button as a flex child to a header of the surface.</p>\n<pre><code class=\"language-css\">.surface .header {\n  display: flex;\n}\n\n.surface .header button.close {\n  margin-inline-start: auto;\n}\n</code></pre>\n<p>Here's a list of components across design systems using this approach:</p>\n<ul>\n<li><a href=\"https://atlassian.design/components/modal-dialog/examples\">Atlassian Design</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/fluentui#/controls/web/modal\">Microsoft Fluent</a></li>\n<li><a href=\"https://paste.twilio.design/components/modal/\">Twilio Paste</a></li>\n<li><a href=\"https://polaris.shopify.com/components/modal#navigation\">Shopify Polaris</a></li>\n<li><a href=\"https://shoelace.style/components/dialog\">Shoelace UI</a></li>\n</ul>\n<p>While this avoids a collision between the button and content, it also requires that the header exist which will be at least the height of the close button. In cases where additional header content doesn't exist this displays a large forehead before the content.</p>\n<p><img src=\"/images/modal-large-forehead.png\" alt=\"Removing title results in large space above the content in Twilio Paste\"></p>\n<p>So if the surface doesn't have a title, the amount of space might not be desirable by design. Certainly, if design is attempting to curate the title, this might have some control. However, incorrect alignment could also result in the close button centering within the header instead of pinning to the corner.</p>\n<p><img src=\"/images/modal-centered-header.png\" alt=\"A large amount of header content can visually center button in Shoelace UI\"></p>\n<h2>Unique alternatives</h2>\n<p>There are some other approaches. <a href=\"https://www.lightningdesignsystem.com/components/modals/\">Salesforce Lightning includes the button outside the modal</a> which might not work for other surfaces. <a href=\"https://www.lightningdesignsystem.com/components/alert/\">Their alert component</a> uses the <code>position: absolute;</code> technique as an example which will have similar problems as described above. <a href=\"https://spectrum.adobe.com/page/alert-dialog/\">Adobe Spectrum avoids the 'x' button entirely</a> and provides an explicit action to close the surface. However, <a href=\"https://spectrum.adobe.com/page/in-line-alert/\">their alert component</a> suffers from problems using the icon accessory in relation to the title in this similar layout.</p>\n<p><img src=\"/images/modal-alert-icon.png\" alt=\"A large amount of header content can shrink the icon in Adobe Spectrum\"></p>\n<h2>The &quot;buoyant&quot; approach</h2>\n<p>Let's be clear about some requirements. If design is expecting a close button to appear at the top corner:</p>\n<ul>\n<li>Padding around the surface should be visually consistent.</li>\n<li>The close button should never move from the corner.</li>\n<li>The content in the surface should not collide with the close button.</li>\n</ul>\n<p>{% aside %}\nThese requirements are meant for surfaces that are text heavy. A surface which has a full-bleed media (eg., image or video) which spans the width of the surface will have other problems. The normal <code>position: absolute;</code> treatment would probably work well in this case and then ensuring that the button has sufficient contrast against the media it appears above.\n{% endaside %}</p>\n<p>We can leverage two features of CSS to get an intended result.</p>\n<h3>Recent relative ancestor</h3>\n<p>In order to get an element to be positioned relative to another, we need to create a relationship. In the case of <code>position: absolute;</code> this relation doesn't need to be between a direct parent and child. It can be <strong>any ancestor</strong>. This means we can have a distant child be positioned to ancestor located up the tree.</p>\n<pre><code class=\"language-css\">.surface {\n  position: relative;\n}\n\n.surface button.close {\n  position: absolute;\n}\n</code></pre>\n<p>This is no different from the methods we've critized above <em>except</em> that the <code>button.close</code> element is a child of another element; our secret sauce...</p>\n<h3>Floats!</h3>\n<p>The way we get text to wrap around elements is by using  the <code>float</code> property. We'll float the button toward the right, so that content moves around it.</p>\n<pre><code class=\"language-css\">span.floater {\n  float: right; /* inline-end */\n}\n</code></pre>\n<p>{% aside %}\nWhile we'd like to use CSS Logical Properties for the float, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/float#browser_compatibility\">they aren't well supported</a>. You'll probably need to adjust the type of float based on the <code>dir</code>.</p>\n<pre><code class=\"language-css\">[dir=&quot;rtl&quot;] span.floater {\n  float: left;\n}\n</code></pre>\n<p>{% endaside %}</p>\n<p>Then our HTML should be setup in the following manner:</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;surface&quot;&gt;\n  &lt;span class=&quot;floater&quot;&gt;\n    &lt;button class=&quot;close&quot;&gt;×&lt;/button&gt;\n  &lt;/span&gt;\n  &lt;!-- Surface content goes here --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>You'll need a bunch of other styles to finesse the size of the floating element and button in relation to the content. The final result should look something like this:</p>\n<p>&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;buoyant button&quot; src=&quot;https://codepen.io/fauxserious/embed/ExpWjzL?default-tab=html%2Cresult&amp;editable=true&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;\nSee the Pen &lt;a href=&quot;https://codepen.io/fauxserious/pen/ExpWjzL&quot;&gt;\nbuoyant button&lt;/a&gt; by Donnie D'Amato (&lt;a href=&quot;https://codepen.io/fauxserious&quot;&gt;@fauxserious&lt;/a&gt;)\non &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.\n&lt;/iframe&gt;</p>\n<p>Let me explain what's going on here. In the demo above, the blue box represents the <code>span.floater</code> element dimensions. Note that because we're using <code>position: absolute;</code> for the <code>button</code> element child, it's not visually inside the <code>span.floater</code> but instead positioned relative to the surface. We set the dimensions of the <code>span.floater</code> so that the content won't collide with the dimensions of the <code>button</code> and instead wraps around it.</p>\n<p>You can remove the <code>demo</code> attribute from the <code>&lt;closable-surface/&gt;</code> element to see the final result without the blue box. I'm using a custom element so that it is easy to edit the content without accidentally altering the markup meant for the buoyant button.</p>\n<p>Try removing the title, editing the content, or resizing the window. The content should never collide with the button and always sit at the top corner.</p>\n<p><strong>#make-floats-great-again</strong></p>\n",
            "url": "https://blog.damato.design/posts/close-thy-enemy",
            "title": "Close thy enemy",
            "summary": "A recent bug turns into a realization that most close buttons across the web are engineered poorly.",
            "image": "https://blog.damato.design/og-images/close-thy-enemy",
            "date_modified": "2023-01-09T00:00:00.000Z"
        },
        {
            "id": "colors-dont-solve-problems",
            "content_html": "<p>It's unfortunate that the first entry at the <a href=\"https://lawsofux.com/en/\">Laws of UX</a> is the &quot;Aesthetic-Usability Effect&quot; which is summarized with the following statement.</p>\n<p>{% quote &quot;https://lawsofux.com/en/aesthetic-usability-effect&quot; &quot;Jon Yablonski, Laws of UX&quot; %}\nUsers often perceive aesthetically pleasing design as design that’s more usable.\n{% endquote %}</p>\n<p>The source for this law is from an <a href=\"https://www.nngroup.com/articles/aesthetic-usability-effect/\">NN/G article</a> which I find does a much better job summarizing the concept.</p>\n<p>{% quote &quot;https://www.nngroup.com/articles/aesthetic-usability-effect/&quot; &quot;Kate Moran, Nielsen Norman Group&quot; %}\nUsers are more tolerant of minor usability issues when they find an interface visually appealing. This aesthetic-usability effect can mask UI problems and can prevent issue discovery during usability testing.\n{% endquote %}</p>\n<p>The difference between the two statments is that the former suggests that its good to hide usability problems with garnish. The latter addresses that this is a problem when measuring success accurately. I believe that color is part of that avoidable garnish.</p>\n<h2>Full transparency</h2>\n<p>I'm color deficient. You might have heard of this as color-blindness however, I am not blind to color. I do not see the world in only black &amp; white. I can see colors, just not as well compared to most people. I can appreciate a good synthwave hot pink most of the time. However I also don't believe that the world should be black &amp; white. Color provides personality and identity. There's emotion behind each selection and often relates to an opinion of a piece looking attractive or replusive. It is clearly a driver of some decisions but hardly ones that direct a critical path of usability.</p>\n<h2>Art is not design</h2>\n<p>Art is a freedom of an artist's expression; an attempt to convey a feeling through their medium. It is commonly an egocentric activity to achieve a desired appearance. This is in contrast to design which is striving for altruism and inclusivity. This is supported through pattern recognition and reusing familiar experiences to achieve a goal. Design systems are the ultimate solution for achieving this cohesive experience; establishing trust between the user and the product. One deviation from past experience could be enough for the user to hesitate on the next step or stop the progress indefinitely.</p>\n<p>In design, form follows function. It means that something should be usable before it is beautiful. In order to do this, we must identify the problem we need to solve. In a qualified user experience practice, this will not begin with designing an interface but with research. Interviews, competitive analysis, user personas, and all the truth finding techniques to paint the best picture of the problem so that you can begin to hypothesize a solution.</p>\n<h2>Wirecutting</h2>\n<p>After completing a phase of user research, the next task is not jumping into high-fidelity, pixel-perfect mockups. I'll coin the term &quot;<strong>wirecutting</strong>&quot; for when a designer cuts out this wireframing step to work on prettier things. Wireframing helps visualize the flow and features expected to support the user's goals. In this process, it is easy to see when cluttered interfaces appear and the priority of elements reevalutated. These are commonly without color and for good reason. If it doesn't work in black &amp; white, color isn't going to help. Putting gold leaf on a turd, is a really shiny turd.</p>\n<p>I believe in a world where wireframes are piped into a tool which creates high-fidelity mockups using the rules and guidance of a design system. Amazingly, this world is here in the form of <a href=\"https://uizard.io/\">Uizard</a>. Using this tool, designers can avoid the nuiances of following the system guidelines and focus on the experience by wireframing. The tool should handle the high-fidelity part of the handoff process. For some folks, this may take some of the fun out of the job. On the other hand, maybe the job was misunderstood in the first place.</p>\n<p>Of course this assumes a design system is well established. So let's now focus specifically in this area.</p>\n<h2>Budget crayon box</h2>\n<p>There's dozens of posts online about how color palettes were created for a design system (<a href=\"https://design.lyft.com/re-approaching-color-9e604ba22c88\">Lyft</a>, <a href=\"https://github.blog/2022-06-14-accelerating-github-theme-creation-with-color-tooling/\">Github</a>, <a href=\"https://adobe.design/stories/design-for-scale/reinventing-adobe-spectrum-s-colors\">Adobe</a>). A great deal of talk about color theory and creating tools to help visualize curves of color for the perfect balance. I cannot deny that resulting palettes are often very beautiful and I often need to use the work of others in order to choose color due to my deficiency. However, <strong>how much of that palette do you really expect to use?</strong> This is the palette created by Ferdy Christant based on <a href=\"https://yeun.github.io/open-color/\">Open Color</a>.</p>\n<p><img src=\"/images/color-challenged-palette.png\" alt=\"Large color palette\"></p>\n<p>That's a lot of color.</p>\n<p>Let's first just talk about contrast which is a requirement to make something accessible. If you have several steps of color, I'd guess that many of the colors found within the middle of those steps have trouble being accessible with <em>most</em> colors in your palette. This is something that <a href=\"https://stripe.com/blog/accessible-color-systems\">the Stripe team found</a> while revisiting color for accessibility. It's very possible you could omit much from the middle of the palette to support accessible color choice.</p>\n<p>And in <a href=\"https://ferdychristant.com/color-for-the-color-challenged-884c7aa04a56\">Ferdy's post about working with the palette</a>, there is mention about the lack of accessibility in the palette.</p>\n<p>{% quote &quot;https://ferdychristant.com/color-for-the-color-challenged-884c7aa04a56&quot; &quot;Ferdy Christant&quot;%}\nOpen Color does not rank well when it comes to contrast. The root cause here is that we’re paying the price of beauty.\n{% endquote %}</p>\n<p>You'll be paying for more than beauty if hit with <a href=\"https://www.shrm.org/resourcesandtools/hr-topics/behavioral-competencies/global-and-cultural-effectiveness/pages/record-number-of-lawsuits-filed-over-accessibility-for-people-with-disabilities.aspx\">an accessibility lawsuit</a>. But Ferdy's answer is to add <em>more</em> color; 3 more dark tones to each hue. I don't agree with this suggestion because trying to choose the right color becomes a challenge when there are so many to choose from (ie., <a href=\"https://lawsofux.com/en/hicks-law/\">Hick's Law</a>). Limiting the selection drives consistency. I'll even go so far to say that it enhances creativity because you'll need to design within constraints which requires out-of-the-(crayon)-box thinking.</p>\n<h2>Coloring outside the lines</h2>\n<p>Past contrast, let's now talk about the application of color within an interface. If you look at many modern interface designs today, they tend to follow a 60/30/10 rule. Some sites like <a href=\"https://twitter.com/\">Twitter</a> even let you choose a few colors. This comes from interior design where you choose 3 colors and use them in percentages in your space. This is a loose rule, and <a href=\"https://bootcamp.uxdesign.cc/problems-with-the-60-30-10-rule-25206d02bbfd\">opponents of the rule</a> will call out several factors against it.</p>\n<p>{% quote &quot;https://bootcamp.uxdesign.cc/problems-with-the-60-30-10-rule-25206d02bbfd&quot; &quot;Catherine Rasgaitis&quot; %}\nFirst, restricting a color palette to only three colors inhibits creative designs. While it prevents overstimulation, exploring more “rebellious” designs make brands stand out from their competitors.\n{% endquote %}</p>\n<p>For the purpose of functional product design, I don't believe we should be striving for creativity in the application of color. Users are expecting familiar and accessible experiences. Painting with all of the colors of the wind will feel like navigating a rainbow hurricane. The limiting of this color helps set expectations as users achieve their goals.</p>\n<p>Even in interior design, the original birth of the rule, it is near impossible to strictly use only three colors. It isn't realistic. There will be additional hints of other colors outside the chosen selection for elements that make up a room. This is a photo of an actual room in the design systems house.</p>\n<p><img src=\"/images/ds-house-room.jpg\" alt=\"Photo of room using balanced color of interior design\"></p>\n<p>White is a majority, blue is next most prominent, accents are orange-yellow. Importantly there are other colors too! The green plant, the teal footstools, even a rainbow legoset. Admittedly, the rule should probably be something like 55/25/15, which leaves an additional 5% of various colors not covered by the rule where applicable. For user interface design the majority of color will cover the background, the next most important color covers content, and the final most important covers accents that draw the user toward interactivity.</p>\n<p>So for most cases I believe you could probably design the large majority of an interface by having a palette of roughly 10 colors or less.</p>\n<h2>Cases for more crayons</h2>\n<p>An area where more colors are typically introduced are parts of an experience that are meant to indicate status. An error state is frequently shown in red. However, if the text describing the error is too small or thin to distinguish color, it could be missed as an error. Furthermore, the color red is prosperous in China. These are all reasons why we should not rely on color alone to indicate status. I recommend having two forms of status indication; one can be color where cultural sensitivity is considered and then some other pattern to support the status.</p>\n<p>Another area where color is used is to indicate deviations between near identical entities. This can commonly be found in elements like data visualizations (ie., charts) but can also be found when segregating users in a list of contacts. Changes of color here are meant to separate like items making the collection easier to scan.</p>\n<p>I can tell you from experience that I often have difficulty identifying the parts of a data visualization that relies on color to show data <a href=\"https://www.nature.com/articles/d41586-021-02696-z\">but don't take my word for it</a>. You can imagine how much harder it would be for a blind user to experience. This is again why more emphasis should be given toward presenting the data inclusively, perhaps using a table, and also include a progressive enhancement through a visualization. Putting the color before the data is only helpful for some; let's consider being help for all. The Carbon folks at IBM have more <a href=\"https://medium.com/carbondesign/color-palettes-and-accessibility-features-for-data-visualization-7869f4874fca\">tips to support data visualization for accessibility</a> and mention more work still needs to be done.</p>\n<h2>Finish with color</h2>\n<p>There is a reason why, when you apply stain to a table, the solution you apply is called the &quot;finish&quot;. It happens at the end of the building process. After all the plans are made, the legs cut and fastened, and the top made smooth do you finally apply the coloring. Color can bring the personality to an experience and to call something done. There can be an appropriate time to focus on this work but for the start, keep it simple and use design tokens to support changes for the future. Make color the finish to a usable product.</p>\n",
            "url": "https://blog.damato.design/posts/colors-dont-solve-problems",
            "title": "Colors don't solve problems",
            "summary": "Color is one of the least important facets of user interface design.",
            "image": "https://blog.damato.design/og-images/colors-dont-solve-problems",
            "date_modified": "2022-07-11T00:00:00.000Z"
        },
        {
            "id": "designers-should-code",
            "content_html": "<p>In the book &quot;<a href=\"https://books.google.com/books/about/Syntactic_Structures.html?id=a6a_b-CXYAkC\">Syntactic Structures</a>&quot;, linguist <a href=\"https://chomsky.info/\">Noam Chomsky</a> composes the following sentence:</p>\n<p>{% quote &quot;https://en.wikipedia.org/wiki/Colorless_green_ideas_sleep_furiously&quot; &quot;Noam Chomsky&quot; %}\nColorless green ideas sleep furiously.\n{% endquote %}</p>\n<p>The example demonstrates a sentence that is grammatically correct but possess no meaning. You might imagine someone who has a dictionary without definitions and creates sentences just by following the rules of grammar. This analogy can translate into design; a person could have a naive understanding of colors that go well together but ultimately miss the purpose; to provide a usable experience.</p>\n<h2>The medium is the message</h2>\n<p>A great painter doesn't only possess the creativity to make a beautiful scene, they also know their medium. They know how the paints work together, and how they adhere to the canvas. They can make decisions on what kinds of paints to use against a certain canvas. They will have an in-depth knowledge of these factors to achieve satisfying results. They also know the limitations of the medium; they should not create a sculpture with the paint. It doesn't mean that they cannot continuously layer paint onto the canvas to produce a sculpture. It means that approach is unexpected to the medium.</p>\n<p>When designing products for a population, the best approach is to design as expected. Create experiences people are familiar with well-established patterns. It doesn't mean you can't experiement in limited capacities, but it does mean that you might not receive the same engagement that an expected interaction would have. There is friction for users that come across new patterns. When you reduce this friction and <a href=\"https://lawsofux.com/jakobs-law/\">present experiences that users are commonly familiar with</a>, your experience is percieved as faster, more efficient, and beneficial.</p>\n<p>In order to understand expectations as a designer working in a medium (ie., the web), you should have a general understanding of how that medium works. What is expected and what the pitfalls are. While you could learn these things through conversations and media; I feel the best way is to <a href=\"https://www.youtube.com/watch?v=ZXsQAXx_ao0\">actually code</a>.</p>\n<p><strong>Let me be clear</strong></p>\n<ul>\n<li>Designers <em>shouldn't</em> be expected to code as a part of their role.</li>\n<li>Designers <em>shouldn't</em> be responsible for the final execution of a experience in terms of engineering.</li>\n<li>Designers <em>should</em> be knowledgable about the medium they are designing for; it's features and constraints.</li>\n<li>Designers <em>should</em> reconsider novel design approaches in favor of user and medium expectations.</li>\n</ul>\n<h2>How to not become an engineer</h2>\n<p>The goal is not to create a new kind of canvas; the goal is to learn about the difference canvases by experiementing. As a designer, you might have some explorations you've done in a design tool. Think about what it might take to create one of them. Think about how you learned your design tool and use the same strategies to learn how to make a web page. Try not to get caught up in framework debates or special tools because that can become overwhelming. I'd recommend using a tool like <a href=\"https://codepen.io/\">CodePen</a>, which removes a lot of fluff and most importantly gives you immediate feedback to your changes. No switching between a browser and code editor, no running terminal commands. Just type &quot;Hello world&quot; in the HTML panel and see the result in the page. Congratulations, you've wrote some code!</p>\n<p>Next, try to make a wireframe of one of your explorations. The web is just boxes so figure out how to make a box and how to position it in the right spot. See what it takes and what happens when you change the size of the window for different devices. Learn a little bit about that flexbox and CSS grid everyone keeps talking about. Does that help you place the boxes better? Probably. Can you conjure your own CSS incantations to put boxes wherever you want? Maybe not but that's ok! That's an engineer's job. You're just learning more about how the web works.</p>\n<p>Now take it further. Add some text and change the size. How would a user type into a form? What happens when you change the zoom of the page? What about when you hit the tab key, can you see what control you'll be affecting next? Really think about <em>all</em> users here; who you might not have considered and how could it affect what you've made. Is there anything that can be done to make the result more inclusive? It's insights like this which will close the communication gap between you and your engineers.</p>\n<p>Now you're ready to have a new canvas made to your specifications for a perfect masterpiece made for everyone.</p>\n",
            "url": "https://blog.damato.design/posts/designers-should-code",
            "title": "Designers should code",
            "summary": "Medium ignorance is detrimental when communicating your intentions.",
            "image": "https://blog.damato.design/og-images/designers-should-code",
            "date_modified": "2023-02-08T00:00:00.000Z"
        },
        {
            "id": "do-cards-exist",
            "content_html": "<p>There are <a href=\"https://component.gallery/components/card/\">79 examples for the card component</a> found at <a href=\"https://component.gallery/components/\">The Component Gallery</a>; easily in the top 10 most found across the showcased design systems. It seems obvious that the card is something that becomes one of the resources found in most libraries.</p>\n<h2>OUTLINE</h2>\n<ul>\n<li>Have 5 designers draw a card versus any other component</li>\n<li>Is everything a component?\n<ul>\n<li>Could an entire page be a component? Why might this feel awkward?\n<ul>\n<li>Pages have different purposes.</li>\n<li>Pages are made of smaller pieces.</li>\n</ul>\n</li>\n<li>It might feel more comfortable to categorize a page as a composition.</li>\n</ul>\n</li>\n<li>What is a component?\n<ul>\n<li>Most definitions are fast and loose\n<ul>\n<li>https://design-system.service.gov.uk/components/</li>\n<li>https://carbondesignsystem.com/components/overview/</li>\n<li>https://atlassian.design/components/</li>\n<li>Including my own ./against-atomic-design</li>\n</ul>\n</li>\n<li>A reusable packaged resource with a unique generic purpose and consistent layout composition.\n<ul>\n<li>Reusable packaged resource means it comes as one asset.</li>\n<li>Unique generic purpose means that the resource has one reason to exist in relation to other components.</li>\n<li>Consistent layout composition means that its construction does not vary given the same content.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>What is a card?\n<ul>\n<li>A card is a composition representing an entity. It comes with much of the same elements as a simple web page.</li>\n<li>Often the card could be a text/image link or a bulletpoint instead.</li>\n<li>Most entities have a stakeholder.</li>\n<li>Several variations of Compass listing card, owned by the listing team.</li>\n<li>The way a recipe is meant to be portrayed is likely different from a movie you can watch now.</li>\n</ul>\n</li>\n</ul>\n<p>Most attempts found in design systems in defining a component are fast and loose.</p>\n<p>What makes a button a component, and a stylized box not a component?</p>\n<p>A component has three basic features: content, layout, and style. Changing the style (color, typography, spacing, roundness, etc) doesn't alter the purpose of the component. (caveat with errors but shouldn't only be represented using style). Changing the content alters the message; the same kind of component can be used to message the user that they've won one million dollars or that we've logged them out. Different component, same layout and style.</p>\n<p>So what drives the possibility of different layouts?</p>\n<p>The button has a unique purpose which does not change after customization.</p>\n<p>Have you come across buttons having icons with conflicting placement? Some icons appear on the left of the text label, some on the right? If you have an opinion about how this should be handled, then you should also agree that a card is not a component.</p>\n<p>For systems which have guidelines for composition, this is solved by restricting the interface for the component, configured in such a way which makes choices on behalf of the author based on the guidelines of the system. This will cause a supplied icon to always appear on one side of the text label, so that the author doesn't need to lookup the guidelines. This button will be presented like all other buttons in the system automatically.</p>\n<p>On the other hand, allowing the icon to appear on either side allows for cases where the guidelines might be unclear. A chevron icon shouldn't appear on the left, only on the right. How do I get it there?</p>\n<p>There exists a spectrum:</p>\n<p>Unrestricted ------- [you are somewhere here] -------- Restricted</p>\n<p>The more restrictive the composition expectations are, the more usage aligns according to design guidelines. The less restrictive composition expectations are, the more freedom designers have.</p>\n<p>Gestalt theory suggests that the whole is something different than the sum of its parts.</p>\n<p>When you have different customizations between cards, does they still serve the same purpose?</p>\n<p>If you have a icon-button and a text-button, but they are both interactive and execute as expected, they both serve the same purpose.</p>\n<p>If you have a movie-card and a recipe-card, they do not serve the same purpose. The purpose is driven by the content.</p>\n<p>How does field frame fit into this narrative? The expectations are more well-defined. Elements can only exist in a row and the kinds of elements are restrictive.</p>\n<p>The composition is not subject to change based on external factors.</p>\n",
            "url": "https://blog.damato.design/posts/do-cards-exist",
            "title": "Do cards exist",
            "summary": "I argue that a card shouldn't be categorized as a component and instead exist as another concept entirely.",
            "image": "https://blog.damato.design/og-images/do-cards-exist",
            "date_modified": "2022-12-13T00:00:00.000Z"
        },
        {
            "id": "ds-events-backstage",
            "content_html": "<p>Last month I had the pleasure and honor of being invited to speak in <a href=\"https://www.youtube.com/watch?v=DPvxOcWlLn0\">a webinar hosted by Knapsack about theming in complex ecosystems</a>. On that day, there were 3 different design system related events happening; two of them scheduled at the same time. It was at this point I thought that it would be helpful to have all the events in our community to be in one place. So I did what any of us do: I bought a domain.</p>\n<h2>Helping hands</h2>\n<p>After <a href=\"https://twitter.com/donniedamato/status/1696534327004364890\">I announced the idea in a tweet</a> that day, <a href=\"https://twitter.com/joshdesignnz\">Josh Harwood</a> mentioned he had a similar idea (and also similar domain) so we ended up collaborating on the project. First jamming with ideas on LinkedIn but later using the <a href=\"https://design-systems.slack.com/\">Design Systems Slack</a> which is much better suited for this kind of work. My wife <a href=\"https://twitter.com/jipdamato\">Jen</a> was also involved in the process, making this a <a href=\"https://ds.house/\">Design Systems House</a> project.</p>\n<h2>Concept</h2>\n<p>The idea was simple, we want some feed of events that you can view all events that have design systems content. What the registration link is, if it's online or in-person (or both) and most importantly when the event will be in relation to other events. Josh gathered a lot of different concepts to compare and identified the treatments that we liked the most. We trimmed down some of the ideas for the sake of an MVP; something that gets the general idea across.</p>\n<h2>Design</h2>\n<p>A blank canvas is always a hard place to start. Luckily I had something for a long time ago (my second codepen) which was going to kick this off.</p>\n<p>&lt;iframe height=&quot;300&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Material Design Hover Animated Calendar Icon&quot; src=&quot;https://codepen.io/fauxserious/embed/yNrgNJ?default-tab=html%2Cresult&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;\nSee the Pen &lt;a href=&quot;https://codepen.io/fauxserious/pen/yNrgNJ&quot;&gt;\nMaterial Design Hover Animated Calendar Icon&lt;/a&gt; by Donnie D'Amato (&lt;a href=&quot;https://codepen.io/fauxserious&quot;&gt;@fauxserious&lt;/a&gt;)\non &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.\n&lt;/iframe&gt;</p>\n<p>I created this pen in 2015 after seeing the design of the Google Calendar icon and gave it some small animation on hover. I was super proud of it back then so I'm glad it finally found a home in a project after all these years. I thought it would be functional by flipping to the date as your scroll.</p>\n<p>The event card design was mostly composed of the essential data we wanted to show; the who, what, where, when, and how. I recommended that the location tags were a separate treatment from other qualifiers to make them easier to identify. I felt if we had a collection of tags that were related, scanning them would be more difficult. Granted, we did also add filters so maybe this is less of a concern now.</p>\n<h2>Development</h2>\n<p>The important thing to know about me is that I don't often build applications. I'm commonly petrified of trying to connect to a database so if I was going to pull this off, I knew I needed something simple. I've been loving <a href=\"https://astro.build/\">Astro</a> recently for it's ability to do absolute magic and since what we were making was essentially a blog where each post is an event, it seemed like a good choice. Eventually, we decided that it didn't make sense for each event to have its own page, since we weren't showing much more information between the feed and the page. Plus, the purpose for folks visiting isn't to stay on this site, but to go register at another.</p>\n<h3>Dates</h3>\n<p>Inevitably, this kind of a site will require a heavy use of datetime manipulation. Unlike many developers, the <code>Date()</code> object doesn't scare me; I've been working with it for years and understand what it's doing most often. Here's some of the finer points of the system in this regard.</p>\n<ul>\n<li>Writing a UTC date into the client is trivial when the timezone is included. It'll be localized when finally rendered as a string.</li>\n<li>Speaking of rendering as a localized string, you always want to reach for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> and its related methods. It even has the ability to give you <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\">the parts of a localized date</a>. We use this for the mini calendar pages.</li>\n<li>The harder part is having the client enter a datetime and sending it as UTC. The form that creates an event uses a <code>&lt;input type=&quot;datetime-local&quot;/&gt;</code> which should give some indication of what it does. However, this was the easiest way to put a datetime input on the page.</li>\n</ul>\n<h3>Timezones</h3>\n<p>A helpful fact about working with Josh is that he lives in New Zealand, on the complete opposite side of the world from me in New York. For him, it is all too common for him to need to translate dates and times into his local time just to see if they are remotely available to participate. The process of converting to local time is annoying and we wanted to change that. This is where the global timezone input was born and it was a bit of a challenge.</p>\n<p>The list of timezones is very simple, as is getting the user's current timezone. One line of code each:</p>\n<pre><code class=\"language-js\">const timezones = Intl.supportedValuesOf('timeZone');\nconst userTZ = Intl.DateTimeFormat().resolvedOptions().timeZone;\n</code></pre>\n<p>The hard part is getting the UTC offset from the timezone name. For that, I had to do <a href=\"https://stackoverflow.com/a/64262840\">some digging</a> but here's the final result:</p>\n<pre><code class=\"language-js\">function getUtcOffset(timeZone) {\n    const timeZoneName = Intl.DateTimeFormat(&quot;ia&quot;, {\n        timeZoneName: &quot;shortOffset&quot;,\n        timeZone,\n    })\n        .formatToParts()\n        .find((i) =&gt; i.type === &quot;timeZoneName&quot;).value;\n    const matchData = timeZoneName.match(/([+-])(\\d+)(?::(\\d+))?/);\n    if (!matchData) return '';\n    const [, sign, hour, minute] = matchData;\n    return [sign, (hour || '0').padStart(2, '0'), (minute || '0').padStart(2, '0')].join('');\n}\n</code></pre>\n<ul>\n<li>Using the timezone name, format it's parts using <code>'ia'</code> (<a href=\"https://en.wikipedia.org/wiki/Interlingua\">Interlingua</a>) to return the <code>timeZoneName</code> value.</li>\n<li>That value should include the UTC offset with some parts that we parse out with a Regular Expression.</li>\n<li>We deconstruct the Regular Expression result and reconcatenate with padded digits.</li>\n</ul>\n<p>Using that function, with the value from a <code>&lt;input type=&quot;datetime-local&quot;&gt;</code>, I can create a UTC time in the client with a bit more concatenation.</p>\n<pre><code class=\"language-js\">function onChange({ target }) {\n    const isoUtcDate = new Date(`${target.value}:00${getUtcOffset(timeZone)}`).toISOString();\n}\n</code></pre>\n<p>There might be a cleaner way to do this if I was to dive into source of <a href=\"https://date-fns.org/\"><code>date-fns</code></a> or <a href=\"https://momentjs.com/\"><code>moment</code></a>. Something to look into for later.</p>\n<p>Now the global timezone input will change all of the dates and times to the user's selected timezone. This is very helpful when inputting a new event; so you don't need to lookup what it is for your timezone. You can enter the information in the timezone announced by the event.</p>\n<p>One of the fast-follows we'll need to do is including the timezone for physical events. Since seeing the local datetime when the event is posted in another timezone is confusing. This should be just saving the user's timezone when the data is input for physical events, assuming they aren't trying to convert themselves. For the moment, the time at each event links to the global timezone input so a person can update it themselves but it would probably be helpful to display this on the physical events upfront. It's also not immediately clear which timezone a physical event might be in for all visitors.</p>\n<h3>Images</h3>\n<p>What is a post without an image? We knew we wanted to give each event some more personality than just the event details. So including an image was important. My idea was to have a few options; image upload or image &quot;search&quot;. The image upload is easy using <code>&lt;input type=&quot;file&quot;/&gt;</code> with a little bit of CSS magic to make it look consistent with other inputs. However, the image search was much more involved.</p>\n<p>The idea was for the user to input a URL and we'd intelligently get an image based on the URL. Here's the steps:</p>\n<ul>\n<li>If the URL is an image, use it.</li>\n<li>If the URL is an HTML page, check for an Open Graph image and use that.</li>\n<li>If the URL is an HTML page and doesn't have an Open Graph image, take a screenshot.</li>\n</ul>\n<p>From my experience, whenever I hear screenshot, I immediately think I need a headless chrome browser to render the HTML. I initially started using <a href=\"https://playwright.dev/\">Playwright</a> and got everything working in development on my local machine. However, as soon as I uploaded the build to Netlify, it failed. Why? Playwright is too large. I tried looking at tutorials for folks successfully using it or <a href=\"https://pptr.dev/\">Puppeteer</a> in a Netlify function but nothing I tried worked.</p>\n<p>I was pretty defeated after several hours of work trying to figure out how to make this smaller. At the end of it all, I came to my wife with a big hug and all she said was &quot;is there anything else you could do?&quot; That's when it hit me; maybe I don't need headless chrome at all?</p>\n<p>For two of the 3 options, all I'm really doing is a <code>fetch()</code> request and I don't need any dependencies for that. That left the last option, the screenshot. I searched for a few hours, trying different packages and looking at their sizes. I finally found one that worked; <a href=\"https://www.npmjs.com/package/red-snapper\"><code>red-snapper</code></a>. I don't know how, but this package is only 160kB (gzip) and makes screenshots pretty easily. The one gotcha is that you'll want to add the <code>delay</code> option so the page has a chance to load.</p>\n<p>One small addition for this was including an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a> to the fetch as it's possible a URL might not be valid so instead of the normal timeout, we abort ourselves.</p>\n<pre><code class=\"language-js\">async function fetchWithTimeout(resource, options = {}) {\n    const { timeout = 8000 } = options;\n    \n    const controller = new AbortController();\n    const id = setTimeout(() =&gt; controller.abort(), timeout);\n  \n    const response = await fetch(resource, {\n      ...options,\n      signal: controller.signal  \n    });\n    clearTimeout(id);\n  \n    return response;\n}\n</code></pre>\n<h3>Verifying</h3>\n<p>So if a person makes a new event, how do we review it? I knew I wanted to avoid creating some <a href=\"https://en.wikipedia.org/wiki/Role-based_access_control\">RBAC</a> system all for the sake of 3 of us looking at some data once in a while. I had the idea of using Github PRs for reviewing the submissions. However, when I started looking at the <a href=\"https://octokit.github.io/rest.js/\">official docs</a>, I was immediately overwhelmed. There's just so much you need to know to get things working. That's when I caved; I asked <a href=\"https://chat.openai.com/\">ChatGPT</a> to just tell me how to do it.</p>\n<p>As much as I believe that technology will eventually help up do things more efficiently, I will rarely use it personally. There's something about having the ability to do it myself that makes me feel useful. The Github docs on the other hand make me feel completely inadequate. I think the other reason why I think this was appropriate is because this isn't really my area of expertise. My world is the front of the frontend so that's where I want to comfortably keep my expertise.</p>\n<p>Back on track and a few <code>await</code> calls later, I can create a PR for the repository with a new event submission. Now we can just login using Github, make approvals and merge with an auto-deploy. It even has branch previews courtesy of Netlify!</p>\n<p>Eventually, we'll make the form more intelligent. The error messaging isn't great and we'd like to have a predetermined list of locations to choose before creating a new one. However, as long as there is a good attempt at completing it, it'll submit. Plus, someone from the team can always correct an entry before it's posted.</p>\n<h3>Reviewing the past</h3>\n<p>One of the things we discussed about was what happens when events are complete? Do we not show them, or maybe show them differently? Do we have the ability to link to resources produced by the event? I had strong feelings about the last point. It was important to me that we review an event once. Otherwise it would be exhausting trying to collect all the information from past events on a regular basis. Additionally, if we were going to put the responsibility on the person who submitted the event in the first place; I'd need some way of reidentifying who they were to update the post. That returns back to the RBAC problem; now with user creation. I squashed the idea just because of my abilities but I do see the benefit in a more complete system.</p>\n<p>As for the other features of past events. We opted to do a pagination approach, where the first event at the top of the feed in the homepage is the next upcoming event and following events go forwards in time. If you go back one page, the first event at the top will be the most recent <em>past</em> event and subsequent events go further back in time. Historical events are stylized in a sepia filter (including the pagination button when you will travel to a historical page) to make them look more old-timey.</p>\n<h3>Pagination</h3>\n<p>Speaking of pagination, this was trickier than I expected since we aren't starting at the first or last event, but something in the middle. When you load the page, we determine what today's date is and then mark the next event according to that date. Then we separate pages offset by that date. I had a few tries trying to get this to work and had plenty of fumbles. Not because of the date comparisons, since the <code>Date()</code> object value is a number, but juggling what to show on which page.</p>\n<p>Eventually, I figured to just segregate the events as if they were paged each time you filter and/or paginate but I wasn't quite sure what that algorithm looked like. Here's what my thought process was.</p>\n<ul>\n<li>Get today's date, find the next event in the list and get it's <code>index</code>.</li>\n<li>Chunk the events (into pages) so that the <code>index</code> is the <em>first</em> in its chunk.</li>\n<li>Find the chunk that has the <code>index</code> and return that chunk.</li>\n<li>If paginating, return the chunk offset by the target chunk and given page.</li>\n</ul>\n<p>I was feeling a bit confused here too, so I tried giving some prompts to ChatGPT here too. However, it was not given me the right results and I knew why. It would find the next event and just <em>move</em> it to the first of some chunk. What I wanted was for the the first chunk to be adjusted so that the target event would wind up as the first. After seeing the general approach, I realized I just needed the handy <code>%</code> operator. Here's the final function:</p>\n<pre><code class=\"language-js\">chunk(arr = [], size, target) {\n    const chunks = [];\n    let currentChunk = [];\n    let chunkSize = arr.indexOf(target) % size || size;\n\n    if (arr.length &lt; chunkSize) {\n        return [arr];\n    }\n\n    for (const item of arr) {\n        currentChunk.push(item);\n\n        if (currentChunk.length === chunkSize) {\n            chunks.push(currentChunk);\n            currentChunk = [];\n            chunkSize = size;\n        }\n    }\n\n    if (!chunks.includes(currentChunk)) {\n        chunks.push(currentChunk);\n    }\n\n    return chunks;\n}\n</code></pre>\n<p>So if I had an array with the numbers 1 through 15, and wanted the size to be <code>5</code> but the target as <code>8</code>, the resulting array would look like this:</p>\n<pre><code class=\"language-js\">[[1, 2], [3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15]]\n</code></pre>\n<p>Notice how the <code>8</code> is at the first position in its chunk.</p>\n<h3>Web Components in Astro</h3>\n<p>I love web components and I've been using them for years. Astro supports web components but it's not well documented. I had a lot of learnings trying to use them in this project and here's some takeaways that will be helpful.</p>\n<ul>\n<li>You don't need to use the ShadowDOM, Astro will encapsulate styles within the framework.</li>\n<li>You can create a one-page <code>.astro</code> component as a web component, and import into other places across the project.</li>\n<li>Spread <code>Astro.props</code> on the component and <code>&lt;slot/&gt;</code> is your friend.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;my-component { ...Astro.props }&gt;\n    &lt;slot&gt;&lt;!-- default content can go here --&gt;&lt;/slot&gt;\n&lt;/my-component&gt;\n\n&lt;style&gt;\n/* Encapsulated styles are here, no ShadowDOM required */\n&lt;/style&gt;\n\n&lt;script&gt;\n    class MyComponent extends HTMLElement {\n        constructor() {\n            super();\n            /* Do whatever you need here */\n        }\n    }\n\n    customElements.define('my-component', MyComponent);\n&lt;/script&gt;\n</code></pre>\n<p>And then in another <code>.astro</code> file  (assuming you have a <code>@components</code> alias):</p>\n<pre><code class=\"language-html\">---\nimport MyComponent from '@components/MyComponent.astro';\n---\n\n&lt;MyComponent id=&quot;my-component&quot;&gt;\n    &lt;span&gt;Stuff for the slot&lt;/span&gt;\n&lt;/MyComponent&gt;\n</code></pre>\n<p>I did a mix of this kind of web component and ShadowDOM ones. You can identify the older components from the newer ones because of this.</p>\n<h3>Global events</h3>\n<p>I also needed the components to talk to each other. Normally I'd select them from the DOM to begin listening but. I got lazy and just sent most of the events over the <code>document</code>, so many of the components have a <code>customEvent</code> method that sends a <code>detail</code> key in the event with the data it has processed for another component to pick up and use for something. One of the longest chains in the system goes like this:</p>\n<ul>\n<li>On timezone change, get the full event list.</li>\n<li>On full event list request, filter the events.</li>\n<li>On filter complete, paginate the results.</li>\n<li>On pagination complete, render the results.</li>\n</ul>\n<p>It's possible that other events will trigger the flow. For example, you can trigger the filters without requiring a timezone request, which also sends a message to reset pagination (since filtering will re-adjust the results on pages).</p>\n<h3>Filtering</h3>\n<p>And speaking of filtering, this was a bit tricky as well. The direction I chose was that if a filter was checked, it should be shown. So if nothing is checked, then nothing is shown. Then we check all the filters by default so the visitor sees everything by default and they can remove as needed. The data behind it looks like it might work the same, but it doesn't. Specifically the &quot;Free and Premium&quot; filter which reads from a single data point <code>free</code>.</p>\n<ul>\n<li>If both are checked I need to show both <code>free: true</code> and <code>free: false</code> events.</li>\n<li>If one is unchecked, I need to hide what the checkbox represents.</li>\n<li>If both are unchecked, I need to hide both.</li>\n</ul>\n<p>Meanwhile, the &quot;In-person and Remote&quot; filter works much easier:</p>\n<ul>\n<li>If In-person is unchecked, hide in-person events.</li>\n<li>If Remote is unchecked, hide online events.</li>\n</ul>\n<p>We considered having filters for location but that would require an API key to some geolocation service which would have cost some more money. We hope to collect some locations in the coming months to use for filtering as a next step.</p>\n<h3>Release ready</h3>\n<p>A site needs all the finishing touches. Jen made the site's Open Graph and Twitter images. She also chose the colors for the site since I'm color deficient. Josh recommended an <code>.ics</code> file to be created for subscriptions, so people can just add our calendar to see the events as they are added. Josh also put together the list of events that were upcoming as they were announced so we could add to the site when we were ready. There's a lot more ideas that were at play but not enough time to implement. <a href=\"https://forms.gle/jLxTi7ENnqrY2a7C9\">We'll collect more feedback</a> and have time to revisit later this year.</p>\n<p>We're excited to finally show off this past month's worth of afterhours work to bring our community closer together. <a href=\"https://ds.events\">Visit the site</a> and subscribe to a feed. If you know of a design systems event coming, help our community by adding it.</p>\n",
            "url": "https://blog.damato.design/posts/ds-events-backstage",
            "title": "DS Events, Backstage",
            "summary": "Behind the scenes in the making of ds.events",
            "image": "https://blog.damato.design/og-images/ds-events-backstage",
            "date_modified": "2023-09-19T00:00:00.000Z"
        },
        {
            "id": "dynamic-collections",
            "content_html": "<p>When I first heard of <a href=\"https://astro.build/\">Astro</a> it sounded incredible. I thought of it as the next step after working with <a href=\"https://www.11ty.dev/\">11ty</a>. That step is requiring framework support such as <a href=\"https://docs.astro.build/en/guides/integrations-guide/#official-integrations\">React, Vue, or others</a>. While I often avoid frameworks, a framework allows for a shared understanding with a team to achieve a result within the guardrails, <a href=\"https://twitter.com/CherryJimbo/status/1643778121944952833\">even if convoluted</a>.</p>\n<p>So for documentation sites that expect to host components written in a framework, Astro seems like a solid choice. However, my initial review of the project had some serious critism when finally attempting to build a site.</p>\n<h2>Low maintenance</h2>\n<p>One of the most important qualities of a documentation site is for it to be low maintenance. This can result in lots of different kinds of optimizations but one of the first I think about is how easy it is to create a new page and have it immediately appear in a navigational interface. It's a non-starter if I need to configure simple navigation by letting the project know that I made a new page and where that new page is in the project. We can do better, but at the time Astro just couldn't do this without accessing some internal methods and even then it didn't seem possible without rebuilding the entire site. The ergonomics weren't great and I decided to pause on the project.</p>\n<h2>Content collections</h2>\n<p>Astro has come a long way since my complaints. Earlier this year with the release of their v2.0, they have introduced <a href=\"https://astro.build/blog/introducing-content-collections/\">Content Collections</a>. Much of their post is talking about it being typesafe which is good but what I was more excited about was the ability to fetch content and manipulate it to render navigation.</p>\n<p><a href=\"https://docs.astro.build/en/guides/content-collections/\">The documentation suggests a few ways to configure a collection</a> but all of them assume you are manually curating the collection. I'd like to avoid this so you don't need to provide much instruction past &quot;put files here&quot;.</p>\n<p>Assume the following project <code>/src</code> file structure, reduced for brevity. We'll be discussing each top-level directory and its setup to get this to work.</p>\n<pre><code class=\"language-bash\">├── components\n│   └── MainNavigation\n│       └── index.jsx\n├── content\n│   ├── components\n│   │   ├── button.mdx\n│   │   └── ...\n│   ├── foundations\n│   │   ├── color.mdx\n│   │   └── ...\n│   ├── ...\n│   └── config.js\n├── layouts\n│   └── Page.astro\n├── pages\n│   ├── [collection]\n│   │   └── [...slug].astro\n│   └── index.astro\n├── utils\n│   └── getAllCollections.js\n└── ...\n</code></pre>\n<h3>Content</h3>\n<p>The following is an example of how to <a href=\"https://docs.astro.build/en/guides/content-collections/#defining-a-collection-schema\">define a collection from the Astro docs</a>. The most important part here is the <code>config.js</code> file shown below.</p>\n<pre><code class=\"language-js\">// 1. Import utilities from `astro:content`\nimport { z, defineCollection } from 'astro:content';\n// 2. Define your collection(s)\nconst blogCollection = defineCollection({\n  schema: z.object({\n    title: z.string(),\n  }),\n});\n// 3. Export a single `collections` object to register your collection(s)\n//    This key should match your collection directory name in &quot;src/content&quot;\nexport const collections = {\n  'blog': blogCollection,\n};\n</code></pre>\n<p>Note the last comment. The key needs to match your collection directory name. This means that when you add a new directory, this file needs to know and have definitions added. I want to avoid that, so here's my version:</p>\n<pre><code class=\"language-js\">import path from 'path';\nimport { z, defineCollection } from 'astro:content';\nconst glob = import.meta.glob('./**'); /* vite */\n\nexport const collectionNames = Object.keys(glob).map((filepath) =&gt; path.basename(path.dirname(filepath)));\n\nconst schema = {\n  schema: z.object({\n    title: z.string()\n  })\n};\n\nfunction assignCollection(acc, name) {\n  return Object.assign(acc, { [name]: defineCollection({ ...schema }) });\n} \n\nexport const collections = collectionNames.reduce(assignCollection, {});\n</code></pre>\n<p>The first new part is using <a href=\"https://vitejs.dev/guide/features.html#glob-import\">the <code>glob</code> function from Vite</a> to get all files relative to this config file. We could be more specific here to look only for <code>.md{x,} </code> but this works fine as-is.</p>\n<p>After using the <code>glob</code> function to get the files, we parse the filepaths to get the directory that each one is in. This assumes that each section (eg., <code>/blog</code>) is only one level deep. This will return an array of directory names that we'll use later. For us, this return <code>['components', 'foundations']</code>.</p>\n<p>Finally, the <code>collectionNames</code> array is reduced using the <code>assignCollection</code> function. This creates a new collection definition with each section in the same way we would have done it manually in the original example. During the build step, Astro will create types based on the schema.</p>\n<p>Before moving on, make sure you have some content in the markdown files (including the <code>title</code> frontmatter) to test out.</p>\n<h3>Pages</h3>\n<p>Next we'll dynamically render our pages. We've set up a <a href=\"https://docs.astro.build/en/core-concepts/routing/#dynamic-routes\">dynamic route</a> at <code>[collection][...slug].astro</code>. As you might have guessed, the <code>collection</code> part is the directory name found within <code>/content</code> from earlier. For our file structure, this'll eventually write <code>components</code> and <code>foundations</code> into the url. The slug is created from the file names in each of these directories (<code>button</code> and <code>color</code>). Here's how we get that to work using frontmatter in the <code>[...slug].astro</code> file which is mostly copied from <a href=\"https://docs.astro.build/en/guides/content-collections/#building-for-static-output-default\">the official documentation</a>.</p>\n<pre><code class=\"language-js\">import Page from '@layouts/Page.astro';\nimport getAllCollections from '@utils/getAllCollections.js';\n\nexport async function getStaticPaths() {\n  const content = await getAllCollections();\n  return content.map((entry) =&gt; {\n    params: { slug: entry.slug, collection: entry.collection }\n    props: { entry }\n  });\n}\n\nconst { entry } = Astro.props;\nconst { Content } = await entry.render();\n</code></pre>\n<p>A few things to note. The <code>@layouts</code> alias points to the <code>/layouts</code> directory where I have a single <code>Page.astro</code> as the base layout. The <code>@utils</code> alias points to reusable functions. <a href=\"https://docs.astro.build/en/guides/aliases/\">These aliases can be setup</a> in the <code>tsconfig.json</code> file at the root of the project. The <code>getAllCollections</code> function we will need to use twice. Once here to make the paths to content, and a second time to build navigation. I imagine there's a way for this to run once, but this was easiest for me while I explored this solution.</p>\n<p>This is what the <code>getAllCollections</code> function looks like:</p>\n<pre><code class=\"language-js\">import { getCollection } from 'astro:content';\nimport { collectionNames } from '@content/config';\n\nexport default async function getAllCollections() {\n  const collections = await Promise.all(\n    collectionNames.map((name) =&gt; getCollection(name));\n  );\n  return collections.flat();\n}\n</code></pre>\n<p>The <code>getCollection</code> function from Astro will get the data for a single given collection. We have created a list of collections back at the <code>content/config.js</code> file as an export called <code>collectionNames</code>. So we loop over that to get all of the content and write the section it came from within the metadata. After resolving all the promises, we flatten the result because this is a single-level navigational structure. If you need nesting, you might not want to flatten the results here and have your own tree returned.</p>\n<p>At this point we should be rendering pages dynamically. However, we'd also like to automatically generate a navigational interface from this too.</p>\n<h3>Layouts</h3>\n<p>In the <code>Page.astro</code> file, we'll need to manipulate the result of the <code>getAllCollections</code> function to create a tree for navigation.</p>\n<pre><code class=\"language-js\">import path from 'path';\nimport getAllCollections from '@utils/getAllCollections.js';\n\nfunction buildNavigation(collections) {\n  return collections.reduce((acc, entry) =&gt; {\n    // collection is the collectionName string\n    const { collection } = entry;\n    if (!acc[collection]) acc[collection] = {};\n    const { slug, data } = collection;\n    acc[collection][data.title] = path.join(import.meta.env.BASE_URL, collection, slug);\n  }, {})\n}\n\nconst collections = await getAllCollections();\nconst tree = buildNavigation(collections);\n</code></pre>\n<p>As we loop over the items in the collection, we get the <code>title</code> and build the <code>url</code>.</p>\n<p>{% aside %}\nIf you want your navigation to have a specific order, you'd need to either include additional metadata in the <code>/content</code> markdown files for this function to sort by and/or provide an order to the <code>collectionNames</code> within the <code>content/config.js</code>.\n{% endaside %}</p>\n<h3>Components</h3>\n<p>Finally we create a navigation component to consume the <code>tree</code>. This could be done in any framework, even as an Astro component since it can be a list of links. I've chosen to use React to have several subcomponents in the same file.</p>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nfunction Section({ section, entries }) {\n  const navigation = Object.entries(entries);\n  if (!navigation.length) return null;\n\n  return (\n    &lt;li&gt;\n      &lt;span&gt;{section}&lt;/span&gt;\n      &lt;ul&gt;\n        { navigation.map(([title, url]) =&gt; \n          &lt;Item name={ title } url={ url } key={ name }/&gt;\n        )}\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  );\n}\n\nfunction Item({ title, url }) {\n  return (\n    &lt;li&gt;\n      &lt;a href={ url }&gt;{ title }&lt;/a&gt;\n    &lt;/li&gt;\n  );\n}\n\nexport default function MainNavigation({ tree }) {\n  const navigation = Object.entries(tree);\n  if (!navigation.length) return null;\n\n  return (\n    &lt;nav&gt;\n      &lt;ul&gt;\n        { navigation.map(([section, entries]) =&gt; \n          &lt;Section section={ section } entries={ entries } key={ section }/&gt;\n        )}\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  )\n}\n</code></pre>\n<p>There's nothing special to see here. The incoming <code>tree</code> prop is the object that represents the navigation for the content made in the <code>buildNavigation</code> function from earlier. The component will traverse the tree and render out the links.</p>\n<p>Finally, back in the <code>Page.astro</code> file, import the <code>&lt;MainNavigation/&gt;</code> and render it in the body passing in the <code>tree</code>.</p>\n<pre><code class=\"language-jsx\">&lt;MainNavigation tree={ tree }&gt;\n</code></pre>\n<p>And that's it! Now as markdown pages are created in the <code>/content</code> directory, they are automatically added to the navigation.</p>\n",
            "url": "https://blog.damato.design/posts/dynamic-collections",
            "title": "Dynamic Astro Collections",
            "summary": "Using framework magic in the pursuit of laziness.",
            "image": "https://blog.damato.design/og-images/dynamic-collections",
            "date_modified": "2023-04-10T00:00:00.000Z"
        },
        {
            "id": "dynamic-storybook",
            "content_html": "<p>When I was exploring the next version of the design system for <a href=\"https://www.compass.com/\">Compass</a>, I was really interested in how I could keep designers from recreating symbols that we already have represented in code. They'd have to painstakingly make all of the possible states and interactions for every component for the design library. I knew there was a better way so I cobbled a few systems together in order to do it.</p>\n<h2>Legacy system</h2>\n<p>I was an early adopter of <a href=\"https://storybook.js.org/\">Storybook</a> and leveraged it to visualize the components I was building for the new design system. Writing a story was helpful to create one ideal state, or perhaps wiring it into the knobs addon allows for different configurations to happen with a few button clicks. However, what I really wanted was to generate stories based on the configuration options for each component. I was working on a very early prototype with web components so I didn't have proptypes to hook into. I opted to create an <code>component.props.js</code> file for each component to help generate configurations.</p>\n<p>From here, I used a package called <a href=\"https://www.npmjs.com/package/combos\"><code>combos</code></a> to create all the possible permutations of options and then create a new Storybook file to read with those new generated components. This was also used to create the files required for <a href=\"https://www.npmjs.com/package/@brainly/html-sketchapp\"><code>html-sketchapp</code></a>, which could render the HTML into <a href=\"https://www.sketch.com/\">Sketch</a> symbols.</p>\n<h2>Component Story Format</h2>\n<p>Storybook is no longer focusing on their initial implementation of writing stories, <a href=\"https://github.com/storybookjs/storybook/blob/next/lib/core/docs/storiesOf.md\">the <code>storiesOf()</code> function</a>, in favor of the <a href=\"https://github.com/ComponentDriven/csf\">Component Story Format (CSF)</a>. The CSF is described as an open standard for UI component examples based on JavaScript ES6 modules. And the way to write a story seems fairly simple:</p>\n<pre><code class=\"language-jsx\">export default { title: 'atoms/Button' };\nexport const text = () =&gt; &lt;Button&gt;Hello&lt;/Button&gt;;\nexport const emoji = () =&gt; &lt;Button&gt;😀😎👍💯&lt;/Button&gt;;\n</code></pre>\n<p>The default export is the metadata about your story; the title, the component, and maybe some additional configuration options. Each named export is a story. So in the above example, you'd have two stories. One named &quot;Text&quot; and one named &quot;Emoji&quot;. And coming soon, <a href=\"https://storybook.js.org/blog/component-story-format-3-0/\">CSF v3</a> will introduce an even smaller amount of code to create a story:</p>\n<pre><code class=\"language-jsx\">export default { component: Button };\nexport const text = { args: { children: 'Hello' } };\nexport const emoji = { args: { children: '😀😎👍💯' } };\n</code></pre>\n<p>However, if you know anything about the JavaScript module ecosystem you'll see the problem with my goal. <strong>There's no way to generate stories using CSF</strong>. In fact, Storybook doesn't even treat this file as a <em>real</em> module at first. Storybook will actually read this file, create an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax tree (AST)</a> and then begin parsing the file for information <a href=\"https://github.com/storybookjs/storybook/blob/next/lib/csf-tools/src/CsfFile.ts\">[source]</a>.</p>\n<p>Let's compare this to the original <code>storiesOf()</code> method of writing stories.</p>\n<pre><code class=\"language-jsx\">storiesOf('atoms/Button', module)\n  .add('text', () =&gt; &lt;Button&gt;Hello&lt;/Button&gt;)\n  .add('emoji', () =&gt; &lt;Button&gt;😀😎👍💯&lt;/Button&gt;)\n</code></pre>\n<p>You can see that the original method of writing stories is more flexible and allows for someone to create a collection of stories and begin iterating to add to Storybook. Here's a cute one-liner to define a collection of stories.</p>\n<pre><code class=\"language-jsx\">const stories = {\n  text: () =&gt; &lt;Button&gt;Hello&lt;/Button&gt;,\n  emoji: () =&gt; &lt;Button&gt;😀😎👍💯&lt;/Button&gt;,\n};\nObject.entries(stories).reduce((acc, ([name, fn])) =&gt; acc.add(name, fn), storiesOf('Button', module));\n</code></pre>\n<p>Interestingly, it seems that <a href=\"https://medium.com/@domyen/storiesof-is-not-deprecated-598c322588c\">CSF compiled to <code>storiesOf()</code></a> for Storybook but I'm not sure if that's still the case.</p>\n<h2>If it ain't broke</h2>\n<p>While Storybook no longer recommends the <code>storiesOf()</code> approach because it <a href=\"https://storybook.js.org/blog/storybook-on-demand-architecture/\">conflicts with improvement plans</a>; we can still use it today. Here's how I'd begin to integrate with a React ecosystem; reading <a href=\"https://www.npmjs.com/package/prop-types\"><code>PropTypes</code></a> to generate stories.</p>\n<p>First, we need a way to read proptypes from a component. Luckily, there's a package for that: <a href=\"https://www.npmjs.com/package/parse-prop-types\"><code>parse-prop-types</code></a>. Here's how we might begin to use this:</p>\n<pre><code class=\"language-js\">import parsePropTypes from 'parse-prop-types';\n\nexport default function (component) {\n  const proptypes = parsePropTypes(component);\n}\n</code></pre>\n<p>{% aside %}</p>\n<p>If you get a collection of types that all return as <code>'custom'</code>, you'll need to include the following before defining proptypes for each component.</p>\n<pre><code class=\"language-js\">import 'parse-prop-types';\n</code></pre>\n<p>For more information, like the return object structure, I recommend reading <a href=\"https://github.com/diegohaz/parse-prop-types/blob/master/README.md\">the project's <code>README.md</code></a>.</p>\n<p>{% endaside %}</p>\n<p>Next, we'll need to prepare a collection of properties and possible values. For <code>type: 'bool'</code> and <code>type: 'oneOf'</code>, the values are fairly straight forward. We'll put these in a lookup object for easy access.</p>\n<pre><code class=\"language-js\">const DEFAULT_TYPE_ASSIGN = {\n  'bool': () =&gt; [false, true],\n  'oneOf': ({ meta }) =&gt; meta.type.value,\n}\n</code></pre>\n<p>For the inputs like <code>number</code> or <code>string</code>, we'll need to allow custom fixtures to be included. We'll prepare an <code>options</code> argument for our function to supply this.</p>\n<pre><code class=\"language-js\">export default function (component, options) {\n  const { fixtures } = options;\n  const proptypes = parsePropTypes(component);\n}\n</code></pre>\n<p>The <code>fixtures</code> option will be an object that has each prop as a key and an array of possible values. Now we can send that into our assignments; choosing the correct fixture prior to running the function. We'll see how this works later.</p>\n<pre><code class=\"language-js\">const DEFAULT_TYPE_ASSIGN = {\n  'bool': () =&gt; [false, true],\n  'oneOf': ({ meta }) =&gt; meta.type.value,\n  'string': ({ fixture }) =&gt; fixture,\n  'number': ({ fixture }) =&gt; fixture,\n}\n</code></pre>\n<p>You can continue to add more as needed. I specifically omit the <code>func</code> type since it's not a visual change but you can include it if it'll help your project.</p>\n<p>Ok, we're ready to loop through all of the proptypes.</p>\n<pre><code class=\"language-js\">\nconst DEFAULT_TYPE_ASSIGN = {\n  'bool': (acc, { property } ) =&gt; Object.assign(acc, { [property]: [false, true] }),\n  'string': (acc, { property, fixture }) =&gt; Object.assign(acc, { [property]: fixture }),\n  'number': (acc, { property, fixture }) =&gt; Object.assign(acc, { [property]: fixture }),\n  'oneOf': (acc, { property, meta } ) =&gt; Object.assign(acc, { [property]: meta.type.value }),\n}\n\nconst isFn = (fn) =&gt; typeof fn === 'function';\n\nconst values = Object.entries(propTypes).reduce((acc, [property, meta]) =&gt; {\n  const fn = DEFAULT_TYPE_ASSIGN[meta.type.name];\n  return isFn(fn) ? fn(acc, { meta, property, fixture: fixtures[property] }) : acc;\n}, {});\n</code></pre>\n<p>Notice, I've updated the functions in the lookup to have an accumulator as the first parameter; each will return the accumulator with the values for each property if it exists. Otherwise, it will return the unaltered accumulator.</p>\n<p>Ok, now we're ready to create permutations. I'm using a more recent package for this: <a href=\"https://www.npmjs.com/package/combinate\"><code>combinate</code></a>. Let's start putting everything together.</p>\n<pre><code class=\"language-js\">import parsePropTypes from 'parse-prop-types';\nimport combinate from 'combinate';\n\nconst DEFAULT_TYPE_ASSIGN = {\n  'bool': (acc, { property } ) =&gt; Object.assign(acc, { [property]: [false, true] }),\n  'string': (acc, { property, fixture }) =&gt; Object.assign(acc, { [property]: fixture }),\n  'number': (acc, { property, fixture }) =&gt; Object.assign(acc, { [property]: fixture }),\n  'oneOf': (acc, { property, meta } ) =&gt; Object.assign(acc, { [property]: meta.type.value }),\n}\n\nconst isFn = (fn) =&gt; typeof fn === 'function';\n\nexport default function (component, options) {\n  const { fixtures } = options || {};\n  const propTypes = parsePropTypes(component);\n  const values = Object.entries(propTypes).reduce((acc, [property, meta]) =&gt; {\n    const fn = DEFAULT_TYPE_ASSIGN[meta.type.name];\n    return isFn(fn) ? fn(acc, { meta, property, fixture: fixtures[property] }) : acc;\n  }, {});\n\n  const storyArgs = combinate(values);\n}\n</code></pre>\n<p>The new <code>storyArgs</code> variable holds an array of objects, but we're not quite done yet. We need to have one large collection with the structure of <code>{ name: { ...args } }</code>, where the <code>name</code> is a unique identifier for each story. I opted for a simple <a href=\"https://www.npmjs.com/package/@sindresorhus/slugify\"><code>slugify</code></a> of the <code>JSON</code> to create the identifier.</p>\n<pre><code class=\"language-js\">import slugify from '@sindresorhus/slugify';\n\nconst storyArgs = combinate(values).reduce((acc, combo) =&gt; {\n  const str = JSON.stringify(combo);\n  return Object.assign(acc, { [slugify(str)]: combo });\n}, {});\n</code></pre>\n<p>At this point you can just return the resulting <code>storyArgs</code> and pipe them into the <code>storiesOf()</code> method approach that I suggested above:</p>\n<pre><code class=\"language-jsx\">import React from 'react';\nimport { default as Button } from './Button';\nimport { storiesOf } from '@storybook/react';\nimport everythingAllAtOnce from '../src'; // Your custom generator function\n\nconst fixtures = { text: ['hello', '😀😎👍💯'] };\nconst stories = everythingAllAtOnce(Button, { fixtures })\nObject.entries(stories).reduce((acc, ([name, args])) =&gt; acc.add(name, () =&gt; &lt;Button { ...args }/&gt;), storiesOf('Button', module));\n</code></pre>\n<p>Or, if you're really fancy, you could provide more options to just have the function run the <code>storiesOf()</code> method internally.</p>\n<pre><code class=\"language-js\">everythingAllAtOnce(Button, {\n  fixtures,\n  storiesOf, // Used internally to begin defining the stories produced\n  callback: (args) =&gt; &lt;Button { ...args }/&gt;, // How each story should render with the given args\n});\n</code></pre>\n<p>Not showing the code to implement here, you can use your imagination.</p>\n<h2>Cool, what should we do with this?</h2>\n<p>For starters, this would a good way to begin generating assets for your component library. The <a href=\"https://story.to.design/\">story.to.design</a> tool by <a href=\"https://divriots.com/\">‹div›RIOTS</a> can transform stories into <a href=\"https://www.figma.com/\">Figma</a> components. This'll help keep the Figma library up to date with the code because it's pulling from the code. Imagine, writing minimal code to generate all of these assets!</p>\n<p>It's also a good way to determine configurations that you may not have expected. Perhaps you notice with review of the permutations, icons in inline buttons don't work well, so you might want to set a conditional in the component to either warn or omit the icons.</p>\n<p>Speaking of checking configurations, this would be great for testing. You could ensure a check in every configuration for some baseline metrics and even assert that all configurations that use the same props will render in the same expected way. This is truly a full coverage scenario without writing much code.</p>\n<h2>Full circle</h2>\n<p>This brings me back to the introduction of the CSF format; which doesn't support this type of behavior at all. There's <a href=\"https://www.notion.so/Storybook-Combos-a5abecd87e9c4e0b86277244af093aea\">a document</a> outlining the possibility of &quot;Storybook Combos&quot;, which is only a proposal with no affirmitive direction yet.</p>\n<p>I hope that whatever the future holds for Storybook that the team sees the benefits of <code>storiesOf()</code> and attempts to support the ability for dynamic stories in the future. I'm sure the design system community has more use-cases for dynamic stories that are past just the needs outlined above.</p>\n",
            "url": "https://blog.damato.design/posts/dynamic-storybook",
            "title": "Dynamic Storybook",
            "summary": "A Storybook approach to visualize all my components' configurations and why its not recommended in Storybook today.",
            "image": "https://blog.damato.design/og-images/dynamic-storybook",
            "date_modified": "2022-06-14T00:00:00.000Z"
        },
        {
            "id": "feeding-trolls",
            "content_html": "<p>I published <a href=\"https://gridless.design\">gridless.design</a> a year ago this month and the initial response was overwhelming. Many people across the design industry shared and discussed these ideas for the coming weeks and I really enjoyed seeing all of the positive affirmations and interest in how we might avoid grids in artboards to hand off responsive web designs.</p>\n<p>However, there were others that didn't understand the point I was trying to make. This is my opportunity to address these comments and help clarify where the mark was missed.</p>\n<h2>Reddit</h2>\n<p>{% quote, &quot;https://www.reddit.com/r/Frontend/comments/oq1ogb/comment/h690qdi/?utm_source=share&amp;utm_medium=web2x&amp;context=3&quot;, &quot;del_rio&quot; %}</p>\n<p>It reads like a long-form rant complete with broken grammar.</p>\n<p>{% endquote %}</p>\n<p>Rant is probably true. The fact that we've been attempting to design the web like a canvas instead of a document is a complaint about the norms that we've accepted. It's important to state the problem before providing a solution.</p>\n<p>As for the broken grammar, I think that's a bit unfair. I'm a native English speaker but my grammar shouldn't be criticized for the idea I'm trying to convey.</p>\n<p>{% quote, &quot;https://www.reddit.com/r/Frontend/comments/oq1ogb/comment/h690qdi/?utm_source=share&amp;utm_medium=web2x&amp;context=3&quot;, &quot;del_rio&quot; %}</p>\n<p>Not a single argument was supported with a citation even though they're presented as &quot;it is recommended&quot;</p>\n<p>{% endquote %}</p>\n<p>While must of the historical part of the thesis goes uncited and could be improved, it's not as important as the gridless approach which is net-new. How do you cite new ideas? The gridless approach is novel and never before documented. The closest concept is responsive design but it is not the same since the target for the change is artboard exploration specifically; not the web. The recommendations are based on the observations which are documented here in this thesis.</p>\n<p>{% quote, &quot;https://www.reddit.com/r/Frontend/comments/oq1ogb/comment/h6d1r1s/?utm_source=share&amp;utm_medium=web2x&amp;context=3&quot;, &quot;teokk&quot; %}</p>\n<p>It also has a ridiculously long introduction that explains the basics and superficial history of web design/development which seems utterly pointless considering the target audience.</p>\n<p>{% endquote %}</p>\n<p>The point of the history is to provide a primer to all the concepts that caused the grid to be included in the web design process and what the web aimed to support.</p>\n<h2>Hacker News</h2>\n<p>These were responses to a <a href=\"https://css-irl.info/is-it-time-to-ditch-the-design-grid/\">blog post</a> by <a href=\"https://michellebarker.co.uk/\">Michelle Barker</a> about my writing entitled &quot;Is it time to ditch the design grid?&quot;.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28120029&quot;, &quot;qkqk&quot; %}</p>\n<p>No, of course, not, grid is a fundamental structure in graphic design.</p>\n<p>{% endquote %}</p>\n<p>That's the thing, we aren't talking about &quot;graphic&quot; design, we're talking about &quot;web&quot; design. Graphic design principles <em>can</em> translate to the web but sometimes not directly. This is one of those cases. The traditional artboard is not an accurate representation of the web. Identifying this is the first step to considering new approaches to support what the web expects.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28120029&quot;, &quot;qkqk&quot; %}</p>\n<p>no, no, no. Remember &quot;top: 50%; transform: translateY(-50%);&quot; to vertically center things before Flexbox and Grid? We're not going back to those days!</p>\n<p>{% endquote %}</p>\n<p>The commenter is reacting to the <a href=\"https://www.freecodecamp.org/news/the-fab-four-technique-to-create-responsive-emails-without-media-queries-baf11fdfa848/\">Fab Four</a> approach. The negative dimension that I am quoted on writing is the foundational part of the calculation that allows for a container-query-like layout conditional in that approach. The approach is very complicated looking at first glance and admittedly it isn't helpful with all the additional variables that I included in order for the <code>gap</code> property to be supported but the end result of allowing the contents to determine when they should change the layout instead of the page is clearly helpful as precedented by native container queries coming to browsers very soon.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28120029&quot;, &quot;qkqk&quot; %}</p>\n<p>Renaming the column-gap property to --gap-spacing doesn't mean you're &quot;not using a grid.&quot;</p>\n<p>{% endquote %}</p>\n<p>This person might have missed the intro of gridless.design but I call out that I am not talking about <code>display: grid;</code> as an tool to avoid. You can use things that are named &quot;grid&quot; in the process but I'm specifically interested in how we can avoid including the design grid in the hand off process to engineers and even further not using it at all when designing for the web. It has very little to do with the CSS property of the same name.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28119631&quot;, &quot;Rd6n6&quot; %}</p>\n<p>As somebody who just began using grids in their designs, I can say that grids can have a really nice effect on a lot of layouts.</p>\n<p>{% endquote %}</p>\n<p>It's true! Grids make layouts easy and its very much the reason why they work so well for graphic design. However, the final publishing of a graphic design will always have the same layout of elements, the same copy, the same orientation, etc.. On the web, this simply is not the case. What your originally provided in your design will very often not be the same as what your end-user sees. I call out the affects of translation alone and how words will often break out of neatly designed containers. Forcing your content into pink cages will ultimately break usability in designs in the most extreme cases.</p>\n<p>I think learning about the design grid for people introduced to design is helpful as a elementary concept but for more scalable experiences, the grid will do more harm than good.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28119293&quot;, &quot;djstein&quot; %}</p>\n<p>Visually, the &quot;no&quot; grid website just looked like a website created with CSS Grid. I was expecting some sort of design that would be different. Are we missing something?</p>\n<p>{% endquote %}</p>\n<p>Yes, you're missing the content of the site! The site itself was not designed using a design grid but instead designed within the rules of the web. You might be able to provide some 12 column overlay that could roughly should some alignment on the web pages but it would be a coincidence.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28119381&quot;, &quot;oo0shiny&quot; %}</p>\n<p>I think the idea is not that the design is without a grid, but more on how it handles being resized</p>\n<p>{% endquote %}</p>\n<p>No, the design of the site is truly completed without a design grid. However, while the design of the site was done without a design grid, the content is more important here.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28119556&quot;, &quot;michaelscott&quot; %}</p>\n<p>The principles of a grid-based design are still adhered to though. This isn't &quot;gridless&quot; in any real sense</p>\n<p>{% endquote %}</p>\n<p>The principles you might be referring to are <a href=\"https://www.smashingmagazine.com/2014/03/design-principles-visual-perception-and-the-principles-of-gestalt/\">Gestalt principles</a> which I call out as foundational to the gridless concepts. The design grid helps designers adhere to those principles but those principles do not <em>come from</em> the grid.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28121459&quot;, &quot;itronitron&quot; %}</p>\n<p>I was surprised by how many right angles, rectangles, and perpendicular lines I saw for a site focused on not using a grid.</p>\n<p>{% endquote %}</p>\n<p>Cute. Alignment found in a web page does not need to be the result of a design grid. It will be a result of applying Gestalt principles with the rules of authoring web documents.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28120128&quot;, &quot;spcebar&quot; %}</p>\n<p>This seems like more of a commentary on responsive design than on grid based layouts. There's a big difference between designing for print/for the web, and a really good designer will be able to give you a grid layout that performs well between breakpoints.</p>\n<p>{% endquote %}</p>\n<p>I was on board with this until the last phrase. I believe a informed designer will give you guidance about what should occur when the ideal layout isn't possible on a user's device. Not necessarily as a designed comp, but as a conversation. Prescribing what happens at a breakpoint is a lazy solution, in my opinion. Considering how elements might shift in different viewports, orientations, translations, writing-modes, etc. is not scalable as artboards. Having conversations will make more inclusive designs.</p>\n<p>{% quote, &quot;https://news.ycombinator.com/item?id=28121827&quot;, &quot;munk-a&quot; %}</p>\n<p>I, personally, prescribe to the 1px grid system - where I write all my widths, heights and offsets in multiples of 1px. It helps keep things consistent.</p>\n<p>{% endquote %}</p>\n<p>Thanks, I hate it.</p>\n",
            "url": "https://blog.damato.design/posts/feeding-trolls",
            "title": "Feeding trolls",
            "summary": "They say that you aren't successful until people begin to criticize your work.",
            "image": "https://blog.damato.design/og-images/feeding-trolls",
            "date_modified": "2022-06-28T00:00:00.000Z"
        },
        {
            "id": "fetching-definitions",
            "content_html": "<p>I love web components. Being able to just plop a custom element onto a page with all the functionality baked in without needing a framework or bundling to make it work is just liberating. I know there's a lot of overhead that comes with it that libraries and frameworks aim to abstract but I just enjoy having the low-level ability to do whatever you want.</p>\n<p>The trickiest part of web components for me has been how to identify when a web components, which is written as HTML, needs to be defined through JavaScript. From a performance point-of-view, we don't want to send JavaScript to the page for components that aren't there. On the flip side, we don't want to miss components that apppear later in the lifecycle of the page.</p>\n<p>The technique I'm about to explain is something I was working on at <a href=\"https://compass.com\">Compass</a> but was never completed. Since then I've also enhanced the approach to be a bit easier to setup.</p>\n<h2>Registrar</h2>\n<p>The core of the approach uses an immediately invoked function expression (IIFE) which does a few things:</p>\n<ul>\n<li>Listens for new custom elements appearing on the page.</li>\n<li>Fetches definitions for elements that are not defined.</li>\n<li>Listens within new shadow roots for additional elements.</li>\n</ul>\n<p>Let's describe how it does each of these.</p>\n<h3>Listening for new custom elements</h3>\n<p>The <a href=\"https://davidwalsh.name/detect-node-insertion\">technique for detecting when an element appears in the DOM</a> is not new. It was first discovered by <a href=\"http://www.backalleycoder.com/\">Daniel Buchner</a> as early as 2012. This was the basis behind identifying when a custom element appears on the page with a few changes.</p>\n<p>First, I use <code>visibility</code> as the trigger for the animation. The reason for this is because it is not commonly used for animations like <code>opacity</code> would be. This avoids possible conflicts where these elements would be animated more traditionally. So the declaration block that triggers the animation would begin to look like this:</p>\n<pre><code class=\"language-css\">... {\n  animation: undefined-detection .1ms;\n}\n\n@keyframes undefined-detection {\n  to { visibility: visible; }\n}\n</code></pre>\n<p>The missing piece is the selector to target these custom elements. In my original implementation, I would generate the list of elements to find here however, there is a better way. Because what we are looking for is custom elements that are undefined, there's a CSS selector that can target all of these.</p>\n<pre><code class=\"language-css\">:not(:defined) {\n  animation: undefined-detection .1ms;\n}\n\n@keyframes undefined-detection {\n  to { visibility: visible; }\n}\n</code></pre>\n<p>Yep, that's it. Now the <code>undefined-detection</code> animation will trigger for all custom elements that are not yet defined.</p>\n<p>{% aside %}</p>\n<h3>Greedy registration</h3>\n<p>I've noticed that custom elements that are on the page from extensions or other libraries will also attempt to be requested and ultimately fail since they aren't part of the library. This would be a benefit for having an explicit list of elements to listen for but the failures can be caught and ignored in this implementation or you could filter by prefix (i.e.; <code>ds-button</code> but not <code>random-button</code>).</p>\n<p>{% endaside %}</p>\n<p>So we will write this CSS to the <code>&lt;head/&gt;</code> of the page within the registrar and begin listening for the animation.</p>\n<pre><code class=\"language-js\">const ANIMATION_NAME = 'undefined-detection';\nconst CSS = `\n  :not(:defined) { animation: ${ANIMATION_NAME} } \n  @keyframes ${ANIMATION_NAME} { to { visibility: visible } }\n`;\n\n(function registrar() {\n  function observe(root) {\n    if (!root) return;\n    root.addEventListener('animationstart', onAnimationStart);\n    const styles = Object.assign(document.createElement('style'), {\n      type: 'text/css',\n      textContent: CSS,\n    });\n    document.head.insertBefore(styles, document.head.lastChild);\n  }\n\n  function onAnimationStart({ animationName, target }) {\n    if (animationName !== ANIMATION_NAME) return;\n    // tagName is the custom element name\n    const tagName = target.tagName.toLowerCase();\n    // target is the element identified\n  }\n\n  observe(document.documentElement);\n})()\n</code></pre>\n<h2>Fetching the definition</h2>\n<p>This requires a bit of infrastructure. In my custom element library, each component is bundled into its own IIFE, available at <code>components/[COMPONENT_NAME].iife.js</code> in relation to the registrar. We can then determine the location of the components when the registrar is invoked with the following script.</p>\n<pre><code class=\"language-js\">const SOURCE_DIR = new URL(document.currentScript.src).href.replace(/[^/]*$/, '');\n</code></pre>\n<p>The code above determines the url where the current script is located and then removes the <code>registrar.iife.js</code> file name. I haven't found a cleaner way to do this without the ugly regex and without requiring to know the file name here. I wish browsers had the <a href=\"https://nodejs.org/api/path.html\"><code>path</code> module from Node</a>.</p>\n<p>Then we can determine the location of the components by building a url with this variable.</p>\n<pre><code class=\"language-js\">const src = new URL(`components/${tagName}.iife.js`, SOURCE_DIR);\n</code></pre>\n<p>From there, it's easy to load the definition at this location. Here's what the registrar looks like with this included.</p>\n<pre><code class=\"language-js\">const ANIMATION_NAME = 'undefined-detection';\nconst CSS = `\n  :not(:defined) { animation: ${ANIMATION_NAME} } \n  @keyframes ${ANIMATION_NAME} { to { visibility: visible } }\n`;\nconst SOURCE_DIR = new URL(document.currentScript.src).href.replace(/[^/]*$/, '');\n\n(function registrar() {\n  const elements = new Set();\n\n  function observe(root) {\n    if (!root) return;\n    root.addEventListener('animationstart', onAnimationStart);\n    const styles = Object.assign(document.createElement('style'), {\n      type: 'text/css',\n      textContent: CSS,\n    });\n    document.head.insertBefore(styles, document.head.lastChild);\n  }\n\n  function onAnimationStart({ animationName, target }) {\n    if (animationName !== ANIMATION_NAME) return;\n    const tagName = target.tagName.toLowerCase();\n    register(tagName);\n  }\n\n  function register(tagName) {\n    if (elements.has(tagName)) return;\n    elements.add(tagName);\n    const script = Object.assign(document.createElement('script'), {\n      type: 'text/javascript',\n      defer: true,\n      onload: () =&gt; script.remove(),\n      onerror: () =&gt; script.remove(),\n      src: new URL(`components/${tagName}.iife.js`, SOURCE_DIR)\n    });\n    document.head.appendChild(script);\n  }\n\n  observe(document.documentElement);\n})()\n</code></pre>\n<p>The additional parts added are to ensure we don't fetch definitions for things we are currently loading or have already loaded and to clean up the scripts being added to the page after they have completed.</p>\n<h2>Handling shadow roots</h2>\n<p>So we've solved for when custom elements appear on the page but not when they appear within other custom elements. There's a little more work to do here.</p>\n<p>When a custom element is identified, we'll want to listen inside of its shadow root for undefined elements. We can do that in the event trigger.</p>\n<pre><code class=\"language-js\">function onAnimationStart({ animationName, target }) {\n  if (animationName !== ANIMATION_NAME) return;\n  const tagName = target.tagName.toLowerCase();\n  register(tagName);\n\n  // When the custom element is defined, begin looking for custom elements within\n  window.customElements.whenDefined(tagName).then(() =&gt; observe(target.shadowRoot));\n}\n</code></pre>\n<p>This will also require us to change the <code>observe</code> function since shadow roots do not have a <code>&lt;head/&gt;</code>. This is what the final registrar function looks like.</p>\n<pre><code class=\"language-js\">const ANIMATION_NAME = 'undefined-detection';\nconst CSS = `\n  :not(:defined) { animation: ${ANIMATION_NAME} } \n  @keyframes ${ANIMATION_NAME} { to { visibility: visible } }\n`;\nconst SOURCE_DIR = new URL(document.currentScript.src).href.replace(/[^/]*$/, '');\n\n(function registrar() {\n  const elements = new Set();\n\n  // Determine the anchor and target to set the resources\n  function location(root) {\n    return root === document.documentElement\n      ? { anchor: document.head, target: document.head.lastChild }\n      : { anchor: root, target: root.firstChild };\n  }\n\n  function observe(root) {\n    if (!root) return;\n    root.addEventListener('animationstart', onAnimationStart);\n    const styles = Object.assign(document.createElement('style'), {\n      type: 'text/css',\n      textContent: CSS,\n    });\n\n    // Here's where we determine where to attach the resources\n    const { anchor, target } = location(root);\n    anchor.insertBefore(styles, target);\n  }\n\n  function onAnimationStart({ animationName, target }) {\n    if (animationName !== ANIMATION_NAME) return;\n    const tagName = target.tagName.toLowerCase();\n    register(tagName);\n    window.customElements.whenDefined(tagName).then(() =&gt; observe(target.shadowRoot));\n  }\n\n  function register(tagName) {\n    if (elements.has(tagName)) return;\n    elements.add(tagName);\n    const script = Object.assign(document.createElement('script'), {\n      type: 'text/javascript',\n      defer: true,\n      onload: () =&gt; script.remove(),\n      onerror: () =&gt; script.remove(),\n      src: new URL(`components/${tagName}.iife.js`, SOURCE_DIR)\n    });\n    document.head.appendChild(script);\n  }\n\n  observe(document.documentElement);\n})()\n</code></pre>\n<h2>Missing pieces</h2>\n<p>One edge case that this approach might not catch is when custom elements are dynamically added to defined elements.</p>\n<p>In other words, if <code>&lt;my-element&gt;</code> appears on the page, we define it and immediately add the listener to <em>only</em> that shadow root. While it does determine if any custom elements within its lifecycle need definitions, later <code>&lt;my-element&gt;</code> components added to the page will already be defined and therefore not trigger dynamically added custom elements within those later components (because the triggering resources aren't added to subsquent shadow roots).</p>\n<p>To have true coverage, the triggering resources would need to be added to <em>all</em> shadow roots. Luckily, this could be solved by importing the node detection CSS separately within each component which will trigger the registrar to fetch the definition; something that could be part of the library building script.</p>\n<pre><code class=\"language-js\">import CSS from '../registrar.js';\nclass MyElement extends window.HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' }).innerHTML = `&lt;style type=&quot;text/css&quot;&gt;${CSS}&lt;/style&gt;`;\n  }\n}\nwindow.customElements.define('my-element', MyElement);\n</code></pre>\n<p>{% aside %}</p>\n<h3>Listening for defined</h3>\n<p>You may have considered another approach to use node detection to just look for defined elements.</p>\n<pre><code class=\"language-css\">:defined {\n  animation: defined-detection .1ms;\n}\n</code></pre>\n<p>From there we could just add the target resources to each element; skipping the <code>customElements.whenDefined</code> check since the CSS animation trigger should catch it instead.</p>\n<pre><code class=\"language-js\">root.addEventListener('animationend', ({ animationName, target }) =&gt; {\n   if (animationName !== 'defined-detection') return;\n   observe(target.shadowRoot);\n})\n</code></pre>\n<p>There's one catch, the <code>:defined</code> selector will trigger for <em>all elements</em> (<code>&lt;html/&gt;</code>, <code>&lt;div/&gt;</code>, <code>&lt;p/&gt;</code>, etc.) and for every single one of them found on the page. While you could certainly filter for specific custom elements with open shadow roots, it's still a lot of callbacks firing. Another reason why having a list of elements to update or pre-updating with the triggering resources seems to be better approaches.</p>\n<p>{% endaside %}</p>\n<h2>All together now</h2>\n<p>Once you have the files bundled and deployed, you can just add the registrar to each page and it'll begin fetching definitions. I'll add <code>defer</code> so it doesn't block the page from loading.</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;registrar.iife.js&quot; defer&gt;\n</code></pre>\n<p>And that's it, we're automagically getting the definitions for web components on-demand!</p>\n",
            "url": "https://blog.damato.design/posts/fetching-definitions",
            "title": "Fetching web component definitions",
            "summary": "Passively requesting code once an element is discovered on a page.",
            "image": "https://blog.damato.design/og-images/fetching-definitions",
            "date_modified": "2022-04-12T00:00:00.000Z"
        },
        {
            "id": "hovercraft",
            "content_html": "<p>In a world where we apply personality to every little interaction for those sweet engagement metrics, the <code>:hover</code> CSS pseudo selector is one of the easiest ways for folks to &quot;make it pop&quot;. However, I'll argue that perhaps we don't need to put so much design into it; at least from a token maintenance perspective.</p>\n<h2>Looking good, feeling good</h2>\n<p>It is very common to have colors of a button change when a pointing device hovers over an interactive button. We often design for this because we've seen it before. It just <em>feels</em> right. You could argue it might not look interactive if it didn't respond to the incoming cursor. Even the default user-agent button has a hover effect, how could one possibly defend not including this effect?</p>\n<p>To start, let's look at the default <code>&lt;a/&gt;</code> element and how that behaves. You'll notice that most user-agent defaults <em>don't</em> have any color change for the text. I'd theorize that there are two reasons for this. First, accessible text color is a challenge, especially when attempting to show a shade change on glyphs that are only a few pixels wide. This is the reason why most of the effects we decide to put on links are not color changes, but some other visual treatment like an underline visibility change or animation.</p>\n<p>The second reason is the foundation of my argument; the cursor changes when you hover on these elements.</p>\n<p>When a sighted user sees something they assume is interactive on screen, they'll find the cursor and navigate it to the target. Once the cursor is in the interactive area of the target, it is common to provide feedback to the user that says <em>we are in an interactive area now, clicking here will do something</em>. The cursor change on links is enough of a signifier to the user that you may interact with this special text.</p>\n<p>For the default user-agent <code>&lt;button/&gt;</code> styles, the cursor <em>does not change</em>. It remains the default arrow cursor.</p>\n<h2>Making change</h2>\n<p>The reason for the cursor difference on hover between links and buttons has some <a href=\"https://ux.stackexchange.com/a/105098\">history</a> and can be otherwise debated.</p>\n<p>{% quote, &quot;https://medium.com/simple-human/buttons-shouldnt-have-a-hand-cursor-b11e99ca374b&quot;, &quot;Adam Silver&quot; %}</p>\n<p>There’s a belief that the hand (pointer) cursor means clickable, but this is wrong and potentially problematic.</p>\n<p>{% endquote %}</p>\n<p>The issue with this statement is there's nothing (past <a href=\"https://www.w3.org/TR/css-ui-4/#valdef-cursor-pointer\">technical specifications</a>) that tells daily users of the web the pointer cursor means you are hovering on a link. We have introduced the pattern of the cursor change for buttons, and for general interactivity, over time through shared expectations. This can be thought of as similar to the <a href=\"https://www.nngroup.com/articles/hamburger-menus/\">hamburger menu</a>, which originally meant nothing to most users but has been learned over time; even if other more verbose design patterns exist. The hamburger menu has become ubiquitous, as has the pointer on buttons.</p>\n<p>Due to this learning, I believe we could leverage the cursor change in the same way it has been done for links; the sole indicator of an interactive area awaiting your next move. That's right, no color changes or fun 3D effects. Just a single pointer.</p>\n<h2>Form follows function</h2>\n<p>If a user is confused about an interactive element being a link or button, it does not come down to the type of cursor chosen. The <a href=\"https://css-tricks.com/buttons-vs-links/\">Button vs. Link</a> debate is mostly rooted in resting visual preference. Users expect underlined text to behave like a link. While text elements with padding and colored backgrounds often behave as buttons. Our users have grown to identify these patterns through repeated experiences across dozens of sites per day.</p>\n<p>It would be beneficial to supply our users with expected experiences as any deviation can cause unwanted friction. A button using an underline and no padding will behave unexpectedly to a user, no matter how pretty it is. It is advised to offer sensible design treatments that maintain user expectations and common functionality.</p>\n<p>Importantly, users will often use their eyes to identify and develop their expectations before ever moving the mouse to the target. This happens before the cursor has the possibility of changing. They are quickly making assumptions about what the target can do, all before they ever get a chance to hover it. And for folks not using their eyes; they'll never experience the effect at all.</p>\n<h2>In the wild</h2>\n<p>I've gone through the 123 implementations of the <a href=\"https://component.gallery/components/button/\">button component at the Component Gallery</a>; how many of them don't use the pointer on hover? 6; 4% of all buttons found on the site do not change the cursor on hover. While the <a href=\"https://en.wikipedia.org/wiki/Bandwagon_effect\">Bandwagon effect</a> can certainly be a factor, this is most likely from patterns forged from real-world use. Know that the first interactive area on the web was the link, so we have grown to expect the pointer to appear as an interactive identifier in other areas in turn.</p>\n<h2>Further considerations</h2>\n<ul>\n<li>For folks who aren't using a mouse to navigate, they need focus styles. The hover effect might not ever be displayed to these users. As a more complete recommendation, focus styles between interactive elements should match so a user can follow a standard identifiable treatment across the site.</li>\n<li>For folks on touch devices, hover doesn't exist except for some fleeting finger presses that occur <em>after</em> the interaction. In most cases, a person's finger will otherwise obscure the effect when provided.</li>\n<li>Using the cursor alone also avoids the need to curate specific colors for every type of button. No need to have a separate color for the default primary state and primary hover.</li>\n<li>For buttons that have a selected state; omitting separate styles for hovering helps avoid the need to define a different appearance between unselected hover and selected hover. Otherwise, the number of definitions will increase not only for <code>:hover</code> but now include <code>[aria-selected=&quot;true&quot;]:hover</code> for every single type of button in your library.</li>\n<li>In CSS, instead of specifically writing a <code>:hover</code> style, the <code>cursor: pointer;</code> can be written on the <code>button</code> selector. No need for a new selector at all!</li>\n</ul>\n<p>Consider a vote for <code>cursor:pointer</code> today!</p>\n<p><img src=\"/images/vote-cursor-pointer.png\" alt=\"Political poster suggesting to use cursor:pointer\"></p>\n<h2>Telling the truth</h2>\n<p>In reality, I don't believe that a single cursor change is enough to indicate interactivity. A best practice of experience design is to have multiple signifiers to indicate new information. This is why using only color to indicate an error isn't enough. It is better to include an icon to further enforce the status of the new message or state.</p>\n<p>In this way, instead of choosing an entirely new color to indicate hover, one recommendation could be filtering the given color in some way on hover.</p>\n<pre><code class=\"language-css\">button:hover {\n    cursor: pointer;\n    filter: saturate(0.8);\n}\n</code></pre>\n<p>For many colors, a slight shift in saturation should not cause accessibility concerns past what has been curated for the default state. If this approach causes the resulting color to not provide enough contrast between the text and background, that might mean the initial color itself is too close to the threshold and would serve better with more contrast. On the other hand, if the change isn't perceptable to color-deficient folks, the cursor will be enough to indicate the intention, as suggested above.</p>\n<p>In my perspective, there are often too many tokens to curate and anything that can be done to reduce the set and subsequent naming of additional tokens is a step in a maintainable direction. Omitting the hovered state as a themable variable helps reduce complexity and permutations.</p>\n<p>Perhaps, we need a new way of looking at the ecosystem.</p>\n<p>{% quote, &quot;https://twitter.com/markacianfrani/status/1694341251540123887&quot;, &quot;Mark A. Cianfrani&quot; %}</p>\n<p>Design system business model where you have to pay for every token you use.</p>\n<p>{% endquote %}</p>\n<p>This isn't the model we deserve, but it's the one we need right now.</p>\n",
            "url": "https://blog.damato.design/posts/hovercraft",
            "title": "Hovercraft",
            "summary": "Barely noticeable design fun causes token explosions.",
            "image": "https://blog.damato.design/og-images/hovercraft",
            "date_modified": "2023-08-24T00:00:00.000Z"
        },
        {
            "id": "interview-critique",
            "content_html": "<p>Every morning before I start the day, instead of coffee to kickstart my brain, I look for some short videos to watch. Some times they are videos I've seen before that I liked, others might have been published in the last 24 hours. The topics range from action clips in big movies to a complication of cats who enjoy water. Every once in a while, I'll find some video about about design or coding and give it a shot.</p>\n<p>As of this writing, the <a href=\"https://www.youtube.com/@WebDevCody\">Web Dev Cody</a> channel has over 85,000 subscribers. The creator seems to have a new video published <em>every single day</em>. <a href=\"https://www.youtube.com/watch?v=-Rtlnsgbc0k\">The video I'll be critizing</a> has nearly 40,000 views and the title of this video is:</p>\n<p><strong>This is a good beginner React interview challenge question</strong></p>\n<p>From the title, I assume that the presenter would be providing a question that they had experience with in an interview setting, either as a interviewer or interviewee. As a person with experience in both, I'm going to assess how this person would do coming in for an interview as a engineer on a feature team. Let's assume we have the following prompt.</p>\n<blockquote>\n<p>Starting from the given React + Vite project, and using the <a href=\"https://www.datamuse.com/api/\">datamuse API</a>, build a small form which allows a user to enter a word and retrieve a list of synonyms.</p>\n</blockquote>\n<p>{% aside %}\nFor the purposes of this mock assessment I'm acting as if I am interviewing this candidate for a front-end role, as is my specialty. The presenter mentioned that the purpose was to test React skills. The <a href=\"https://reactjs.org/\">React website</a> has the following subheadline:</p>\n<blockquote>\n<p>A JavaScript library for building user interfaces</p>\n</blockquote>\n<p>So it is valid to assume we're using React to build something for the front-end where user interfaces live on the web.\n{% endaside %}</p>\n<h2>A good start</h2>\n<p>Our candidate begins by using semantic HTML and creates a <code>&lt;form/&gt;</code> element with an <code>&lt;label/&gt;</code> and <code>&lt;input/&gt;</code> which are linked together using <code>id</code> and <code>htmlFor</code> for accessibility. They also add a <code>useState()</code> hook to manage the storage of the incoming user input and suggest using Typescript to describe the type of value expected. This is a nice touch but perhaps something better for a following refactor.</p>\n<p>The candidate then wires up the <code>onChange</code> handler and the <code>value</code>, stumbling a bit on the difference between a &quot;controlled&quot; versus &quot;uncontrolled&quot; component. This is corrected after looking up examples, and admittedly knowing the nomenclature is less important to me than an understanding of what's happening. However, I am hoping that they aren't expecting to submit a request for every <code>onChange</code> event as that would be expensive.</p>\n<h2>Warning signs</h2>\n<p>The candidate then adds a button and realizes that there are some default styles being applied. They decide to change the colors but hints at a bias against CSS; mentioning that the functionality is more important. Making a note of that as I don't agree but there's still plenty to do for this prompt to be complete.</p>\n<p>The candidate then begins to prepare the form for submission by adding an event handler to the form and calling <code>event.preventDefault()</code>, mentioning that it's important to use otherwise &quot;this form will refresh your page&quot;. This is not the full story, as the form is meant to send the data to a url given by the required <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action\"><code>action</code></a> attribute which will process the data and then handle the next step; usually by displaying a new page showing success or failure. That &quot;refresh&quot; that occurs is actually the response from the url request. If the url is not set, that's when the page submits to itself causing the refresh. Luckily, the expectation is to send the request on form submit.</p>\n<p>While we're using a lot of JavaScript in order to create the application, we could use React to render this as SSR and then <a href=\"https://www.bram.us/2022/04/22/progressive-enhancement-and-html-forms-use-formdata/\">progressive enhance the form</a>. Unfortunately, I wouldn't expect this approach from a beginner but I'd be on the lookout for folks who understand the expected semantic of HTML forms.</p>\n<p>The candidate does a nice job reading the API documentation and determining how to formulate a request. Especially since the API doesn't show any full code examples of a request; just partial url constructions. They're able to construct a basic test request using <code>fetch()</code> within the handler, transform the response to JSON, and store the data within the state.</p>\n<h2>Getting into trouble</h2>\n<p>So for the final part, we'll need to render out the words. The candidate opts to start using a React Fragment (<code>&lt;/&gt;</code>) but quickly changes to use a <code>&lt;div/&gt;</code> to have the words all on different lines. Finally, the candidate mentions to &quot;be fancy&quot; and put the words in <code>&lt;li/&gt;</code> elements. From my perspective, this is not fancy. This is semantic. It's the most correct element to use in this case. The candidate oddly mentions the lack of interest in styling at this point when the concern isn't the look, but the purpose. This is a <em>list</em> of words, and should therefore be represented as <em>list items</em>.</p>\n<p>However, as the candidate mentions &quot;I wouldn't care about styling&quot;, it immediately sets off a red flag. While many tech interviews may look similar to what's happening in this video, the actual role is often very different. You aren't often building new features or applications but instead maintaining old ones and updating the styles to make them look new. That's why styling is so important. Having the ability to effortlessly rearrange the components within the experience while maintaining the legacy system is probably the most common task in web development careers. When I conduct an interview, there is often a discussion on styling since much of the role is how well you can debug or alter an existing style to match design expectations. This, along with considering accessibility, localization, and other user-centered metrics.</p>\n<p>The candidate notices an error in the web console, expecting a unique <code>key</code> for each element in the list. The candidate mentions they always miss this, especially when the linter isn't setup. I'm less empathetic to this. If this is something you <em>always</em> miss, I'd make it a point to <em>never</em> miss it again. In my experience, I don't rely on tools to correct me but that's because I've been coding before these tools existed. It's also because I'm never sure where I'll be writing code. It's entirely possible that I could be authoring code in a web IDE that doesn't have all the bells and whistles. Just because the tools aren't available shouldn't render me helpless to write working code. I understand these tools are helpful for beginners but I'm not assessing the tool's features, I'm assessing your skills.</p>\n<p>The candidate now notices a bug, the word <code>fast</code> was hard-coded within the request so that the user input wasn't being considered. The correction made was to send the user input <em>directly into the request</em>. Old timers will remember the <a href=\"https://xkcd.com/327/\">Bobby Tables XKCD comic</a> which humorously reminds us to always sanitize user input. While probably not detrimental for this particular application, a user could append <code>&amp;topics=temperature</code> to the end of their word and alter the results. I might not expect a beginner to catch this, but I'd certainly demonstrate the problem and raise a conversation about it.</p>\n<h2>Time for more</h2>\n<p>At this point, the prompt is complete but maybe we have more time to refactor or add features. The candidate recommends storing the base API url in an environment variable. I wouldn't recommend this for a public API like this one but I'd allow the exploration. Unfortunately, the lack of knowledge for Vite makes the implementation troublesome and the change is ultimately reverted.</p>\n<p>At this point, we might agree for some added functionality to be implemented. Clicking a word in the list would submit a new request and update the existing list. If the request is slow, some feedback should be shown indicating a slow request. The candidate decides to add an <code>onClick()</code> method directly to the <code>&lt;li/&gt;</code>. I'd ask the candidate to consider how this might affect accessibility and I hope they consider using buttons within the <code>&lt;li/&gt;</code> elements instead.</p>\n<p>The candidate then notices that the request from the input and from the click are the same, just changing the word. This shows an opportunity to abstract this function for reuse in both scenarios. While the first approach is fine for a beginner (having the form and the click call the same function), the candidate instead decides to create a few layers of abstraction. First creating an <code>/api</code> directory and setting up an adapter to handle the request functionality. Then they also create a <code>/hooks</code> directory for a custom hook to use this local adapter. All of this might seem like a premature optimization but I'm interested in the journey.</p>\n<p>This hook signature presented isn't something I'm personally familiar with; I've always seen a tuple as the return. Perhaps since this needs to provide a way to trigger the request, return the data, and the signal that loading is happening requires more than two values. However, I wonder if the loading could be held at the application layer, starting when the request is called and clearing the current results and ending when the results are populated. I think it would make an interesting conversation and I'd like to know the benefits and drawbacks to it.</p>\n<p>Due to the use of promises, I'd expect to have a conversation about error handling. If the API being called errors, <code>setIsLoading()</code> will never be called. This can be solved by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\"><code>.finally()</code></a> instead of a plain <code>.then()</code>. This will fire after everything is done, error or success.</p>\n<p>Also on seeing the result of the new loading screen, I'd like to ask what could be done so the form doesn't jump when the list loads. Given the lack of respect for CSS, I wouldn't expect much of a solution. Based on the layout of the page, my assumption is that the content is using flex alignment to be vertically centered. Removing that style would help correct the jumpiness.</p>\n<h2>The verdict</h2>\n<p>Ultimately, I'd pass on this candidate for a front-end role. Primarily for the lack of interest in CSS, and somewhat for the skills not being different from any other engineer out there that <em>does</em> have CSS skills. I'm afraid that at this point in time, I might be able to give a few prompts to <a href=\"https://openai.com/blog/chatgpt/\">ChatGPT</a> and get similar results.</p>\n<p>It is entirely possible that my experience skews me to have a different definition of a front-end role. However, front-end in <em>any</em> definition should include the languages of the browser because that <em>is</em> definitively front-end. The server is <em>not</em> the front, it is very much the back. How we serve to the front-end could be (and often is) included in a front-end role. Which is why I think understanding the configuration of Vite is a nice-to-have, while a working knowledge of CSS is a must. If you want to avoid the CSS, then you're looking for any role that <em>isn't</em> front-end.</p>\n<p>When I interviewed for my current position, I did the majority of the interview exercises using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">Web Components</a>. While I'm not entirely sure what was considered in my review meeting, I assume the team was impressed in being able to write Web Components without a framework. It's a very unique skill that you can transfer to practically any project.</p>\n<p>The other point to note is that at this time I knew very little React. I think the best I could do was recognize JSX. However, I don't think this mattered as much since I knew JavaScript so well that tripping on the React parts (ie., using <code>className</code> instead of <code>class</code>) was less of a problem. My core skills were impressive, React is just something I could (and did) learn on the job.</p>\n<p>In my view, it's a shame that there's so much emphasis put on concepts that aren't part of the regular job or aren't different from the next engineer coming in from a bootcamp. I think it's important to show interest and a quest for expertise in <em>something</em> to stand out from the rest.</p>\n<p>As a recent example, the last person I interviewed said she had fun writing her own code compilers and I think that's awesome. She was hired for her first tech job out of college. She then discovered much of the real world changes were one-line PRs. Sorry to say more impact is often a wish upon a midnight feature.</p>\n",
            "url": "https://blog.damato.design/posts/interview-critique",
            "title": "Interview critique",
            "summary": "There's a popular video trend demonstrating interview scenarios. In this post, I'll provide some feedback on one exercise in particular based on my experience as both an interviewer and interviewee.",
            "image": "https://blog.damato.design/og-images/interview-critique",
            "date_modified": "2023-01-03T00:00:00.000Z"
        },
        {
            "id": "low-inspectations",
            "content_html": "<p>The design hand-off process is often troublesome because of intentions lost in translation. We've created <a href=\"../terminal-career\">expertise in this space between design and engineering</a> to help smooth the exercise but we often try to find ways to bridge the gap without human intervention. One of these ways is generating resources to use from the design tool.</p>\n<p>I saw a great <a href=\"https://www.youtube.com/watch?v=hbN9RGcQFNU\">Figma for developers video</a> <a href=\"https://twitter.com/megaroeny/status/1625680821372739586\">shared on social media</a> last month. This is definitely a part of the role that isn't often taught, leaving most engineers stumbling around the interface. There's a lot of helpful points made in the short presentation but I need to be critical about one area in particular; the inspect panel.</p>\n<h2>Proceed with caution</h2>\n<p>I consider the inspect panel to be a trap. Admittedly, calling it a trap is dramatic but it's also meant to warn folks who accept what the panel provides verbatim; possibly believing it's the blessed approach. I'll be referring to <a href=\"https://help.figma.com/hc/en-us/articles/360055203533-Use-the-Inspect-panel\">Figma's inspect panel</a> in the following examples as the most popular tool to date but any design tool feature that claims to output code should be treated with skepticism.</p>\n<p>{% aside %}\nThis can exclude design tools that manipulate coded assets such as <a href=\"https://www.framer.com/\">Framer</a>. Because those assets are foundationally engineered, inspecting or exporting these is looking at the direct source code of the asset and not an estimated representation.\n{% endaside %}</p>\n<h3>Coordinate system</h3>\n<p>Figma, like many design tools, place assets on a coordinate system. Elements are added to the artboard and positioned relatively to the top-left corner. This isn't native to web layout, which works as a document where elements added are positioned relative to each other. DOM elements are situationally-aware of their ancestors and siblings to adjust their position. Could you change the positioning strategy for web elements? Yes, but you'll have a much harder time getting them to be accessible and responsive when you break out of the native document flow. Until design tools present the web using native alignment, developers will be left to intepret what a fixed coordinate system should do within document flow. The auto-layout concepts gets us to begin crossing this bridge but we're not entirely on the other side yet.</p>\n<p>💡 Shy from properties that update or declare the explicit position of an element such as <code>position</code>, <code>top</code>, and <code>left</code>. Consider using modern CSS techniques like <code>display: flex;</code> to place the element in the preferred location. Work with the designer to learn about the intentions between different user and device preferences.</p>\n<h3>Hyper local font styles</h3>\n<p>Another feature of the web is that text styles cascade down to lower elements. You don't need to explicitly provide the text styles at every bit of copy. Especially if you <a href=\"https://gtmetrix.com/blog/dont-use-too-many-web-fonts/\">limit the number of fonts to improve performance</a>. If you set the font styles for body copy on the <code>&lt;body/&gt;</code> element, you don't need to reduplicate the font definition at the element which contains the copy. Unfortunately, Figma provides text styles for every individual bit of copy in the artboard. While you can be sure that this bit of text will get the styles when you copy from the inspect panel; you could optimize for less CSS by setting the appropriate style higher in the cascade. This is also great for when you need to update the font styles globally.</p>\n<p>💡 Set the font properties higher up (like at the <code>&lt;body/&gt;</code>) to allow the natural cascade to inform lower elements. Only update the property at the location where it doesn't match with the cascade.</p>\n<h3>Missing units</h3>\n<p>Figma and other design tools that claim they are for web design do not have web units. <a href=\"../62-5\">The <code>rem</code> unit is particularly important on the web</a>, but other units like percentage are also valuable when communicating layouts. Just watch out for <a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a>. The inspect panel is notorious for displaying verbose <code>width</code> and <code>height</code> values in pixels. <a href=\"https://youtu.be/nYyFf-97Qqg?t=118\">Expert CSS authors will tell you</a> that applying these as given in your code is bad practice. We'd rather allow the content to dictate the size of the container or base the dimensions off of some other relative proportion so every container is flexible to any content.</p>\n<p>💡 Ignore <code>height</code> and <code>width</code> properties when found and let the content determine how large the container should be. Consider <code>max-width</code> or <code>max-height</code> for large composition constraints. Work with the designer to determine what web units would work best in areas where they are needed. Avoid using pixels units for layout properties. Using pixels for decorative elements might be appropriate (ie. <code>border-width</code>).</p>\n<h3>Miscellaneous</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\"><code>box-sizing</code></a>: Hopefully this is already found higher in the cascade and <a href=\"https://andy-bell.co.uk/how-the-css-box-sizing-property-works/\">applied globally as <code>border-box</code></a>. This is what <a href=\"https://wiki.csswg.org/ideas/mistakes\">it should have been by default</a>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/isolation\"><code>isolation</code></a>: This property creates a new <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Stacking_context\">stacking context</a> and you most likely won't need to apply this property when you see it in the panel. For more information on stacking contexts and when they are helpful, I recommend <a href=\"https://www.joshwcomeau.com/css/stacking-contexts/\">Josh W. Comeau's article</a>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/order\"><code>order</code></a>: This property should be avoided. While it can change the order of elements as they are displayed visually, <a href=\"https://adrianroselli.com/2015/09/source-order-matters.html\">the HTML won't match</a>. Change the layout order as HTML instead of this property.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\"><code>overflow</code></a>: You should reserve this property to create a scrollable containers. Setting overflow past this reason will cause clipping in containers and other side-effects; such as creating a new <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">block-formatting context</a>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index\"><code>z-index</code></a>: You should try to avoid setting this property, especially in the case of considering a larger elevation system where collisions are unavoidable. For more information on why <code>z-index</code> should be considered an escape-hatch, I recommend <a href=\"https://www.joshwcomeau.com/css/stacking-contexts/\">Josh W. Comeau's article</a>. Yes, I've linked it twice in one post; it's that important.</li>\n</ul>\n<h2>Stop, collaborate, and listen</h2>\n<p>Ultimately, your developer should be empowered to provide feedback on the design. Likewise, the developer shouldn't depend on what the expect panel presents as perfectly appropriate. There is an expertise in translation that must occur which only comes with practice and experience. Work together towards finding the best execution of the intended design. Dare I say, even <a href=\"https://vimeo.com/296790002\">include them in the process</a>. This can be the start of a beautiful partnership.</p>\n",
            "url": "https://blog.damato.design/posts/low-inspectations",
            "title": "Low inspectations",
            "summary": "You should be better than the inspect panel.",
            "image": "https://blog.damato.design/og-images/low-inspectations",
            "date_modified": "2023-03-01T00:00:00.000Z"
        },
        {
            "id": "meaningless-curves",
            "content_html": "<p>The tiered system of design tokens has been fairly well-established to include <a href=\"../tokens-as-intents\">semantic tokens</a>. Color, typography, and even <a href=\"https://complementary.space\">spacing</a> can be described through semantic means. This drives the question, how do we name other properties semantically to further describe a generic experience?</p>\n<h2>Nested rounding</h2>\n<p><a href=\"https://cloudfour.com/thinks/the-math-behind-nesting-rounded-corners/\">This article at Cloud Four</a> goes into the idea of nested rounding in detail. Essentially, we want the radius on rounded corners between nested elements to follow a shared focus (ie., center of a circle). The math is very simple, here it is using CSS notation:</p>\n<pre><code class=\"language-css\">.child {\n    border-radius: calc(\n        var(--ancestor-element-radius) - \n        var(--distance-from-ancestor)\n    );\n}\n</code></pre>\n<p>Ultimately, we'd like to think of rounding in terms of semantics. However, because we want the rounding to be derived from elements, <em>we can avoid semantics entirely</em>. In practice, the reason we might use semantics is when we have decisions to make that are more complicated than just on/off. Semantics are used to describe the why we chose this value from a plethora of other possible values. In our rounding treatment, we shouldn't have more than one value. It should be a binary decision to include rounding or not and let other factors determine how round to achieve the nesting effect.</p>\n<p>In other words, when curating an experience, we'd like to <strong>simply mark elements which should receive nested rounding</strong>. Later, we provide some themable amount used by the rounding calculation which affects the rounding of marked elements in a uniform manner. We do not prescribe the rounding amount at any one element explicitly, we simply expect the appropriate nested rounding to exist when turned on.</p>\n<p>However, we have some problems to try and overcome.</p>\n<h2>Deriving values</h2>\n<p>The first problem is trying to get the <code>--ancestor-element-radius</code> and <code>--distance-from-ancestor</code> values for the formula. The ancestor part provides a clue to what makes this so difficult. <strong>The nested rounding calculation is dependent on the relationship between <em>two</em> elements.</strong> This is different from a <a href=\"../spacing-solved\">semantic spacing approach</a> as we only select a spacing token to convey a relationship. In the rounding formula, the final value is computed <em>using the resulting relationship</em> when the rounding is meant to be applied.</p>\n<p>When trying to fill the <code>--distance-from-ancestor</code> value, it's very likely that we will have several elements nested which may or may not include their own methods of supplying space. The properties of <code>margin</code>, <code>padding</code>, <code>gap</code>, and additional <code>position</code> and <code>transform</code> properties can all have a hand at visually presenting how far two elements are from each other, thereby making the <code>--distance-from-ancestor</code> value very challenging to determine.</p>\n<p>{% aside %}\nYou could try computing this in JavaScript. You'd mark elements that you'd like to measure between and then write the value to a CSS Custom Property. There's a few pitfalls here; responsive changes, transforms, relative units, etc.. All of these things would make trying to capture this value a nightmare. This isn't a simple programmatic redlining exercise. On top of this, adding JavaScript to adjust a visual treatment seems like a bad use of the main thread. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a> for <code>border-radius</code>? Now that's just crazy talk.\n{% endaside %}</p>\n<p>Let's assume we have a system which can readily provide the <code>--distance-from-ancestor</code>. The <code>--ancestor-element-radius</code> in a perfect system would also be derived by the formula. So where does the base radius come from that influences all other nested rounding? Would it make sense for the <code>&lt;body/&gt;</code> to declare the first amount of rounding? Conceptually this seems incorrect since we don't expect the <code>&lt;body/&gt;</code> element to have rounding at all. Though, we can simply choose not to apply rounding at the <code>&lt;body/&gt;</code> and rather only define the value here.</p>\n<p>Another problem with starting from the top would be that some elements would never receive rounding. If you have a button which expects rounding to appear in two different places, it is possible that they receive different rounding amounts based on how many nested ancestors are marked for rounding between them. This could cause the same button to look different just by its placement within the layout.</p>\n<p><img src=\"/images/rounding-top-down.png\" alt=\"Content without rounding prescribes non-rounded button, content with rounding prescribes rounded button.\"></p>\n<p>So, instead of starting at the top, could we start at the bottom? That is, could we declare what the smallest rounding is and then have marked ancestor elements use that value? After all, the center of the radius that determines the rounding must exist inside this element. Perhaps a new calculation would look like this:</p>\n<pre><code class=\"language-css\">.parent {\n    border-radius: calc(\n        var(--deepest-element-radius) + \n        var(--distance-from-deepest)\n    );\n}\n</code></pre>\n<p>In this way, the <code>--deepest-element-radius</code> can now be a fixed number, provided by a theme because there should be no smaller rounding applied. All rounding that occurs above this element is derived from this base amount. For the purposes of our exploration, let's call these deepest elements the <strong>rounding focus</strong>, as they possess the center which all ancestor element rounding radii would be computed in this system.</p>\n<p>The logic within marked ancestor elements would identify their deepest rounding focus and calculate the distance between their bounding boxes to determine the <code>--distance-from-ancestor</code>. We already know the difficulties in attempting this from above, but let's continue assuming we have a system in place which can prescribe the distance somehow.</p>\n<h2>Existential crisis</h2>\n<p>In explaining the logic to calculate the ancestor's rounding, I simplified the approach dramatically. In reality there's dozens of considerations that we'd need to account for. One of the largest problems returns back to rounding determined by an element's existence.</p>\n<p>Imagine we have a card layout and all cards are marked to include rounding but no cards include any elements which initiate rounding; our &quot;rounding focus&quot; elements. This would mean that none of the cards have rounded corners. When we add our rounded button to one of the cards, rounding would exist <em>only on that card</em>.</p>\n<p><img src=\"/images/rounding-bottom-up.png\" alt=\"Button with rounding only influences one sibling, others are not rounded.\"></p>\n<p>If you're thinking we could include a &quot;virtual&quot; rounding focus, a hidden element which triggers rounding, how do we allow the ancestors to measure the distance between edges? It's possible the cards' internal structures are completely different between them, making the rounding varied as well. What would be more desirable is for all sibling cards have the same rounding, whether they have a rounding focus or not. Except we've already determined that nested rounding is only determined between an element and ancestor, not from siblings. Do we then have further markings for rounded siblings to share values? Which sibling rounding takes priority?</p>\n<p>We're not done with problems. If we put the rounding focus element within the card, what distance should we measure? We <em>could</em> take the shortest distance and apply to all corners. However, what happens if we position that button in the center of the card; does the card become a circle because the button is positioned so far from the edges? Ok, perhaps we can set limits on the rounding using <code>max()</code>. But then if this hits the max, outer marked elements would get the same max radius thereby breaking the nesting effect.</p>\n<h2>Level headed</h2>\n<p>At this point you might ask why we haven't done what has been before; create levels of rounding. Since we don't need to be semantic, maybe this becomes a viable option?</p>\n<p>Let's say we start at the base level again with a rounded button, then we have a card component which gets the next level up. What happens when we include a rounded input with a rounded button inside? We would need to insert a rounding level in between. The loom of insertion is the biggest drawback using levels. How could we possibly account for all the layout nesting configurations which may be rounded to avoid levels being added or orphaned?</p>\n<p>At this point we're really more in search of a <em>layout</em> system than just a rounding system. Prescribing layouts <em>could</em> warrant the possibility of informing how round parts should be due to restrictions set by components of the system. We could know exactly what elements exist and the amount of space between them. Creating a robust layout system is outside the scope of this exploration since that would attempt to define all possible layouts for any hypothetical experience; a monumental task.</p>\n<p>So for the moment, I don't believe there's any possibility of a semantic nested rounding system due to the natural dependencies on existing elements. We're unfortunately stuck with a more meaningless system which can provide few nesting effects for curated components.</p>\n<p>But maybe that's the point. Other properties are decided in an experience based on qualities like feedback, hierarchy, and relationship:</p>\n<ul>\n<li>The color orange often indicates a warning.</li>\n<li>Large text can support a section outline heading.</li>\n<li>Less space between items means they are related.</li>\n</ul>\n<p><a href=\"https://twitter.com/FonsMans/status/1620022363722240000\">If this isn't branding</a>, what information does corner rounding convey past being round? <a href=\"https://en.wiktionary.org/wiki/goose_egg\">Goose egg</a> 🥚.</p>\n",
            "url": "https://blog.damato.design/posts/meaningless-curves",
            "title": "Meaningless curves ahead",
            "summary": "Semantic nested rounding is systematically inconceivable.",
            "image": "https://blog.damato.design/og-images/meaningless-curves",
            "date_modified": "2023-02-07T00:00:00.000Z"
        },
        {
            "id": "no-more-modals",
            "content_html": "<p>Have you ever landed on a web page and have it immediately ask you for a location? How about while you are reading an article and, after you scroll down to read more, you get an advertisement covering your next paragraph? These are super annoying patterns but why are they annoying?</p>\n<h2>Surprising popups</h2>\n<p>When a user has a specific goal in mind and an interruption occurs, the user will find it annoying if that interruption does not relate to their current workflow. This can be expanded to any generic UX pattern; where expectations aren't met and frustration increases. However, there is a special place for popups because they <em>interrupt</em>.</p>\n<p>There is a fine line between the popup and the modal. <strong>The modal <em>must be related</em> to the user's current workflow</strong>. This means that the user triggered this popup and it meets the user's expectations.</p>\n<h2>Reasons to use a modal</h2>\n<p>The designer could choose a modal to interrupt the user (as all popups do) and cause the user to slow down for some important information in order to proceed. A good example is the destructive confirmation modal which helps ensure that the delete button press was intended. The user is expected to do a bit more work here so important data isn't erased. So, the designer requires one more hit target to be pressed before continuing. The modal here also shows that the user can return to the original state just behind the message and that nothing has changed yet.</p>\n<p>Along with this previous idea, another valid reason to provide a modal is to show the user that they are still within the current context. A good example here is adding an image to a blog post. It would be more helpful to show that the user's content remains while completing a new task of selecting an asset from the gallery. If we were to provide a new page for this experience, the user would not be confident that their content was saved. Showing that their content is persistent behind the modal establishes trust that the user will return as they once left.</p>\n<p>So to recap, you may consider using a modal:</p>\n<ul>\n<li>if you believe the user must slow down before continuing the current task.</li>\n<li>if you believe the user does not trust that current changes will persist while they need to complete a different but related task.</li>\n</ul>\n<h2>Questionable practices</h2>\n<p>I've seen dozens of workflows using a modal which could have been another pattern entirely:</p>\n<ul>\n<li>If the user could return to the experience using a url; the experience should probably be a new page.</li>\n<li>If the user needs to create or edit an entity with many fields (eg.: a profile, a product); the experience should probably be a new page or incorporated into the current experience.</li>\n<li>If the user needs to edit a value; the experience should probably be incorporated into the current experience.</li>\n</ul>\n<p>An example that I've seen recently is a profile review experience. Once clicking your avatar in the application a <em>modal</em> appears above your current workflow. From here you can edit fields and save to return. However, you may also change your avatar photo. After selecting a photo, you are presented <em>another modal</em> allowing the user to resize the photo and save the changes, returning you to the previous modal. So how could this experience be redesigned?</p>\n<p>First, clicking on your profile should navigate the user to their profile. We expect this to be a url and therefore a new page. From here, the user is given several fields of values they can edit directly. Let's continue with this pattern by allowing the user to edit their avatar here as well. Use a slider to resize and drag-and-drop to reposition the photo in the thumbnail. The profile would hold the original image and on save, it would provide an avatar sized adjustment of that original for use across the site. We've taken a multi-modal experience to a zero-modal one.</p>\n<p>Let's be clear here, I'm not recommending to remove <em>all</em> modals from experiences. As mentioned above, if the user was able to delete their profile, a modal confirming the action would be helpful for the reasons stated above. Although even this could be avoided by requiring the user type a word or phrase into a field before executing the destructive action. It shows deliberate intent over accidental button clicks.</p>\n<p>It's common to find modals used to login or signup. Consider using a separate page unless you allow the user to make customizations before creating an account. In this case, you'll consider using a modal to show unauthenticated progress is maintained while they complete the signup process. Make sure the signup process is reduced down to the essential fields. Allow the user to include additional information later in their profile.</p>\n<p><a href=\"https://www.nngroup.com/\">NN/Group</a> also provides a few additional recommendations for when to use modals. One of the examples is a wizard which breaks down a complicated workflow into steps. What's important here is the second paragraph:</p>\n<p>{% quote, &quot;https://www.nngroup.com/articles/modal-nonmodal-dialog&quot; %}\nHowever, it’s important to note that a modal with multiple steps will just prolong the amount of time spent away from the main tasks, making it more likely that users will forget what they were doing in the first place.\n{% endquote %}</p>\n<p>In my opinion this describes that we <em>shouldn't</em> be using a modal for wizards and instead provide a navigational pattern linking to pages sequentially; allowing the user to return to steps easily. This is also relevant to their following comment about lessening a user's effort. The point of designing an experience is to do just that. So, asking if the user is working with an agent could be a question exposed as a checkbox while filling out the form for a open house. That selection could be saved for subsequent open house requests. This simplifies the experience instead of disrupting the user with a question the system forgot to ask when it was more relevant.</p>\n<p>Speaking of the real estate industry, many web sites of this genre use a <a href=\"https://mdbootstrap.com/docs/standard/components/lightbox/\">lightbox</a> (ie. a carousel in a modal) due to the need for viewing a set of high quality images of a property. Without diving too deeply into <a href=\"https://shouldiuseacarousel.com/\">the decision to use a carousel</a>, the decision to use a modal is debateable. Full screen images could be provided as separate urls; making the photos easily sharable to other interested parties. Closing the experience could return the user back to the listing; just like a close button would. Browser navigation could also assist in wayfinding between photos and the original listing along with common carousel-like controls.</p>\n<h2>Accessibility</h2>\n<p>Attempting to make a modal fully accessible is a serious challenge. For example, you'll need to indicate that a new area of the page has been created, and focus must enter this area and be trapped for the duration of the experience until the task is complete. At which point, focus must return to the initial trigger of the modal. What actually receives focus (a child of the modal or the modal itself) is actually <a href=\"https://www.scottohara.me/blog/2019/03/05/open-dialog.html\">up for debate</a>; making a recommendation for it unclear. Additionally, events should not occur behind the modal which is easier said than done. Even with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\">the new <code>inert</code> attribute</a>, ensuring that other elements are still accessible could be tricky with the introduction of third-party resources that need events outside of the modal.</p>\n<p>As you might imagine, things become increasing difficult with <a href=\"https://github.com/w3c/aria-practices/issues/1241\">more modals</a> added to the experience. How to juggle focus? What the screen reader should announce? How to navigate between these popups?</p>\n<p>Even <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\">the native <code>&lt;dialog/&gt;</code> element</a> <a href=\"https://a11y-dialog.netlify.app/advanced/dialog-element/\">isn't shipped fully accessible</a>. At the moment, we can't even trust the browsers to support accessibility like other elements do. There's no avoiding some amount of custom behavior which is bound to have variations of approach and unintended feature gaps.</p>\n<h2>As a design constraint</h2>\n<p>The modal should not live at the top of the designer's toolbox. Make it a design constraint instead. Explore possible workflows without the modal and see how far you can get. I have confidence that most experiences can avoid the modal pattern for something more useful.</p>\n<p>It's important to truly design with emphathy when crafting an experience. Perhaps, we should provide a double confirmation pattern before choosing some design directions? Imagine that!</p>\n",
            "url": "https://blog.damato.design/posts/no-more-modals",
            "title": "No more modals",
            "summary": "Please just make a new page.",
            "image": "https://blog.damato.design/og-images/no-more-modals",
            "date_modified": "2022-06-05T00:00:00.000Z"
        },
        {
            "id": "ondark-virus",
            "content_html": "<p>The &quot;ondark&quot; virus is infecting token names in the design systems community everywhere. I've tried providing recommendations in token related posts and replies before. However, it seems this approach is becoming more wide-spread so I want to give it one final try to describe the problem with this naming scheme and provide some help with prevention.</p>\n<p><strong>This isn't about what a token name should include, it's about what it shouldn't.</strong></p>\n<h2>Prognosis</h2>\n<p>Imagine you have a UI which is primarily light colored. Perhaps a white background with nearly black text. There's a section in this UI that you want to have a stark contrast with the rest of the page. In this section, you have some text lockup and a call-to-action button. The button has all the same properties that other buttons in the system have, except it's located on this dark background.</p>\n<p>Most folks might have a button prepared specifically for this scenario. We might even provide a configuration for when this happens in code. Under the hood, that might reference different tokens which point to specific <code>ondark</code> values sent to the page.</p>\n<p>&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;ondark&quot; src=&quot;https://codepen.io/fauxserious/embed/gOjWGaz?default-tab=html%2Cresult&amp;editable=true&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;\nSee the Pen &lt;a href=&quot;https://codepen.io/fauxserious/pen/gOjWGaz&quot;&gt;\nondark&lt;/a&gt; by Donnie D'Amato (&lt;a href=&quot;https://codepen.io/fauxserious&quot;&gt;@fauxserious&lt;/a&gt;)\non &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.\n&lt;/iframe&gt;</p>\n<p>This works fine for this section which covers just the background, text, and button.</p>\n<p>Soon after, a request comes in to show a comparison table in this area; showcasing the benefits of the product of feature. In the current system, you'd need tokens to describe all of the borders of the table. Maybe you have something generic that targets borders in this area. But unfortunately, you might see a problem begin to appear.</p>\n<p>The problem is that for every UI element that <em>might</em> appear in this section in the future, you'd need to define an entirely new set of tokens to describe the color for that UI. This is especially exhausting since you've already defined tokens semantically for all of these things in the &quot;default&quot; environment. To fully cover the dark area, you'd need to <strong>double the amount of token names</strong> to include the additional &quot;ondark&quot; (or &quot;inverse&quot;, &quot;reverse&quot;, &quot;contrast&quot;) infix.</p>\n<p>No bueno.</p>\n<h2>Remedy</h2>\n<h3>Semantic tokens</h3>\n<p>The first step is fully investing in semantic tokens. <a href=\"../tokens-as-intents\">I've called them &quot;intents&quot;</a> in the past to further enforce the expectation that the name describes purpose over value. We're talking about token names like <code>--button-background</code> or <code>--input-focused-critical-border-color</code> which give information about the component or pattern and the property being influenced. In no way does it give any information about what the value of this color is. The more you avoid encoding the value in the name, the more flexible your system will be with the opportunity for that color to change in the future.</p>\n<p>This extends to any token; describe the purpose and avoid the value when naming.</p>\n<h3>Scoped themes</h3>\n<p>A theme is the collection of values assigned to semantic tokens. The semantic tokens are a contract that should have permanence and meet expectations of folks building UI over time. These are the tokens that appear on the <em>left-side</em> of a theme. The values that would appear on the <em>right-side</em> can and should have a separate stakeholder, most likely one that represents a brand. I recommend avoiding managing both sides if possible to not introduce subjective bias or confusion in token naming.</p>\n<p><img src=\"/images/token-responsibility.png\" alt=\"Be responsible for the left side theme assignment, avoid the right side\"></p>\n<p>I cannot stress enough, <strong>how values are assigned on the right-side does not matter</strong>. Values can be referenced, hard-coded, computed, or otherwise because they should never be used directly within the UI. A color palette is influenced by the brand and determines what <code>--brand-blue-500</code> means. Here, the brand is responsible for curating the right-side values and how they are finally assigned to the left-side.</p>\n<p>The design system team is responsible for maintaining consistency on the left-side; that's it. They should only focus on the semantic token names for those values to be assigned and how they might support describing the experience at scale.</p>\n<p>{% aside &quot;warning&quot; %}\nWhile I advocate for design systems folks to be hands-off for the right-side of the theme, it is not possible to be completely ignorant of what happens there. We should be providing guidance on best practices when curating the other side, especially in terms of accessibility. We should provide feedback when people attempt to choose color combinations that have low contrast or font-sizes that are illegible.</p>\n<p>And certainly when posed with limited resources, it's entirely possible for the design system team to manage both sides. But if you can avoid it, it's one less thing to be responsible for.\n{% endaside %}</p>\n<p>{% aside %}\nNote that for simplicity the idea of &quot;dark-mode&quot; is also well represented by providing a dark theme. A user preference for &quot;high-contrast mode&quot; is asking for a high-contrast theme. The mode is the user preference. The theme is a collection of value assignments that aim to satisfy the mode.\n{% endaside %}</p>\n<p>Now for the key insight — instead of the dark area and the light colored page needing to be informed by a single theme, <strong>think of the dark area as an entirely separate theme</strong>. In this way, the values that represent <code>--button-background</code> can change depending on scope.</p>\n<p>&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;ondark&quot; src=&quot;https://codepen.io/fauxserious/embed/jOpmGbR?default-tab=html%2Cresult&amp;editable=true&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;\nSee the Pen &lt;a href=&quot;https://codepen.io/fauxserious/pen/jOpmGbR&quot;&gt;\nondark&lt;/a&gt; by Donnie D'Amato (&lt;a href=&quot;https://codepen.io/fauxserious&quot;&gt;@fauxserious&lt;/a&gt;)\non &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.\n&lt;/iframe&gt;</p>\n<ul>\n<li><strong>No additional configuration at the component level.</strong> You don't need to remember or even know that this button is on a &quot;dark&quot; surface.</li>\n<li><strong>No additional token names.</strong> Self explanatory, naming is hard and scaling those names is even harder.</li>\n</ul>\n<p>Now the only name you need is the one describing the theme; &quot;dark&quot;.</p>\n<h2>Prescription</h2>\n<p>This still requires the design token values to be curated to account for a dark UI. If you worried about defining an entire new theme worth of tokens, start small. Only define the ones you need at first; maybe background, text and button. At some point you might have the resources to define it all and then you'll have an entire new theme to try.</p>\n<p>I've considered going farther, specifically with surfaces that expect to demonstrate feedback (eg., warning banner). You might imagine this banner similar to the dark section above with a text lockup and action to take. I say if you have the resources to prepare this as a theme, go for it! You'll be better prepared for when code samples might appear within the notification. Otherwise, you'll need to be highly restrictive to the kinds of content that appear within various colored surfaces. And we all know how much designers love restrictions. 😉</p>\n<p>It's possible to over compensate. As an example I wouldn't recommend creating a separate theme for inline feedback elements. Badges, notification dots, and error text can and should also be handled semantically inside a normal theme. Just think of a newsletter signup in a dark section; it should have an error message if the input isn't valid. If you think in surfaces, like a sub-artboard, then you'll better identify when a scoped theme would help.</p>\n<p>This new recommendation also requires that the system delivering themes be flexible enough to request more than one. I think there's an opportunity for some optimization here as well; where we statically analyze the page for tokens used within scopes and only serve what's needed. However, to start you could just import the theme when a scope is added. The benefit of this is if the scoped theme hasn't been included or the scope hasn't been applied, it'll fallback to the base theme values instead.</p>\n<pre><code class=\"language-html\">&lt;body&gt;\n    &lt;button&gt;This button has a black background&lt;/button&gt;\n    &lt;section data-theme=&quot;dark&quot;&gt;\n        &lt;!-- Missing definition for the dark theme, \n        everything here inherits from the light theme --&gt;\n        &lt;button&gt;This button has a black background&lt;/button&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n</code></pre>\n<h2>Recovery</h2>\n<p>If you're already using the &quot;ondark&quot; naming convention, it'll be hard to move to this new system. That goes for any semantic token that was expected for public use. Deprecating tokens at the semantic tier is very difficult because they could be used anywhere across the platform.</p>\n<p>Luckily there's a path forward:</p>\n<ol>\n<li>First, you can setup the scopes and apply within the UI in the appropriate locations, making note of the UI elements that exist in those locations.</li>\n<li>Then define the values for those themes, perhaps reading from the &quot;ondark&quot; values.</li>\n<li>Start serving those themes to the pages, which will be inert at first because no UI elements should reference the tokens.</li>\n<li>Finally, either remove the component configuration that applies the dark theme or remove the &quot;ondark&quot; token assignments for the more generic tokens.</li>\n<li>You can now safely remove the &quot;ondark&quot; token virus from your system.</li>\n</ol>\n<p>I wish you best of luck in your path toward recovery.</p>\n<hr>\n<p><strong>EDIT (2023-01-12):</strong> <a href=\"https://desandro.com/\">Dave</a> posted a great question as a follow-up and it deserves addressing.</p>\n<p>{% quote &quot;https://twitter.com/desandro/status/1613568348331155456&quot; &quot;Dave DeSandro&quot; %}</p>\n<p>I'm curious how you would accommodate session-level Dark Mode? Does the hero theme stay dark, or maybe sub-themes like <code>data-theme='inverted'</code></p>\n<p>{% endquote %}</p>\n<p><a href=\"https://twitter.com/donniedamato/status/1613583101493481487\">My reply</a> was half-joking but in seriousness, the answer is to continue leaning into semantic naming at the <em>scope</em> level. For the purposes of this demonstration, it was more helpful to use the word &quot;dark&quot; to further cement what was happening within the scope. In practice, the scope should be described with some meaning or purpose for the change in scope over expected appearance. For the examples above, the &quot;light&quot; theme could instead be the &quot;base&quot; theme as it is meant to be the default. The &quot;dark&quot; theme could be &quot;feature&quot; theme as it is meant to highlight features (in our examples).</p>\n<pre><code class=\"language-html\">&lt;body data-theme=&quot;base&quot;&gt;\n    &lt;button&gt;Login&lt;/button&gt;\n    &lt;section data-theme=&quot;feature&quot;&gt;\n        &lt;button&gt;Click here&lt;/button&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n</code></pre>\n<p>This way user preferences could be read to determine what values are applied to which scope.</p>\n<pre><code class=\"language-css\">/* no-preference */\n[data-theme=&quot;base&quot;] {\n  /* light colored assignments */\n}\n\n[data-theme=&quot;feature&quot;] {\n  /* dark colored assignments */\n}\n\n\n@media (prefers-color-scheme: light) {\n  [data-theme=&quot;base&quot;] {\n    /* light colored assignments */\n  }\n\n  [data-theme=&quot;feature&quot;] {\n    /* slight contrast to light assignments as needed */\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  [data-theme=&quot;base&quot;] {\n    /* dark colored assignments */\n  }\n\n  [data-theme=&quot;feature&quot;] {\n    /* slight contrast to dark assignments as needed */\n  }\n}\n</code></pre>\n<p>If you want to be more efficient, only serve the user-preference when it is set.</p>\n<pre><code class=\"language-html\">&lt;!-- first stylesheet is no-preference --&gt;\n&lt;link href=&quot;default.css&quot; rel=&quot;stylesheet&quot; /&gt;\n&lt;link href=&quot;light.css&quot; rel=&quot;stylesheet&quot; media=&quot;(prefers-color-scheme: light)&quot; /&gt;\n&lt;link href=&quot;dark.css&quot; rel=&quot;stylesheet&quot; media=&quot;(prefers-color-scheme: dark)&quot; /&gt;\n</code></pre>\n<p>As you can see, things get complicated when you are including user preference alongside the scoped themes but &quot;ondark&quot; is definitely not solving this. For scoped themes, it's complex but not impossible. During the first pass, I recommend leaving user preference out to keep the execution simple but plan for it in a future implementation.</p>\n<p>If it was only as easy as <code>body { filter: invert(1); }</code>!</p>\n",
            "url": "https://blog.damato.design/posts/ondark-virus",
            "title": "Ondark virus",
            "summary": "While it might seem intuitive at first, naming your tokens this way is bad for your health.",
            "image": "https://blog.damato.design/og-images/ondark-virus",
            "date_modified": "2023-01-12T00:00:00.000Z"
        },
        {
            "id": "spacing-solved",
            "content_html": "<p>Design tokens for color and typography are fairly common for design systems. In particular, color token naming has finally gotten some traction by thinking semantically. In other words, not naming the color based on the value but the intent to use. Typography is getting some traction here as well; where naming is done by use. This tends to be easier to understand since a type style is composed of many different properties.</p>\n<p>Spacing, on the other hand, has been locked into the original token naming scheme where the name of the token relates to the value of space; not the use. Tokens are either named using T-shirt sizing or numbers with a scale of several to use.</p>\n<p>The importance of using semantic tokens is to limit the decision making for the designer. The designer should focus on crafting the experience in a wireframe-like mindset. Color, typography, and other styles are noise that distracts from solving user problems. The design system should have the guidance to make clear decisions and reduce the noise.</p>\n<p>So the question is, how do we give meaning to spacing tokens?</p>\n<h2>Relationships</h2>\n<p>The <a href=\"https://www.nngroup.com/articles/gestalt-proximity/\">Gestalt principle of proximity</a> describes that elements that are close to each other are meant to be considered more related to each other than elements more far away. This is the principle we as designers are implementing when we decide the amount space used between elements.</p>\n<p>But how do we choose exactly how much space? Often times it's looking at the whole page and picking what <em>feels right</em> with a few constraints (like using multiples of 8 for the values). However, the system cannot give guidance about <em>feelings</em>, it should have clear reasons as to why to choose an amount of space.</p>\n<p>The way I've identified an amount of space is by social relationships. <a href=\"https://en.wikipedia.org/wiki/Six_degrees_of_separation\">Degrees of separation</a> describes the way that entities are social connected to each other. We can think of parent-children or siblings that live in the same house to be 1 degree of separation from each other, while next door neighbors might be 2 degrees.</p>\n<p>{% aside %}</p>\n<p>I've explored the idea of describing space as degrees briefly and it doesn't fit well. While there's enough friction with the naming scheme to have users pause and read the guidance, it's still using a scale to determine the space.</p>\n<p>{% endaside %}</p>\n<p>Now, if we consider these entities as elements of an interface, the parent-child and sibling relationships translate. The parent <code>&lt;ul/&gt;</code> element and its children <code>&lt;li/&gt;</code> elements can have 1 degree of separation; meaning they are very closely related. While the <code>&lt;ul/&gt;</code> element and its <code>&lt;body/&gt;</code> ancestor element may not be as close.</p>\n<p>Keep this in mind as we review the next topic; density contexts.</p>\n<h2>Density contexts</h2>\n<p>I spent a great deal of time gazing at the first image in <a href=\"https://medium.com/eightshapes-llc/space-in-design-systems-188bcbae0d62\">Nathan Curtis's post about Spacing in Design Systems</a>. Here's the image from the post:</p>\n<p><img src=\"/images/nathan-curtis-space.png\" alt=\"Example cards\"></p>\n<p>If we were to use the mental model we've come up with above, the tags within each card are 1 degree of separation apart from each other; in this comp a value of 8. The paragraph above is different from the tags, or in the next house. That can be described as 2 degrees of separation between the paragraph and tags.</p>\n<p>All of this works fairly well within the card, describing all the relationships of detail and space within. Where this is fuzzy is the cards themselves; each card is clearly an indentical sibling of the next and by our rules should have 1 degree of separation between. That was previously shown inside the card as 8, but here it is 32 and this <em>feels</em> correct, but how do we describe this?</p>\n<p>The answer is density contexts.</p>\n<p><strong>Every time we dive deeper into the content of the page, it is an opportunity to reduce the density of the area</strong>. This would reduce the amount of space around and between elements but maintain the relationships we aim to describe.</p>\n<p>Let's say, we start at the <code>&lt;body/&gt;</code>. Lots of space between sections of the page because they are very unrelated. Maybe one section includes a card layout like the one above. We then shift the density down one notch and tighten the space between the children in this area. Going down into a card, we shift another notch down and tighten further showing that this content is most closely related.</p>\n<p>So each new density context defines the way space is used within that context. If you want less space between items because you want to show a close relation; add a new density shift and all the space within will reduce. This allows for the space between each card and the space between each tag to both be 1 degree of separation but the resolved value to be different because we are in a new density context.</p>\n<p>Now the designer chooses the density context for this particular experience but what about the actual token names? How do we give meaning to the locations where the values should be expressed?</p>\n<h2>Padding and gap</h2>\n<p>We can think of padding as the <strong>space around</strong> an element and the gap as <strong>space between</strong> elements. In the cards referenced within the image above, we can use these definitions to describe the spacing used in most of the elements.</p>\n<ul>\n<li>Spacing between the tags is a gap.</li>\n<li>Spacing between the headings (video and supernova) is a gap.</li>\n<li>Spacing between the headings, paragraph, tags, and the button is a gap.</li>\n<li>Spacing between each card is a gap.</li>\n<li>All other spacing is padding.</li>\n</ul>\n<p>Each time the value of the gap changes signifies a density shift downward. First we start at a density where the gap equals 32, then we shift down (within the card) to a gap that equals 16, and finally we shift once more (inside each part of the card) where the gap equals 8.</p>\n<p>So do we just use token names that describe padding and gap? Almost.</p>\n<h2>Tying it together</h2>\n<p>Going back to degrees of separation, I realized that trying to define larger degrees of separation would be difficult, especially when naming them with meaning. However, after compleing the exploration and identifying that there are really only two places where we need to apply space (around and between), that means I could reduce the number of spacing tokens down to 2 for most usage. That resulted in the following two names.</p>\n<ul>\n<li><code>--spacing--near</code>: often used to describe the spacing between elements showing close relation.</li>\n<li><code>--spacing--away</code>: often used to describe the spacing around elements showing less relation.</li>\n</ul>\n<p>I use near and away because there are areas where we want to use these values that aren't confined to the guidance above. Buttons are the best example, where we want the space on the horizontal axis to be greater than the vertical. Setting <code>button { padding: var(--spacing--near) var(--spacing--away) }</code> doesn't break the mental model as much as if we used the word &quot;gap&quot; within the padding values for the button.</p>\n<p>And that's it, you can create an interface in terms of relationships and density systematically with a very small number of design decisions with clear guidance. Below is a Codepen where I've recreated the card using this approach:</p>\n<p>&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Spacing context&quot; src=&quot;https://codepen.io/fauxserious/embed/dyJgzBM?default-tab=result&quot; frameborder=&quot;no&quot; loading=&quot;lazy&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;\nSee the Pen &lt;a href=&quot;https://codepen.io/fauxserious/pen/dyJgzBM&quot;&gt;\nSpacing context&lt;/a&gt; by Donnie D'Amato (&lt;a href=&quot;https://codepen.io/fauxserious&quot;&gt;@fauxserious&lt;/a&gt;)\non &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.\n&lt;/iframe&gt;</p>\n<p>{% aside %}</p>\n<h3>How to make density contexts in CSS</h3>\n<p>The approach to actually create density contexts in CSS is done by nesting CSS selectors and changing a variable at each level and recalculating what the spacing tokens mean at each.</p>\n<pre><code class=\"language-scss\">$attr-sel: &quot;[data-density-shift]&quot;;\n$levels: 4;\n\n@function fib($n) {\n  @return if($n &lt;= 1, 1, fib($n - 1) + fib($n - 2));\n}\n\n@mixin vars($n) {\n  --spacing--away: calc(\n    #{fib($n + 1)} * var(--density, 0.5rem)\n  );\n\n  --spacing--near: calc(\n    #{fib($n)} * var(--density, 0.5rem)\n  );\n}\n\n\n@for $i from 1 through $levels {\n  $nest-sel: if($i == 1, &quot;body&quot;, selector-nest($nest-sel, $attr-sel));\n\n  #{$nest-sel} {\n    @include vars($levels - $i);\n  }\n}\n</code></pre>\n<p>I'm using the <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\">Fibonacci sequence</a> for the steps since designers love that <a href=\"https://www.nngroup.com/articles/golden-ratio-ui-design/\">golden ratio in layout</a>.</p>\n<p>{% endaside %}</p>\n<h2>+ Typography</h2>\n<p>You can take this one step further by including typography. If you consider that each use of typography is included into a category, the type scale could ramp based on the density instead of in isolation. This allows for a clearer relationship between typography and space as many designers strive for through vertical rhythm and a grid system.</p>\n<p>If you identify categories of typography with proper guidance for each you can connect the density to the category. Body text becomes larger in hero images and smaller in general areas. Perhaps even smaller for data-dense interfaces like tables. Each area uses the same type style but the density changes the size.</p>\n<h2>Real world examples</h2>\n<p>If you're interested in how this all works in a real site or system, <strong>the <a href=\"https://damato.design\">damato.design</a> family of sites all use the above approach to determine spacing + typography</strong>, including this site. I will admit determining where to add the density shift is the bigger challenge but what helps is to identify where the <code>--spacing--near</code> and <code>--spacing--away</code> values should go first, then determine if the density should shift as the second step.</p>\n<p>One more note, in the <a href=\"https://system.damato.design\">DAMATO Design System</a>, we do not have many typography categories; only display, heading, standard, and detail. This restricts the number of heading levels to only display and heading which loses content hierarchy unless shifting density. We could include more typography categories to describe a few additional levels (title, subtitle, etc) but opted to exclude for simplicity.</p>\n",
            "url": "https://blog.damato.design/posts/spacing-solved",
            "title": "Spacing solved",
            "summary": "Shifting traditional approaches to something more semantic.",
            "image": "https://blog.damato.design/og-images/spacing-solved",
            "date_modified": "2022-05-09T00:00:00.000Z"
        },
        {
            "id": "spicy-specifications",
            "content_html": "<p>Figma's design conference <a href=\"config.figma.com\">Config</a> just ended and one of the biggest announcements is the introduction of <a href=\"https://twitter.com/figma/status/1671563489457090560\">Variables</a>. The reaction from the community is a mix of emotions. While many people were expecting Design Tokens, some can see the clear benefits of Variables while others are skeptical about perceived defiance to existing specifications. We'll explore the current state of specifications for Design Tokens across the community and how Variables come into play.</p>\n<h2>Token specifications today</h2>\n<p>These are a few popular or relevant specifications that aim to describe the shape of a Design Token. While I haven't completed an exhaustive search through existing systems with their own formats, the following examples will be enough to illustrate the current state of affairs.</p>\n<h3>Design Tokens Community Group</h3>\n<p>The <a href=\"https://www.w3.org/community/design-tokens/\">Design Tokens Community Group</a> (DTCG) is a collection of Design Tokens stakeholders from around the community representing design and development tools along with experts with working knowledge and experience in maintaining token libraries. The group has made some strides in a specification but it is very far from complete. The expectation is that all tools should adhere to this specification so that our representation of Design Tokens can be shared across tools. If there are deviations, a tool may skip a definition or fail. Here's a basic example of a Design Token meant to describe a token <code>color-red-500</code>.</p>\n<pre><code class=\"language-json\">{\n    &quot;colors&quot;: {\n        &quot;color-red-500&quot;: {\n            &quot;$type&quot;: &quot;color&quot;,\n            &quot;$value&quot;: &quot;#f00&quot;,\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://tr.designtokens.org/format/\">Reference</a></p>\n<p>This is the core of the DTCG specification; a nested object with unique names. At the lowest nesting there should exist <code>$type</code> and <code>$value</code> keys; where the <code>$</code> denotes a special key that is meaningful for tools to read. In the example, the tool should know that the <code>#f00</code> is a color value and handle it accordingly. There are a few other keys and other more complex configurations, but this is the foundation that everyone is expected to follow.</p>\n<h3>Tokens Studio</h3>\n<p><a href=\"https://tokens.studio/\">Tokens Studio</a> (built from a plugin project called <a href=\"https://jansix.at/resources/figma-tokens\">Figma Tokens</a>) has had a longer history of use (<a href=\"https://github.com/tokens-studio/figma-plugin/releases/tag/0.1\">Jun 2020</a>) than the first agreement provided by the DTCG (<a href=\"https://www.w3.org/community/design-tokens/2021/04/17/first-editors-draft-shared-with/\">Apr 2021</a>). This was to fill needs that were not solved within Figma at the time. Therefore, their specification is slightly different.</p>\n<pre><code class=\"language-json\">{\n    &quot;colors&quot;: {\n        &quot;color-red-500&quot;: {\n            &quot;type&quot;: &quot;color&quot;,\n            &quot;value&quot;: &quot;#f00&quot;\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://docs.tokens.studio/tokens/json-schema#multiple-files-storage\">Reference</a></p>\n<p>Note that the above is for a multi-file storage configuration. There are special keys expected at the first nesting level when using single-file storage. Also, note the absence of <code>$</code> from the <code>type</code> and <code>value</code> which is not to DTCG specification today. <a href=\"https://twitter.com/mikekamminga/status/1671572520955256849\">Mike Kamminga, Tokens Studio CEO, says</a>:</p>\n<blockquote>\n<p>We have been transitioning to fully support the DTCG proposal.</p>\n</blockquote>\n<p>Importantly, to support more complex customer needs, Tokens Studio has included additional features that the DTGC specification has not yet provided. Continued from the previous quote:</p>\n<blockquote>\n<p>...we do fill some gaps where the proposed spec doesn't provide solutions yet.</p>\n</blockquote>\n<p><a href=\"https://github.com/tokens-studio/resolver-spec/blob/master/schema.json\">An example of filling gaps</a> comes in the form of token <a href=\"https://tokens.studio/tools/resolvers\">resolvers</a> which aim to describe complex relationships and conditionals which compute token values. While <a href=\"https://github.com/design-tokens/community-group/issues/210#issuecomment-1553011810\">this has been suggested within the DTCG discussions</a>, there are no official recommendations.</p>\n<h3>Specify</h3>\n<p><a href=\"https://specifyapp.com/\">Specify</a> is a design token management tool that has been around before the DTCG and has had <a href=\"https://web.archive.org/web/20190305103656/https://specifyapp.com/\">integrations with Sketch</a> before Figma. A few weeks ago, <a href=\"https://specifyapp.com/blog/specify-design-token-format\">they announced</a> the Specify Design Token Format (SDTF). An excerpt from their example is below:</p>\n<pre><code class=\"language-json\">{\n    &quot;colors&quot;: {\n        &quot;color-red-500&quot;: {\n            &quot;$type&quot;: &quot;color&quot;,\n            &quot;$value&quot;: {\n                &quot;default&quot;: {\n                    &quot;model&quot;: &quot;hex&quot;,\n                    &quot;hex&quot;: &quot;#f00&quot;,\n                    &quot;alpha&quot;: 1,\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://specifyapp.com/blog/specify-design-token-format\">Reference</a></p>\n<p>The standout part of the above is the <code>$value</code> which is more descriptive than the others, containing more information about the value than only the string. As of today, this does not follow the DTCG specification but perhaps that's by design. <a href=\"https://twitter.com/nclsndr/status/1669374223914024962\">Nicolas André, Specify Senior Software Engineer, says</a>:</p>\n<blockquote>\n<p>The SDTF is not a file. The SDTF is designed to be a transport format between APIs that would eventually being configured by humans. To interact with it, we’ll use dedicated APIs lowering the underlaying complexity.</p>\n</blockquote>\n<p>So the expectation here is that there are additional external systems that exist between APIs that expect this format.</p>\n<h2>Why not Design Tokens?</h2>\n<p><a href=\"https://twitter.com/pwnies/status/1671597246113280001\">Jacob Miller, Figma Product Manager, says</a>:</p>\n<blockquote>\n<p>Our reasons for naming it variables was primarily to align with development. Variables, much like css variables, is not just for design tokens, it's also for conditional logic, string translations, etc.</p>\n</blockquote>\n<p>{% aside %}\nI disagree with the comparison to CSS, as <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">CSS Custom Properties</a> are meant for style as Design Tokens are. I believe it would have been more accurate to compare using another language like JavaScript. Though I imagine the comparison was done to suggest how you might use Variables to result in style.\n{% endaside %}</p>\n<p>The important takeaway here is that Variables can be used to describe our idea of Design Tokens but also to support additional needs which will most likely exist outside Design Token expectations. A clear example of this is content substitutions for localization. Design Tokens were not created to support this foundationally but Variables, <em>uniquely defined by Figma</em>, can.</p>\n<p>For reference here is an example of a Figma Variable:</p>\n<pre><code class=\"language-json\">{\n   &quot;id&quot;: &quot;&lt;FIGMA_INTERNAL_VARIABLE_ID&gt;&quot;,\n   &quot;name&quot;: &quot;color-red-500&quot;,\n   &quot;resolvedType&quot;: &quot;COLOR&quot;,\n   &quot;valuesByMode&quot;: {\n    &quot;&lt;FIGMA_INTERNAL_MODE_ID&gt;&quot;: &quot;#f00&quot;\n   }\n}\n</code></pre>\n<p><a href=\"https://www.figma.com/plugin-docs/api/Variable\">Reference</a></p>\n<p>This is not a Design Token but Figma's proprietary format meant for use within the Figma ecosystem. <a href=\"https://github.com/figma/plugin-samples/blob/c91a1e2e02d6c6f100d7651d055ef84725adbb5d/variables-import-export/code.js#L136\">Based on the official plugin built to transform Variables into Design Tokens</a>, the <code>valuesByMode</code> will store several values by a unique identifier that relates to a mode. The mode could be light, dark, dense, Spanish, or many others and the value for this Variable can differ depending on the mode.</p>\n<p>{% aside %}\n<a href=\"https://github.com/design-tokens/community-group/issues/210\">Jacob proposed</a> how modes might look in the official DTCG specification. The discussion is one of the largest within the group and is currently unresolved.\n{% endaside %}</p>\n<h2>A deliberate choice</h2>\n<p>Figma has intelligently chosen the word &quot;Variable&quot; to opt out of following the specification to support its product features but also offers the import/export of the DTCG specification where appropriate against its Variables. I believe this is the correct direction as the DTCG learns from existing patterns. This allows Figma to go far beyond the responsibility of the specification in ways Design Tokens were never meant to be used.</p>\n<p>You could argue that Token Studio and Specify are also behaving in the same way. However, I fear their current offerings are confusing when compared with the DTCG. Again, Figma made a conscious decision to create a unique ecosystem to allow for new features to be built; <strong>Variables are not Design Tokens</strong>. This is a subtle but important distinction as the other products create their own variations on top of an incomplete specification using conflicting methodologies. In other words, one cannot use a fully featured Tokens Studio file within Specify due to the incompatibility between specifications.</p>\n<p><img src=\"/images/design-tokens-spiderman.jpg\" alt=\"Will the real design tokens please stand up?\"></p>\n<p>I believe the root of the problem is using the name Design Token for experimental approaches while a group aims to define what it means to be a Design Token. These other formats do not follow the specification in small and large ways and are therefore not accurate in describing Design Tokens as we expect them to be used in the community universally. Rebranding these novel approaches as something else for future features (as Figma has done) would make the expectations and responsibilities of Design Tokens more understandable to the community moving forward.</p>\n<p>I have empathy for the pioneers like Tokens Studio and Specify; existing before the specification makes this exceptionally challenging for them, borderline unfair. What Specify has done is a good start; creating a branded &quot;flavor&quot; of Design Tokens with the SDTF. I'd recommend Token Studio do something similar such as TSTF. In this way, it can be perceived that these approaches are Design Token <em>adjacent</em> instead of wholly accurate to the community specification.</p>\n<p>Let me be clear, I support the advancements that all of these companies are providing for the Design Tokens community. They are heavily influencing the direction of the specification and we could not be where we are today without this work. I am being critical of what a Design Token is expected to be as it currently depends on where you get your tokens from. I have confidence that alignment will come, it's simply a noisy time to get started.</p>\n",
            "url": "https://blog.damato.design/posts/spicy-specifications",
            "title": "Spicy specifications",
            "summary": "Making sense of several solutions for design decisions aimed to help our community.",
            "image": "https://blog.damato.design/og-images/spicy-specifications",
            "date_modified": "2023-06-23T00:00:00.000Z"
        },
        {
            "id": "terminal-career",
            "content_html": "<p>In my teens, I was involved in many extra-curricular activities in high school. I was president of the art club for all 4 years and lead for the school's robotics team. While I wasn't officially part of the class counsel, due to my volunteer work especially with the homecoming floats, I was given a new title by my peers over 20 years ago; <strong>Design Engineer</strong>.</p>\n<p>I didn't think much of it then but after being fully immersed in both design and engineering, I resonate with that title. Not only do I consider how an experience could be constructed; I actually construct it. That's something that's always been important to me. Just having the idea wasn't good enough, I needed to <em>show</em> people the concept and it wouldn't be complete unless it was the real deal.</p>\n<h2>Getting paid</h2>\n<p>It's one thing to find your passion, it's another thing for that passion to put bread on the table. My passion didn't start doing that until after graduating college. My first engineering job was officially as the sole frontend engineer for a finacial tech company but they also didn't have a designer. My co-workers saw how quickly I could prototype a design in <a href=\"https://codepen.io\">CodePen</a> and made it easy to collaborate, so they gave me the responsibility for the design of the platform too. That's where I took on both roles but also had both titles; Product Designer &amp; Frontend Engineer.</p>\n<p>After that role, I was hired at a real estate startup as a Frontend Engineer. The codebase was massive, they were using a framework I've never seen, and my onboarding buddy was assigned to a totally different team working on the launch of what would become the most successful product on the platform. It was a sea of anxiety and I had a metric ton of imposter syndrome. However, as timing would have it, they also hired a new Director of UX and we were in many of the same onboarding groups. I raised the idea of joining their team to help with prototyping and better integration of design into code and after some formalities, that's how I became their first UX Engineer.</p>\n<p>I felt really relieved. Design was straightforward for me and I could ease my way into the codebase with small changes instead of feeling responsibility for the entire repository of code at once. Like many places, onboarding is not often crafted well because it's done once and the business has other higher priorities. More on that later.</p>\n<h2>Rainbows &amp; roses</h2>\n<p>Most of my first responsibilities were to prototype experiences to hand off for research studies. I quickly found that I was reusing the same assets over and over so I started making my own little library of components in CodePen. I could import files across pens by <a href=\"https://blog.codepen.io/documentation/url-extensions/\">appending the file type to the end of the url</a>. While there was an existing component library; these designs were often new and experimental. I needed my own collection of components that I could iterate on in isolation for these prototypes.</p>\n<p>Eventually, I became more comfortable with the codebase and found areas of improvement; especially when it came to CSS. I found out then that most engineers have difficulty with CSS. For me, CSS came naturally and I was able to do things that didn't seem possible for others. As one example, there was an ask from design to pin the footer to the bottom of our listing results. The listing results component was using a collection of CSS overrides on <a href=\"https://www.ag-grid.com\">AG Grid</a>, and the architecture of those overrides were outlined in a multi-page document. It was a big deal to even look at the project, let alone change it. The lead engineer for the frontend team told management a change like this would take 6 weeks.</p>\n<p>I made the changes over 6 days.</p>\n<p>Eventually, I was responsible for all CSS found on the platform. While I wasn't looking at every PR, I was always called into the room for large projects or complex experiences. The listing details page was one of my last large influences; which was one of the first places where I was able to use <code>display: grid;</code> and <code>position: sticky;</code> on a production site. I became responsible for the component library, as it eventually matured into a design system. By the end of my time, I was putting together the Design System team and looking into how we could support all the various frameworks being used with a singular source of truth.</p>\n<h2>Managing expectations</h2>\n<p>While I loved all the work I was involved in, there was one thing that made me leave; lack of recognition. Many people were promoted during my tenure; I've seen some people promoted 3 times during my 2+ years there. I was promoted only once and it was title change with a cost of living pay increase. A few months later we'd have a new CTO and start new tech hubs around the world. What happened? Why was I left in the cold when everyone else was shining?</p>\n<p>When I first became a UX Engineer, I was reporting under the design organization. The trouble here was that our Director of UX didn't have experience managing an engineer before. While this autonomy felt good to me, there was no career ladder. It wasn't clear what steps I needed to take to be promoted. After the director left, I was reporting to the principle designer who really didn't want to manage people.</p>\n<p>It was around this time the most senior frontend engineers were convincing me to come back into the engineering organization; right on the heels of the AG Grid work mentioned earlier. With some help from a new engineering manager willing to take me on, I moved back into the engineering organization. That manager was a huge help for my career because he understood my skills and influence and was able to be my voice in rooms I couldn't be in. He was the person who fought for my promotion, just before he was pushed out by management.</p>\n<p>I was reporting under a new manager then; someone who previously identified as a backend engineer. It felt like I was reporting under the design team again. For our mandatory 1:1, he'd ask how I was doing and I'd just telling what I was working on. He really couldn't give me much feedback because he didn't know my world. It wasn't really his fault; we were just paired poorly.</p>\n<p>When the new CTO came, we had a large restructuring which included new VPs of Engineering and other managers. After stating a case that I was a leader in the engineering organization, instead of receiving a promotion, I was restructured to report under one of the new VPs of Engineering. He really didn't have any time for me; trying to get up to speed on larger problems that were happening with hyper growth. After having 6 managers and the company removing the only one that really helped me; I decided if I was going to grow, it couldn't be here.</p>\n<h2>Picking a side</h2>\n<p>After I left, I joined the company I currently work for. Here, the management understands my value and every person I've reported to can hold in-depth conversations about my areas of interest and provides meaningful feedback. It's really what I've been looking for all along. There's only one problem:</p>\n<p>My role is Software Engineer.</p>\n<p>What's the difference? As a Software Engineer, you're expected to just live in the code. You rarely get a glimpse into the experience design side of feature development and instead need to be responsible for lots of different engineered systems; databasing, CI/CD, bundling configurations, along with feature development. All the problems you solve have to do with getting the computer to do what you want with commands. As a UX Engineer, you are responsible for the user experience. The problems you are solving are user needs and (in my opinion) much more interesting and impactful.</p>\n<p>I don't associate with being a Software Engineer. I associate with being a UX Engineer. However, because UX Engineering doesn't have the career support that Software Engineering does; I need to masquerade as something I'm not just to succeed in a field and have a possibility of promotion.</p>\n<p>This isn't only where I work. The industry has a clear problem supporting UX Engineering. Often a company has a UX Engineering role but reports under either design or engineering. This will often lead to the problems I've personally experienced shown above; lack of understanding about the role for existing management. On the other hand, folks picking a side can struggle because they don't have all the knowledge or experience as other folks with roles aligned to the larger organization. In other words, a designer probably knows all the hidden gems in Figma; while a UX Engineer might only know some intermediate techniques. Without clear responsibilities; the UX Engineer will look subpar to the Designer. In my case, I'm not able to effortlessly debug workflow problems for CI/CD and unfortunately that sounds like something a Software Engineer should do.</p>\n<p>This is all assuming you were hired. The interview process can be especially disappointing for a UX Engineer. We're often met with teams of Full Stack engineers who gang up on us to determine how much we don't know about the stack. What good does knowing how to use Auto Layout in Figma do if you can't even query a database?</p>\n<h2>Outlook</h2>\n<p>As an industry we should provide more support in UX Engineering. Even if there aren't defined management positions leading UX Engineering in an organization; existing leadership should recognize this role and help define a path with folks that have these specialized skills; highlighting their abilities. These are the folks who translate design into code <em>without</em> looking at the inspect panel. If you don't see the benefit of that; I'm afraid you really don't know how the web works.</p>\n<p>For my fellow UX Engineers out there, my heart goes out to you. I hope you're being recognized for the work you're doing; either by compensation, role, or fulfilling work. I wish I knew how to take the mask off. If you find out, please let me know.</p>\n",
            "url": "https://blog.damato.design/posts/terminal-career",
            "title": "UX Engineer, a terminal career",
            "summary": "A role that is near and dear to my heart and why I can't call myself one.",
            "image": "https://blog.damato.design/og-images/terminal-career",
            "date_modified": "2022-12-26T00:00:00.000Z"
        },
        {
            "id": "thanking-you",
            "content_html": "<p>The <a href=\"https://www.clarityconf.com/\">Clarity 2023 event site</a> was just launched and folks visiting may notice that <a href=\"https://www.clarityconf.com/person/donnie-damato\">I've been chosen to speak</a> at the event. In the following thoughts I'll attempt to describe why I believe this to be one of my most important achievements in my lifetime and express my deepest thanks for the upcoming opportunity.</p>\n<h2>Community</h2>\n<p>I've been a part of a large, worldwide, internet-based communities in the past. The Dance Dance Revolution (DDR) community found at <a href=\"http://www.ddrfreak.com/\">DDRFreak</a> was said to be one of the top ten largest <a href=\"https://www.phpbb.com/\">phpbb</a> forums at its peak. During my time there I was one of the most frequent users with over 14,000 responses across the forums. Eventually the moderators took notice of my helpfulness in the DDR Simulators forum; which aligned with my interest in custom charts at the time and made me a moderator of that forum; and later the New York forum. I introduced a &quot;contributor&quot; status which helped users add content to the site after moderator review. I was also heavily involved in planning DDR tournaments in the New York area; including the <a href=\"https://www.bloomberg.com/press-releases/2005-10-21/ziff-davis-digitallife-event-declared-a-major-hit-with\">DigitalLife</a> event held at the Jacob Javits Center in New York City for 4 years.</p>\n<p>I mention this because I become obsessed with the community that I'm included within, and it shows. I love sharing ideas which improve our collective interests. I love helping people find the answers they need in areas where we've struggled previously. Talking to people without having to ramp them up with additional context get to the root of the concept more quickly, and answers are more considerate when topical.</p>\n<p>With the decline of arcades, the DDR community has since transformed into something different that my old body simply cannot keep up with. I still play for fun and exercise and high recommend it if you've never tried. I thank the moderators and DDR community at large for the opportunity to play such a significant role in leading discussions and events over those years giving me the experience to lead future communities.</p>\n<h2>Lightbulb</h2>\n<p>I returned to college in 2012, after dropping out ten years earlier. One of the courses I was taking was meant to emulate a production studio. One of the facets of the course was to spread the word about the shows we were producing. I had experience building websites, so I took it upon myself to design and code the first version. One of the adjunct professors who was brought in was the founder of a media company and suggested that more people are watching on their smartphones. This meant that the site would need to be redesigned with this in mind.</p>\n<p>This was my lightbulb and set me on my career path. The challenge that came with figuring out how to make content accessible to as many people as possible was engaging for me. I've always loved complex problems and attempting to create a solution which was as aethetically pleasing as it was usable kept me deeply occupied in the practice.</p>\n<p>I thank <a href=\"https://www.linkedin.com/in/georgeweiner/\">George Weiner</a> who introduced me to responsive design.</p>\n<p>{% aside %}\nAnother part of my coursework required me to interview an expert in my field of interest. It was only fitting that I reach out to <a href=\"https://ethanmarcotte.com/\">Ethan Marcotte</a>. I thank Ethan for his revolutionary design thinking and entertaining my less than profound questions.\n{% endaside %}</p>\n<h2>Thinking in systems</h2>\n<p>I've written about <a href=\"../terminal-career\">my time as a UX Engineer</a> before but, this is where I found the practice of designing systematically. In previous roles, I was in complete control of the look of the website. This was the first time where the experience of the product is separated by its features and in order to maintain a consistent appearance for users; a system of reusable design would emerge. I went on to learn more about the practice of the design systems here; soaking in all the information I could and learning from the folks who came before.</p>\n<p>It was at this time that I attended my first Clarity conference in 2018. It was an incredible event with all of these folks facing the same challenges that I was. I knew these were my people. There's truly too many people to thank here, and I continue to learn from this community everyday.</p>\n<p>I thank <a href=\"https://joe.sh/\">Joe Schmitt</a> for the original concept of <a href=\"../tokens-as-intents\">Intents</a> (semantic tokens) as well as <a href=\"https://www.linkedin.com/in/maellegavet/\">Maëlle Gavet</a> and <a href=\"https://www.linkedin.com/in/jeniferv\">Jenifer Stewart</a> for accepting me as the first UX Engineer at Compass.</p>\n<h2>Speaking</h2>\n<p>Since being involved in the community I've been exploring solutions for systematic design strategies; how might designers communicate intention in ways past semantic tokens. This has taken me to write works such as <a href=\"https://gridless.design\">Gridless Design</a> and <a href=\"https://complementary.space\">Complementary Space</a> which aim to understand the reason why we make design decisions and how to break traditions for the sake of scalable, inclusive needs.</p>\n<p>In 2022, <a href=\"https://uxdx.com/\">UXDX</a> asked me to speak on design systems at their annual UXDX conference in New York. This was the first time I was recognized outside my community as an expert in design systems. I thank their team for the opportunity and I highly recommend their conference.</p>\n<p>Since then I've been on a few podcasts: <a href=\"https://www.youtube.com/@DesignSystemSocialClub/\">the Design System Social Club</a>, <a href=\"https://www.youtube.com/channel/UCIjuF15MXSRY7ii8AwLz5RA\">UX Untamed</a>, the <a href=\"https://www.designsystemspodcast.com/\">Design Systems Podcast</a>, the <a href=\"https://www.youtube.com/@DesignSystemSocialClub/\">Design Systems Field Guide</a>, and <a href=\"https://www.fuegoux.com/podcast\">Fuego UX</a>. All of these have been engaging discussions about design systems in real time and I thank all of these folks for inviting me on their shows.</p>\n<p>I'm looking forward to my first synchronous presentation about design systems at <a href=\"https://www.dsw.community/\">DSW Day</a> online. I thank <a href=\"https://www.linkedin.com/in/mariaeguiluz/\">Maria Eguiluz</a> for inviting me, for hosting DSW events for the past few years online and for <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7090013258123784192/\">an absolutely stunning post highlighting some of my achievements</a>.</p>\n<p>As mentioned at the top of this entry, I'm more than excited to be on stage at Clarity this year and want to thank <a href=\"https://www.jina.me/\">Jina</a> for the opportunity. It is at this point I feel like a true expert in this field that I devote so much effort to, able to sit at the table with folks I've looked to years ago.</p>\n<p><img src=\"/images/ds-config.jpg\" alt=\"Myself sitting with Jina, Nathan Curtis, Kaelig Deloumeau-Prigent, and Connie Chen. Lunchtime at Config 2023\"></p>\n<h2>Family</h2>\n<p>I most certainly need to thank my family for giving me the runway to have an art-adjacent career. Dropping out of college can be a concerning decision for parents but ultimately a path that put me where I needed to be. They still don't understand what I do but that's ok. They see the passion and that I'm living well on the results.</p>\n<p>Finally, I thank my wife <a href=\"https://jennifer.damato.design/\">Jen</a> for her support; the first to hear my convoluted design theories before they are fully-baked. While some folks don't want to take their work home with them; I'm so incredibly luckily to be living in a design systems house.</p>\n",
            "url": "https://blog.damato.design/posts/thanking-you",
            "title": "Thanking you",
            "summary": "My journey in contributing with the community.",
            "image": "https://blog.damato.design/og-images/thanking-you",
            "date_modified": "2023-08-02T00:00:00.000Z"
        },
        {
            "id": "token-operations",
            "content_html": "<p>I have been revisiting the infrastructure which supports themes at my day job where the number of tokens has exploded into the hundreds; thousands if you count the possibilities of defining custom ones for special needs. This makes the token curation process unwieldly when theming because assigning values to over 500 semantic tokens is very tedious.</p>\n<p>The trouble is that while a certain brand or theme might have a few base values which give it personality, the final collection of tokens to define a theme will require slight variations of these base values for a properly curated presentation.</p>\n<p>What if we could instead allow for a few values to be set in a theme to inform the rest of the values in some specified way?</p>\n<h2>Operations</h2>\n<p><a href=\"https://github.com/design-tokens/community-group/issues/88#issuecomment-1029905903\">First suggested within the Design Tokens Community Group by Jerome Farnum</a> we could consider a special key on the specification that expects an order of operations to be performed (<a href=\"https://github.com/design-tokens/community-group/issues/88#issuecomment-1073374383\">example from James Nash</a>):</p>\n<pre><code class=\"language-json\">{\n  &quot;some-token&quot;: {\n    &quot;$value&quot;: &quot;#ff0000&quot;,\n    &quot;$type&quot;: &quot;color&quot;,\n    &quot;$operations&quot;: [\n       { &quot;hue&quot;: -20 },\n       { &quot;alpha&quot;: 0.3 } \n    ]\n  }\n}\n</code></pre>\n<p>This is a good start but I saw two major flaws with this approach:</p>\n<h3>Freeform naming</h3>\n<p>The words <code>hue</code> and <code>alpha</code> are meant to reference some external function that must exist in the token processing in order to transform to a final value. The algorithms used to determine the final output might be different or not exist at all. Each vendor must implement their own <code>hue</code> and <code>alpha</code> functions in order for these to be useful. This would require the specification to outline <em>every</em> kind of possible transform a theme author might want to use.</p>\n<h3>Custom functions</h3>\n<p>Furthermore, theme curators could be interested in creating their own custom functions which would need to be executed in vendors' processes. In this format, there's no clear way to define this. We can't even support multiple arguments in the current suggestion.</p>\n<h2>Step-by-step</h2>\n<p>The solution I have for this is to implement a low-level language that can be built upon to make more complex functions. Here's an example of what a token file could look like with a new take on <code>$operations</code>:</p>\n<pre><code class=\"language-json\">{\n  &quot;primary-color-overlay&quot;: {\n    &quot;$type&quot;: &quot;color&quot;,\n    &quot;$value&quot;: &quot;#fffc00&quot;,\n    &quot;$operations&quot;: [\n      0.5,\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#([0-9A-Fa-f]{2})&quot;],\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{2})([0-9A-Fa-f]{2})&quot;],\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{4})([0-9A-Fa-f]{2})&quot;],\n      [&quot;Math.parseInt&quot;, &quot;$1&quot;, 16],\n      [&quot;Math.parseInt&quot;, &quot;$2&quot;, 16],\n      [&quot;Math.parseInt&quot;, &quot;$3&quot;, 16],\n      [&quot;String.concat&quot;, &quot;,&quot;, &quot;$4&quot;, &quot;$5&quot;, &quot;$6&quot;, &quot;$0&quot;],\n      [&quot;String.concat&quot;, &quot;&quot;, &quot;rgba(&quot;, &quot;$7&quot;, &quot;)&quot;]\n    ]\n  }\n}\n</code></pre>\n<p><a href=\"https://replit.com/@fauxserious/TokenOperations\">See minimal prototype in action.</a></p>\n<p>The <code>$operations</code> key is still an array which is necessary to ensure we can have a sequential step. The first concept is that each item (except for the first in this example) is an <strong>operation</strong>. It has the following signature:</p>\n<pre><code class=\"language-json\">[&quot;OperationReference&quot;, &quot;argument1&quot;, &quot;argument2&quot;, &quot;argument3&quot;,...]\n</code></pre>\n<p>The first item in each operation array references some well-known function that can be implemented across token processing tools and vendors. For this to work, I believe we'll need at least <code>String</code> and <code>Math</code> with a few additional methods to support standard operations (eg., <code>Math.add</code>). This is something that can be included in the tokens specification if agreeable.</p>\n<p>The result of each operation is stored in a special variable reference related to its index in the operations array. In the example above, the first operation (defined at index <code>1</code>) result is stored at <code>&quot;$1&quot;</code>. This result is used as an argument in the fifth operation (the first to use <code>Math.parseInt</code> above).  Primitive values in the operations array are simply stored as results to the index. Here's the example again, with comments marking how results are stored:</p>\n<pre><code class=\"language-json\">{\n  &quot;primary-color-overlay&quot;: {\n    &quot;$type&quot;: &quot;color&quot;,\n    &quot;$value&quot;: &quot;#fffc00&quot;,\n    &quot;$operations&quot;: [\n      0.5, // 0.5 stored at $0\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#([0-9A-Fa-f]{2})&quot;], // 'ff' stored at $1\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{2})([0-9A-Fa-f]{2})&quot;], // 'fc' stored at $2\n      [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{4})([0-9A-Fa-f]{2})&quot;], // '00' stored at $3\n      [&quot;Math.parseInt&quot;, &quot;$1&quot;, 16], // 255 stored at $4\n      [&quot;Math.parseInt&quot;, &quot;$2&quot;, 16], // 252 stored at $5\n      [&quot;Math.parseInt&quot;, &quot;$3&quot;, 16], // 0 stored at $6\n      [&quot;String.concat&quot;, &quot;,&quot;, &quot;$4&quot;, &quot;$5&quot;, &quot;$6&quot;, &quot;$0&quot;], // 255,252,0,0.5 stored at $7\n      [&quot;String.concat&quot;, &quot;&quot;, &quot;rgba(&quot;, &quot;$7&quot;, &quot;)&quot;] // rgba(255,252,0,0.5) stored at $8\n    ]\n  }\n}\n</code></pre>\n<p>This would also include a special <code>$value</code> which refers to the original token value.</p>\n<p>One of the larger benefits to this approach is that the low-level set of operations don't receive a name, which avoids contention about naming of operations from within the specification (ie., should it be <code>opacity</code> or <code>alpha</code>). Names would only be needed when sharing sets of operations between token authors.</p>\n<h2>Reusing common operations</h2>\n<p>Clearly, we would not want to write all of these operations in order to apply opacity to a given token each time. We'll need a way to reference a set of operations. This could be supported by allowing an import syntax within the specification. <a href=\"https://github.com/design-tokens/community-group/issues/210#issuecomment-1501037423\">I've suggested this idea before in the community group.</a> It could look like this for operations:</p>\n<pre><code class=\"language-json\">{\n  &quot;primary-color-overlay&quot;: {\n    &quot;$type&quot;: &quot;color&quot;,\n    &quot;$value&quot;: &quot;#fffc00&quot;,\n    &quot;$operations&quot;: [ \n      // All items after the import are used as arguments for the nested operation in order\n      // 0.5 stored at $0 for @token-operations/hex-opacity operations\n      [&quot;@token-operations/hex-opacity&quot;, 0.5 ]\n    ]\n  }\n}\n</code></pre>\n<p>In the above example <code>@token-operations/hex-opacity</code> is completely arbitrary and could be any package registry or url that has an array as the export. The expectation here is that folks might write projects that abstract low-level collections of operations into more user-friendly exports. This is similar to the purpose of the <a href=\"https://lit.dev/\">Lit framework</a> for component authoring; to make web component development more accessible with a level of abstraction.</p>\n<p>The special sauce would be within the operations parser. Since the first argument in an operation is meant to be a reference to a function (eg., <code>String.concat</code>), we could also check for a potential file to import here or have some other special syntax. The result would be to inject the operations array related to this reference in place as a nested operation with its own scoped step indicies. The trailing arguments of the import are then placed in the beginning of the imported operation set since each curated operation has an expected signature.</p>\n<pre><code class=\"language-json\">{\n  &quot;primary-color-overlay&quot;: {\n    &quot;$type&quot;: &quot;color&quot;,\n    &quot;$value&quot;: &quot;#fffc00&quot;,\n    &quot;$operations&quot;: [\n      // First level of operations\n      [\n        // Second level of operations (nested), final output returns to parent operation result in place\n        0.5, // First argument after import operation, placed at $0 in nested operation\n        [&quot;String.match&quot;, &quot;$value&quot;, &quot;#([0-9A-Fa-f]{2})&quot;],\n        [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{2})([0-9A-Fa-f]{2})&quot;],\n        [&quot;String.match&quot;, &quot;$value&quot;, &quot;#(?:[0-9A-Fa-f]{4})([0-9A-Fa-f]{2})&quot;],\n        [&quot;Math.parseInt&quot;, &quot;$1&quot;, 16],\n        [&quot;Math.parseInt&quot;, &quot;$2&quot;, 16],\n        [&quot;Math.parseInt&quot;, &quot;$3&quot;, 16],\n        [&quot;String.concat&quot;, &quot;,&quot;, &quot;$4&quot;, &quot;$5&quot;, &quot;$6&quot;, &quot;$0&quot;],\n        [&quot;String.concat&quot;, &quot;&quot;, &quot;rgba(&quot;, &quot;$7&quot;, &quot;)&quot;]\n      ]\n    ]\n  }\n}\n</code></pre>\n<p>The purpose of this is so imported operations can be chained while maintaining the positional references for each step. In other words, we want to maintain the meaning of <code>$0</code> related to the rest of the steps in place.</p>\n<p>In this way, as long as token processors include the low-level operational functions and the standardized way to execute them, you can define any kind of transform you need right within the token file.</p>\n",
            "url": "https://blog.damato.design/posts/token-operations",
            "title": "Token operations",
            "summary": "Defining transforms into a specification.",
            "image": "https://blog.damato.design/og-images/token-operations",
            "date_modified": "2023-05-31T00:00:00.000Z"
        },
        {
            "id": "tokens-as-intents",
            "content_html": "<p>There are tons of definitions of design tokens on the web. Enough that I won't link to them here and you can find your favorite one with a web search. Many of the examples of design tokens show a relationship that looks something like this:</p>\n<ul>\n<li><code>color-blue-500</code> ⬅ <code>#0000ff</code></li>\n</ul>\n<p>Here, there's a name that represents the value. The naming in this example indicates a few things like the category (color) then a family within the category (blue) and finally a way of showing a relation between similar tokens of the same depth (500). This was well advertised through the <a href=\"https://material.io/design/color/the-color-system.html\">material design color palettes</a>.</p>\n<h2>The immediate problem</h2>\n<p>Now let's say we design a button, and we want to give it an accent color from our palette. Maybe this is also our brand color and used for a few other marketing items as well.</p>\n<pre><code class=\"language-css\">.btn {\n  background-color: var(--color-blue-500);\n  color: var(--color-white);\n}\n</code></pre>\n<p>Seems harmless. That is until you get a message from marketing and the brand colors are changing. What do you do? You might think a quick fix would be to do this:</p>\n<ul>\n<li><code>color-blue-500</code> ⬅ <code>orange</code></li>\n</ul>\n<p>Because <code>color-blue-500</code> is the brand color, it'll update in all of the spots. Clearly this isn't a good approach because the name no longer matches the value.</p>\n<p>Instead you'd have to update all of the places where the brand color was used.</p>\n<pre><code class=\"language-css\">.btn {\n  background-color: var(--color-orange-500);\n  color: var(--color-white);\n}\n</code></pre>\n<p>Oh wait, is that white accessible on the orange? That might need to be updated too!</p>\n<pre><code class=\"language-css\">.btn {\n  background-color: var(--color-orange-500);\n  color: var(--color-black);\n}\n</code></pre>\n<p>As you can see, you'd be combing through existing assets; looking for areas that need to be updated and never being sure you've gotten everything. We need a better system and you can probably give a recommendation already. Let's change the mapping to the following:</p>\n<ul>\n<li><code>color-primary</code> ⬅ <code>orange</code></li>\n</ul>\n<p>Now, I can use that name without worrying about the value.</p>\n<pre><code class=\"language-css\">.btn {\n  background-color: var(--color-primary);\n}\n</code></pre>\n<p>It doesn't yet solve the relational colors (ie., the text color) but we'll get there.</p>\n<h2>Provide intention</h2>\n<p>The concept that I'm describing is not new. It is a token naming approach that attempts to loosen the description of the value by providing more meaning. <a href=\"https://twitter.com/nathanacurtis\">Nathan Curtis</a> <a href=\"https://medium.com/eightshapes-llc/naming-tokens-in-design-systems-9e86c7444676\">lands on this idea</a> through an exploration of other systems' naming conventions without explicitly calling them more than design tokens.</p>\n<p>What Nathan calls <em>concepts</em> in his post is the basis behind the naming convention that I've been calling <em>intents</em> since 2017 which is a term coined by <a href=\"https://twitter.com/josephschmitt\">Joe Schmitt</a>. The idea is that <strong>the token name should describe an intention, not the value</strong>.</p>\n<p>As a designer, I want to place a button inside of a card. What kind of button should go into that card? I don't mean what color or font size, I mean <em>what kind of button</em>. When we design an interface we are making decisions about the kind of thing to use that is expected to help the user move forward. We decide to use a primary button because we want to draw the user's attention here first before any other action. The kind of button is primary due to its priority and the decision I'm making is an <strong>intent</strong>. We can separate the intent from the styles we associate with that intent.</p>\n<p>Another example would be an alert banner. Which banner should I use to show your credit card is about to expire? I'm not looking for the orange banner, I'm looking for the warning banner. I intend to describe to the user that this message is a warning. If you think in this way, the style of the warning is not important. It's the decision about how we expect to convey this message that is important.</p>\n<p>If you fully adopt this approach, this helps by teaching the user similarly styled things have the same behavior. It'll be easy for a user to identify all primary actions or warning statuses because they have the same treatment (or have the same intent) across uses.</p>\n<p>To be clear <strong>intents are tokens</strong>. They just have a special purpose in the ecosystem.</p>\n<h2>A new system of naming</h2>\n<p>If we use the intent based naming system, the mapping might have an assignment like these:</p>\n<ul>\n<li><code>feedback-warning-surface-color</code> ⬅ <code>color-orange-500</code></li>\n<li><code>feedback-warning-onsurface-color</code> ⬅ <code>#fff</code></li>\n</ul>\n<p>Notice that the right-hand side can be a raw value or some other variable. It might help for these to be reusable variables like <code>color-orange-500</code> because you might reuse this value is other places. What matters is that the intent name (the left-hand side) does not change.</p>\n<p>Those intent names are describing parts of the experience where we intend to show a warning by using a background color and a foreground color. When you set an intent as a component property value, this is effectively a marriage. It should never change.</p>\n<p>Now we can use the <code>feedback-warning-surface-color</code> in places of the experience where we intend to show a warning. These areas will not change their intent! We will always show a warning here, even if we style it differently later.</p>\n<pre><code class=\"language-css\">.alert-warning {\n  background-color: var(--feedback-warning-surface-color);\n  color: var(--feedback-warning-onsurface-color);\n}\n</code></pre>\n<p>With this system, you are able to support any variation of theming; light &amp; dark mode, brand changes, private labeling, etc.. All you need to do is store different mappings of values to intents (aka. <em>theme</em>). Maybe in one theme, warnings need to be shown in red. In that theme change the mapping for warning backgrounds to red.</p>\n<ul>\n<li><code>feedback-warning-surface-color</code> ⬅ <code>color-red-300</code></li>\n</ul>\n<p>You'll never need to go into the components to make a change as long as we use intents to describe the styles. Just make a new theme and give the experience a new look.</p>\n<h2>Recommendations</h2>\n<p>I've have a few years of experience with this approach and want to document some of the pitfalls to avoid when implementing.</p>\n<p><strong>Avoid the words light and dark</strong>. You might consider trying this for buttons that appear on inverted backgrounds. Instead, I recommend setting an inverted theme within that container so it can cover all of the possible treatments within. Remember, it's probably not just the button that needs to be inverted, there's probably text or input fields that might need coverage too. If you really need to show a relationship use the word &quot;contrast&quot; instead.</p>\n<p><strong>Make naming relative to the page styles</strong>. I recommend a very generic category called &quot;box&quot; which in its simplest form describes the <code>&lt;body/&gt;</code> styles.</p>\n<ul>\n<li><code>box-background-color</code>: The <code>&lt;body/&gt;</code> background color.</li>\n<li><code>box-foreground-color</code>: The <code>&lt;body/&gt;</code> text / icon color related to the background.</li>\n<li><code>box-border-color</code>: The most common border color for boxes which will share the <code>&lt;body/&gt;</code> background color.</li>\n</ul>\n<p>In my experience there might be another kind of container that is meant to show a visual difference from the body background. I tend to name this <code>boxLowContrast</code> because it is still relational to the <code>&lt;body/&gt;</code>. If you have more variations that this, you'll have to get creative with your naming here. Remember, this is for generic non-interactive containers. You can have additional categories for more meaningful containers.</p>\n<p>Doing this allows you to keep in the mindset of a theme when completing the mapping.</p>\n<pre><code class=\"language-json\">// &quot;light theme&quot;\n{\n  &quot;box-background-color&quot;: &quot;#fff&quot;, // white\n  &quot;box-foreground-color&quot;: &quot;#000&quot;, // black\n}\n</code></pre>\n<pre><code class=\"language-json\">// &quot;dark theme&quot;\n{\n  &quot;box-background-color&quot;: &quot;#000&quot;, // black\n  &quot;box-foreground-color&quot;: &quot;#fff&quot;, // white\n}\n</code></pre>\n<p><strong>Start with generic categories</strong>. A component is not necessarily an intent. You can consider a tab to be a part of an actionable category. Perhaps dive a step deeper into a navigational category. However, I would not recommend making a &quot;tab&quot; category.</p>\n<ul>\n<li><code>action-background-color</code>: Generic, describes all interactive element backgrounds.</li>\n<li><code>navigation-background-color</code>: More specific, describes all interactive element backgrounds which are meant for navigation.</li>\n<li><code>tab-background-color</code>: Very specific, only describes the tab background color.</li>\n</ul>\n<p>Here are some categories that have worked well in the past:</p>\n<ul>\n<li><strong>box</strong>: Describes generic non-interactive containers, eg. <code>&lt;body/&gt;</code>.</li>\n<li><strong>action</strong>: Describes interactive containers, eg. <code>&lt;button/&gt;</code>.</li>\n<li><strong>navigation</strong>: Describes interactive containers for the purpose of navigation, eg. <code>&lt;a/&gt;</code> (link).</li>\n<li><strong>control</strong>: Describes interactive containers for the purpose of inputting information, eg. <code>&lt;input/&gt;</code>.</li>\n<li><strong>feedback</strong>: Describes non-interactive containers for the purpose of indicating a system state to the user, eg. banners, badges, notifications.</li>\n<li><strong>figure</strong>: Describes the use of color meant to segregate entities, eg. data-visualizations, illustrations, default avatar colors.</li>\n<li><strong>text</strong>: Describes all use of typography, more on this later.</li>\n</ul>\n<p>The feedback and figure colors are unlike the others. For the feedback category I recommend the following set of properties.</p>\n<ul>\n<li><code>feedback-[type]-surface-color</code>: Describes when the background is used to indicate the status through color. This is meant for banners that use the background as the color accent.</li>\n<li><code>feedback-[type]-onsurface-color</code>: Describes the color to use for elements that appear on the <code>feedback-[type]-surface-color</code> such as text and icons.</li>\n<li><code>feedback-[type]-foreground-color</code>: Describes when the text is used to indicate the status through color. An example of this might be error text underneath an input field. This color is related to the <code>box-background-color</code> in terms of contrast and application.</li>\n</ul>\n<p>A caveat here is that if you attempt to put more complicated experiences within a container which has <code>feedback-[type]-surface-color</code>, the related <code>feedback-[type]-onsurface-color</code> will have difficulty applying coverage to the elements within. The recommendation here is to keep the feedback to text and icons only.</p>\n<p>The figure category is the least well understood. The best way to curate this is to order the colors by expected popularity within coloring illustrations. This is also a good area to consider having more specific categories if necessary. For example, if the colors used for illustrations are different from those being used within data-visualizations. Otherwise I just number these to indicate popularity.</p>\n<ul>\n<li><code>figure-color-1</code>: The most used color within illustrations (other than box colors).</li>\n<li><code>figure-color-2</code>: The next most used color within illustrations.</li>\n<li><code>figure-color-3</code>: ...and so on.</li>\n</ul>\n<p>I've avoided trying to describe intents for the purposes of marketing because decisions of color there are often based on associated with given photography. In these areas you might opt to actual hard code the color because of the close association with the surrounding material and not necessarily with the overall page. Another recommendation might be to just have the following intents to only be used in places where the brand should be highlighted and not for areas with better intents.</p>\n<ul>\n<li><code>feedback-brand-surface-color</code></li>\n<li><code>feedback-brand-onsurface-color</code></li>\n<li><code>feedback-brand-foreground-color</code></li>\n</ul>\n<p><strong>Create additional variations to each category</strong> as necessary or potentially extend variations to others. For example we can imagine that all interactive categories will require a &quot;hover&quot; variation. Which would mean the following intents may exist:</p>\n<ul>\n<li><code>actionHovered-foreground-color</code></li>\n<li><code>navigationHovered-foreground-color</code></li>\n<li><code>controlHovered-foreground-color</code></li>\n</ul>\n<p>Remember to cover all of the possible states that your interaction might have.</p>\n<p>{% aside %}</p>\n<p>I've chosen to use the past tense to describe these states to indicate what has happened. You can think about this with the word &quot;selected&quot; where we wouldn't use the word &quot;select&quot; to describe the state. You can also think of the word you might use if combined with &quot;is&quot; (ie., is hovered, is focused).</p>\n<p>{% endaside %}</p>\n<p>One more note, if you are using focus rings, I recommend associating the ring with the <em>box</em> category because the ring visually appears on the box, not on the interactive element. As you might expect, having the same focus treatment across all interactive elements will be best and having it associated with the box category makes this easy to maintain. This would also go for shadows, although shadows have much more to do with light cast rather than a theme and could be avoided altogether.</p>\n<h2>Typography</h2>\n<p>I've mentioned in the recommendation that there should be an entire intent category dedicated to text. This is meant to have the same approach where each kind of text is identified based on purpose. Here are the variations that seem to work best.</p>\n<ul>\n<li><strong>Heading</strong>: Meant for large titles.</li>\n<li><strong>Title</strong>: Meant for small titles.</li>\n<li><strong>Action</strong>: Meant for text within interactive elements.</li>\n<li><strong>Input</strong>: Meant for text within text fields.</li>\n<li><strong>Caption</strong>: Meant for text providing additional detail, like help &amp; error messages.</li>\n</ul>\n<p>This isn't including the default category. So you'd see the following in a theme:</p>\n<pre><code class=\"language-json\">// default theme\n{\n  &quot;text-font-weight&quot;: 400, // body font weight\n  &quot;textHeading-font-weight&quot;: 700,\n  &quot;textTitle-font-weight&quot;: 600,\n  ...\n}\n</code></pre>\n<p>Clearly, this method doesn't support different levels of content hierarchy with just this collection of tokens alone. To do that you could either base the type scale on density (as is done here in the <a href=\"https://damato.design\">damato.design</a> family of sites.) or use the given font size as a base to compute additional font sizes using a set scale. That's an explanation for another post.</p>\n<h2>And beyond</h2>\n<p>From here you can include additional properties to each category or even add categories as your organization needs. Here within the <a href=\"https://system.damato.design\">damato.design system</a> we have identified <code>border-size</code>, <code>border-curve</code>, and <code>density-size</code> as additions to the box category to describe those features.</p>\n",
            "url": "https://blog.damato.design/posts/tokens-as-intents",
            "title": "Tokens as intents",
            "summary": "Naming your parts with purpose.",
            "image": "https://blog.damato.design/og-images/tokens-as-intents",
            "date_modified": "2022-05-12T00:00:00.000Z"
        },
        {
            "id": "truly-semantic",
            "content_html": "<p>Off the heels of <a href=\"https://www.clarityconf.com/session/mise-en-mode\">my talk at Clarity this year</a> I omitted a few concepts that could have been included but may have detracted from the focus of the talk. One of these was the qualities that make a token truly semantic. I've had many arguments in the community regarding tokens that are or are not semantic. So the purpose of this article is to be clear about which tokens are best used directly in the experience from other tokens that can be used for organizational purposes.</p>\n<h2>Semantic tokens do not suggest values</h2>\n<p>This is an image from the Mise en Mode talk, which begins to introduce why space is not semantic in most systems.</p>\n<p><img src=\"/images/non-semantic-tokens.png\" alt=\"button-bgcolor is meant for buttons, space-4 cannot be placed\"></p>\n<p>The semantic token <code>button-bgcolor</code> does not give any indication of the color that is meant for this token. While a token <code>color-blue-500</code> suggests that the color meant for this token is a blue, perhaps in the middle of other blues within a scale. This is an important distinction because we want the ability for these tokens to change based on outside factors; a common example being light mode and dark mode. However, we are not just limited to these user preferences. The color can change based on branding, localization, or expressiveness. It would be inappropriate to change the value of <code>color-blue-500</code> to an orange, which is why we instead use and change <code>button-bgcolor</code> because it does not suggest the value.</p>\n<p>I suggest that we ultimately do not need tokens that aren't semantic functionally in our ecosystems. However, the reason why a token like <code>color-blue-500</code> exists seems to be for human discourse. It is easier for people to speak about a color in a human-readable way than a color code. It also restricts the number of possible colors to use so slight variations of the same value do not appear accidentally.</p>\n<h2>Semantic tokens are generic component tokens</h2>\n<p>This was one of the images that didn't make it into the Mise en Mode talk:</p>\n<p><img src=\"/images/scooby-tokens.png\" alt=\"Fred from Scooby Doo, unmasking semantic tokens to reveal component tokens\"></p>\n<p>When you are in the process of identifying what semantic tokens to include, you should aim to keep the number of tokens low. This helps with token management but also ensures that ideas are consistent across the experience. As an example, I believe that items that you can click should be given similar treatments so a user learns these are the clickable areas. If we were to provide different treatments to these components, the user may miss options because the treatment is unique.</p>\n<p>In this way, I like to create categories of components. For example, all components where we expect a user to provide input to the system could be called &quot;control&quot; components which would suggest a family of tokens that are meant to style controls similarly. From here, we would get semantic tokens such as <code>control-borderColor</code> which might describe the <code>&lt;input/&gt;</code> border.</p>\n<p>While you could become more specific, this tends to cause treatments to be more unique. As an example, would you expect <code>textInput-borderColor</code> to be different from <code>checkbox-borderColor</code>? Probably not. So the exercise of identifying similar atomic components is important to determining your semantic token set. These similar components are grouped into generic categories (eg., non-interactive surfaces, actions, controls, etc.) which form the foundation for your tokens.</p>\n<p>A good exercise to determine what your semantic tokens could be is by reviewing low-fidelity wireframes of your experience. Because these are meant to describe the pure functionality of the experience, without any additional noise of possible expressions, we can identify the most critical parts of the experience. Then we put those elements into categories based on their purpose in the experience. That purpose is the intention; the semantic meaning for why they exist here.</p>\n<h2>Semantic tokens are not dependent on each other</h2>\n<p>This is the &quot;smedium&quot; problem. A semantic token can be added or removed from the ecosystem without having to rethink other tokens within the same category. On the other hand, if you have a token called <code>space-sm</code> and another called <code>space-md</code>, you'll be unable to introduce another token between them without introducing something unexpected and not systematic. So a good rule of thumb is that semantic tokens do not include a scale. The scale suggests that there are other tokens above and below that could require tokens to be inserted between these over time.</p>\n<p>A caveat is the ordinal system (primary, secondary, etc) which is meant to suggest priority and hierarchy within the experience, which should not change between token values. As an example, the primary button is the action that we expect the user should take in relation to all other actions on the page. This is regardless of the treatment provided to the button. The primary action should also be apparent in low-fidelity wireframes. Because of this, a specialized purpose of hierarchy within the experience regardless of expression, the token <code>buttonPrimary-bgcolor</code> is appropriate. In contrast, the token <code>space-md</code> cannot be given a purpose in the same way. We cannot accurately determine what a <code>space-md</code> would be in a low-fidelity wireframe nor does it truly matter to the end-user to achieve their goals.</p>\n<h2>What can be semantic?</h2>\n<p>Color and typography can be described as semantic tokens. <a href=\"https://complementary.space/\">Space can also be semantic</a> if you reprogram the way you think about space. What semantic tokens have in common is that they have a simple, yet consistent, construction:</p>\n<pre><code>[purpose]-[priority]-[property]\n</code></pre>\n<p>Priority is optional and introduced if the content described must have an order of importance for the user. Describing space in importance is not necessary. Also, I am omitting interactive alternatives like hover and chosen for simplicity but they may also be included in the construction.</p>\n<p>This would suggest that elevation can also be semantic as we use this to describe importance; elements closer to the user should be perceived as more important. So we'd expect tokens such as <code>surface-primary-shadow</code>. Notice that we aren't introducing <code>surface-highest-shadow</code> as we aren't attempting to suggest how it looks but again the purpose. <code>modal-shadow</code> could also be appropriately semantic; only a more specific semantic token better known as a component token.</p>\n<p>Using the ordinal system helps out in other ways. It ensures that an element is not introduced that attempts to represent &quot;more-than-primary&quot; (something many marketers would love to try). It also suggests that priorities lower than tertiary are cumbersome and therefore avoided. I'd also include that having more than 3 levels is useless for user interpretation within the experience in the same way we often omit heading levels less than <code>h3</code> from most experiences.</p>\n<h2>Expanding outside of tokens</h2>\n<p>In the exploration of <a href=\"https://mode.place\">Mise en Mode</a>, I also considered suggesting a naming convention for modes. However, I quickly realized that this too required additional context. I mentioned at the end of <a href=\"/posts/ondark-virus\">Ondark Virus</a> that we should consider semantic naming at the scope level. This suggests that the words &quot;light&quot; and &quot;dark&quot; are also inappropriate and considers a possibility where the curation of values is for a semantic purpose. In other words, <em>why</em> do we need this new collection of values? What are we trying to express?</p>\n<p>The result of this question should be a research study to uncover why people are asking for &quot;dark mode&quot; because perhaps they are really asking for improved battery performance when browsing or perhaps more contrast for readability. In this way, we encode the purpose for the new collection of values as a semantically named mode which allows the purpose to be understood.</p>\n<p>Importantly, I do not suggest that the words &quot;light&quot; and &quot;dark&quot; be reimagined for user preference. I do not believe that users truly understand <em>why</em> they select light or dark without introspective questions or explicit instruction; it often becomes a matter of unconscious preference. However, I believe it is our responsibility in design to understand our users' needs better than they do so that we provide solutions they didn't fully realize. In this way, I would recommend renaming &quot;dark mode&quot; internally to align with its semantic purpose, while continuing to expose &quot;dark mode&quot; as a user preference externally. From here, determine why the user selects a mode and provide the appropriate values to reflect this choice based on understood user needs. I will admit, that some users will simply suggest that a mode looks better, but this might be an indication of stylistic preference and suggest they would rather have the ability to customize their experience.</p>\n<p><strong>#naming-is-hard</strong> because understanding why is hard.</p>\n",
            "url": "https://blog.damato.design/posts/truly-semantic",
            "title": "Truly Semantic",
            "summary": "Let us not throw this term around and pin down what it means precisely.",
            "image": "https://blog.damato.design/og-images/truly-semantic",
            "date_modified": "2023-11-07T00:00:00.000Z"
        }
    ]
}